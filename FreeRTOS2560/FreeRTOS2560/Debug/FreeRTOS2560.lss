
FreeRTOS2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012a  00800200  0000317c  00003210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000317c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000009cd  0080032a  0080032a  0000333a  2**0
                  ALLOC
  3 .comment      0000005f  00000000  00000000  0000333a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00001248  00000000  00000000  00003399  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0001b182  00000000  00000000  000045e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e0e  00000000  00000000  0001f763  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00007fa0  00000000  00000000  00022571  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00004190  00000000  00000000  0002a514  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00006bd6  00000000  00000000  0002e6a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00014fb9  00000000  00000000  0003527a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00001310  00000000  00000000  0004a233  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	cd c1       	rjmp	.+922    	; 0x39c <__ctors_end>
       2:	00 00       	nop
       4:	fb c1       	rjmp	.+1014   	; 0x3fc <__bad_interrupt>
       6:	00 00       	nop
       8:	f9 c1       	rjmp	.+1010   	; 0x3fc <__bad_interrupt>
       a:	00 00       	nop
       c:	f7 c1       	rjmp	.+1006   	; 0x3fc <__bad_interrupt>
       e:	00 00       	nop
      10:	f5 c1       	rjmp	.+1002   	; 0x3fc <__bad_interrupt>
      12:	00 00       	nop
      14:	f3 c1       	rjmp	.+998    	; 0x3fc <__bad_interrupt>
      16:	00 00       	nop
      18:	f1 c1       	rjmp	.+994    	; 0x3fc <__bad_interrupt>
      1a:	00 00       	nop
      1c:	ef c1       	rjmp	.+990    	; 0x3fc <__bad_interrupt>
      1e:	00 00       	nop
      20:	ed c1       	rjmp	.+986    	; 0x3fc <__bad_interrupt>
      22:	00 00       	nop
      24:	eb c1       	rjmp	.+982    	; 0x3fc <__bad_interrupt>
      26:	00 00       	nop
      28:	e9 c1       	rjmp	.+978    	; 0x3fc <__bad_interrupt>
      2a:	00 00       	nop
      2c:	e7 c1       	rjmp	.+974    	; 0x3fc <__bad_interrupt>
      2e:	00 00       	nop
      30:	e5 c1       	rjmp	.+970    	; 0x3fc <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 7b 08 	jmp	0x10f6	; 0x10f6 <__vector_13>
      38:	e1 c1       	rjmp	.+962    	; 0x3fc <__bad_interrupt>
      3a:	00 00       	nop
      3c:	df c1       	rjmp	.+958    	; 0x3fc <__bad_interrupt>
      3e:	00 00       	nop
      40:	dd c1       	rjmp	.+954    	; 0x3fc <__bad_interrupt>
      42:	00 00       	nop
      44:	db c1       	rjmp	.+950    	; 0x3fc <__bad_interrupt>
      46:	00 00       	nop
      48:	d9 c1       	rjmp	.+946    	; 0x3fc <__bad_interrupt>
      4a:	00 00       	nop
      4c:	d7 c1       	rjmp	.+942    	; 0x3fc <__bad_interrupt>
      4e:	00 00       	nop
      50:	d5 c1       	rjmp	.+938    	; 0x3fc <__bad_interrupt>
      52:	00 00       	nop
      54:	d3 c1       	rjmp	.+934    	; 0x3fc <__bad_interrupt>
      56:	00 00       	nop
      58:	d1 c1       	rjmp	.+930    	; 0x3fc <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__vector_23>
      60:	cd c1       	rjmp	.+922    	; 0x3fc <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 88 0e 	jmp	0x1d10	; 0x1d10 <__vector_25>
      68:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__vector_26>
      6c:	c7 c1       	rjmp	.+910    	; 0x3fc <__bad_interrupt>
      6e:	00 00       	nop
      70:	c5 c1       	rjmp	.+906    	; 0x3fc <__bad_interrupt>
      72:	00 00       	nop
      74:	c3 c1       	rjmp	.+902    	; 0x3fc <__bad_interrupt>
      76:	00 00       	nop
      78:	c1 c1       	rjmp	.+898    	; 0x3fc <__bad_interrupt>
      7a:	00 00       	nop
      7c:	bf c1       	rjmp	.+894    	; 0x3fc <__bad_interrupt>
      7e:	00 00       	nop
      80:	bd c1       	rjmp	.+890    	; 0x3fc <__bad_interrupt>
      82:	00 00       	nop
      84:	bb c1       	rjmp	.+886    	; 0x3fc <__bad_interrupt>
      86:	00 00       	nop
      88:	b9 c1       	rjmp	.+882    	; 0x3fc <__bad_interrupt>
      8a:	00 00       	nop
      8c:	b7 c1       	rjmp	.+878    	; 0x3fc <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <__vector_36>
      94:	0c 94 c7 0f 	jmp	0x1f8e	; 0x1f8e <__vector_37>
      98:	b1 c1       	rjmp	.+866    	; 0x3fc <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__vector_39>
      a0:	ad c1       	rjmp	.+858    	; 0x3fc <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ab c1       	rjmp	.+854    	; 0x3fc <__bad_interrupt>
      a6:	00 00       	nop
      a8:	a9 c1       	rjmp	.+850    	; 0x3fc <__bad_interrupt>
      aa:	00 00       	nop
      ac:	a7 c1       	rjmp	.+846    	; 0x3fc <__bad_interrupt>
      ae:	00 00       	nop
      b0:	a5 c1       	rjmp	.+842    	; 0x3fc <__bad_interrupt>
      b2:	00 00       	nop
      b4:	a3 c1       	rjmp	.+838    	; 0x3fc <__bad_interrupt>
      b6:	00 00       	nop
      b8:	a1 c1       	rjmp	.+834    	; 0x3fc <__bad_interrupt>
      ba:	00 00       	nop
      bc:	9f c1       	rjmp	.+830    	; 0x3fc <__bad_interrupt>
      be:	00 00       	nop
      c0:	9d c1       	rjmp	.+826    	; 0x3fc <__bad_interrupt>
      c2:	00 00       	nop
      c4:	9b c1       	rjmp	.+822    	; 0x3fc <__bad_interrupt>
      c6:	00 00       	nop
      c8:	99 c1       	rjmp	.+818    	; 0x3fc <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 08 0f 	jmp	0x1e10	; 0x1e10 <__vector_51>
      d0:	0c 94 06 10 	jmp	0x200c	; 0x200c <__vector_52>
      d4:	93 c1       	rjmp	.+806    	; 0x3fc <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 48 0f 	jmp	0x1e90	; 0x1e90 <__vector_54>
      dc:	0c 94 45 10 	jmp	0x208a	; 0x208a <__vector_55>
      e0:	8d c1       	rjmp	.+794    	; 0x3fc <__bad_interrupt>
      e2:	00 00       	nop
      e4:	5e 18       	sub	r5, r14
      e6:	61 18       	sub	r6, r1
      e8:	61 18       	sub	r6, r1
      ea:	61 18       	sub	r6, r1
      ec:	61 18       	sub	r6, r1
      ee:	61 18       	sub	r6, r1
      f0:	61 18       	sub	r6, r1
      f2:	61 18       	sub	r6, r1
      f4:	78 17       	cp	r23, r24
      f6:	61 18       	sub	r6, r1
      f8:	61 18       	sub	r6, r1
      fa:	61 18       	sub	r6, r1
      fc:	61 18       	sub	r6, r1
      fe:	61 18       	sub	r6, r1
     100:	61 18       	sub	r6, r1
     102:	61 18       	sub	r6, r1
     104:	78 17       	cp	r23, r24
     106:	61 18       	sub	r6, r1
     108:	61 18       	sub	r6, r1
     10a:	61 18       	sub	r6, r1
     10c:	61 18       	sub	r6, r1
     10e:	61 18       	sub	r6, r1
     110:	61 18       	sub	r6, r1
     112:	61 18       	sub	r6, r1
     114:	80 17       	cp	r24, r16
     116:	61 18       	sub	r6, r1
     118:	61 18       	sub	r6, r1
     11a:	61 18       	sub	r6, r1
     11c:	61 18       	sub	r6, r1
     11e:	61 18       	sub	r6, r1
     120:	61 18       	sub	r6, r1
     122:	61 18       	sub	r6, r1
     124:	a5 17       	cp	r26, r21
     126:	61 18       	sub	r6, r1
     128:	61 18       	sub	r6, r1
     12a:	61 18       	sub	r6, r1
     12c:	61 18       	sub	r6, r1
     12e:	61 18       	sub	r6, r1
     130:	61 18       	sub	r6, r1
     132:	61 18       	sub	r6, r1
     134:	80 17       	cp	r24, r16
     136:	61 18       	sub	r6, r1
     138:	61 18       	sub	r6, r1
     13a:	61 18       	sub	r6, r1
     13c:	61 18       	sub	r6, r1
     13e:	61 18       	sub	r6, r1
     140:	61 18       	sub	r6, r1
     142:	61 18       	sub	r6, r1
     144:	aa 17       	cp	r26, r26
     146:	61 18       	sub	r6, r1
     148:	61 18       	sub	r6, r1
     14a:	61 18       	sub	r6, r1
     14c:	61 18       	sub	r6, r1
     14e:	61 18       	sub	r6, r1
     150:	61 18       	sub	r6, r1
     152:	61 18       	sub	r6, r1
     154:	af 17       	cp	r26, r31
     156:	61 18       	sub	r6, r1
     158:	61 18       	sub	r6, r1
     15a:	61 18       	sub	r6, r1
     15c:	61 18       	sub	r6, r1
     15e:	61 18       	sub	r6, r1
     160:	61 18       	sub	r6, r1
     162:	61 18       	sub	r6, r1
     164:	c0 17       	cp	r28, r16
     166:	61 18       	sub	r6, r1
     168:	61 18       	sub	r6, r1
     16a:	61 18       	sub	r6, r1
     16c:	61 18       	sub	r6, r1
     16e:	61 18       	sub	r6, r1
     170:	61 18       	sub	r6, r1
     172:	61 18       	sub	r6, r1
     174:	e9 17       	cp	r30, r25
     176:	61 18       	sub	r6, r1
     178:	61 18       	sub	r6, r1
     17a:	61 18       	sub	r6, r1
     17c:	61 18       	sub	r6, r1
     17e:	61 18       	sub	r6, r1
     180:	61 18       	sub	r6, r1
     182:	61 18       	sub	r6, r1
     184:	b4 17       	cp	r27, r20
     186:	61 18       	sub	r6, r1
     188:	61 18       	sub	r6, r1
     18a:	61 18       	sub	r6, r1
     18c:	61 18       	sub	r6, r1
     18e:	61 18       	sub	r6, r1
     190:	61 18       	sub	r6, r1
     192:	61 18       	sub	r6, r1
     194:	ce 17       	cp	r28, r30
     196:	61 18       	sub	r6, r1
     198:	61 18       	sub	r6, r1
     19a:	61 18       	sub	r6, r1
     19c:	61 18       	sub	r6, r1
     19e:	61 18       	sub	r6, r1
     1a0:	61 18       	sub	r6, r1
     1a2:	61 18       	sub	r6, r1
     1a4:	eb 17       	cp	r30, r27
     1a6:	61 18       	sub	r6, r1
     1a8:	61 18       	sub	r6, r1
     1aa:	61 18       	sub	r6, r1
     1ac:	61 18       	sub	r6, r1
     1ae:	61 18       	sub	r6, r1
     1b0:	61 18       	sub	r6, r1
     1b2:	61 18       	sub	r6, r1
     1b4:	eb 17       	cp	r30, r27
     1b6:	61 18       	sub	r6, r1
     1b8:	61 18       	sub	r6, r1
     1ba:	61 18       	sub	r6, r1
     1bc:	61 18       	sub	r6, r1
     1be:	61 18       	sub	r6, r1
     1c0:	61 18       	sub	r6, r1
     1c2:	61 18       	sub	r6, r1
     1c4:	eb 17       	cp	r30, r27
     1c6:	61 18       	sub	r6, r1
     1c8:	61 18       	sub	r6, r1
     1ca:	61 18       	sub	r6, r1
     1cc:	61 18       	sub	r6, r1
     1ce:	61 18       	sub	r6, r1
     1d0:	61 18       	sub	r6, r1
     1d2:	61 18       	sub	r6, r1
     1d4:	eb 17       	cp	r30, r27
     1d6:	61 18       	sub	r6, r1
     1d8:	61 18       	sub	r6, r1
     1da:	61 18       	sub	r6, r1
     1dc:	61 18       	sub	r6, r1
     1de:	61 18       	sub	r6, r1
     1e0:	61 18       	sub	r6, r1
     1e2:	61 18       	sub	r6, r1
     1e4:	f4 17       	cp	r31, r20
     1e6:	61 18       	sub	r6, r1
     1e8:	61 18       	sub	r6, r1
     1ea:	61 18       	sub	r6, r1
     1ec:	61 18       	sub	r6, r1
     1ee:	61 18       	sub	r6, r1
     1f0:	61 18       	sub	r6, r1
     1f2:	61 18       	sub	r6, r1
     1f4:	25 18       	sub	r2, r5
     1f6:	61 18       	sub	r6, r1
     1f8:	61 18       	sub	r6, r1
     1fa:	61 18       	sub	r6, r1
     1fc:	61 18       	sub	r6, r1
     1fe:	61 18       	sub	r6, r1
     200:	61 18       	sub	r6, r1
     202:	61 18       	sub	r6, r1
     204:	f4 17       	cp	r31, r20
     206:	61 18       	sub	r6, r1
     208:	61 18       	sub	r6, r1
     20a:	61 18       	sub	r6, r1
     20c:	61 18       	sub	r6, r1
     20e:	61 18       	sub	r6, r1
     210:	61 18       	sub	r6, r1
     212:	61 18       	sub	r6, r1
     214:	25 18       	sub	r2, r5
     216:	61 18       	sub	r6, r1
     218:	61 18       	sub	r6, r1
     21a:	61 18       	sub	r6, r1
     21c:	61 18       	sub	r6, r1
     21e:	61 18       	sub	r6, r1
     220:	61 18       	sub	r6, r1
     222:	61 18       	sub	r6, r1
     224:	0c 18       	sub	r0, r12
     226:	61 18       	sub	r6, r1
     228:	61 18       	sub	r6, r1
     22a:	61 18       	sub	r6, r1
     22c:	61 18       	sub	r6, r1
     22e:	61 18       	sub	r6, r1
     230:	61 18       	sub	r6, r1
     232:	61 18       	sub	r6, r1
     234:	29 18       	sub	r2, r9
     236:	61 18       	sub	r6, r1
     238:	61 18       	sub	r6, r1
     23a:	61 18       	sub	r6, r1
     23c:	61 18       	sub	r6, r1
     23e:	61 18       	sub	r6, r1
     240:	61 18       	sub	r6, r1
     242:	61 18       	sub	r6, r1
     244:	29 18       	sub	r2, r9
     246:	61 18       	sub	r6, r1
     248:	61 18       	sub	r6, r1
     24a:	61 18       	sub	r6, r1
     24c:	61 18       	sub	r6, r1
     24e:	61 18       	sub	r6, r1
     250:	61 18       	sub	r6, r1
     252:	61 18       	sub	r6, r1
     254:	3e 18       	sub	r3, r14
     256:	61 18       	sub	r6, r1
     258:	61 18       	sub	r6, r1
     25a:	61 18       	sub	r6, r1
     25c:	61 18       	sub	r6, r1
     25e:	61 18       	sub	r6, r1
     260:	61 18       	sub	r6, r1
     262:	61 18       	sub	r6, r1
     264:	58 18       	sub	r5, r8
     266:	61 18       	sub	r6, r1
     268:	61 18       	sub	r6, r1
     26a:	61 18       	sub	r6, r1
     26c:	61 18       	sub	r6, r1
     26e:	61 18       	sub	r6, r1
     270:	61 18       	sub	r6, r1
     272:	61 18       	sub	r6, r1
     274:	58 18       	sub	r5, r8

00000276 <__trampolines_end>:
     276:	00 00       	nop
     278:	09 0a       	sbc	r0, r25
     27a:	02 08       	sbc	r0, r2
     27c:	0b 0c       	add	r0, r11
     27e:	0d 07       	cpc	r16, r29
     280:	06 03       	mulsu	r16, r22
     282:	04 01       	movw	r0, r8
	...
     2a0:	00 00       	nop
     2a2:	11 10       	cpse	r1, r1
     2a4:	0f 00       	.word	0x000f	; ????
	...

000002bc <digital_pin_to_bit_mask_PGM>:
     2bc:	01 02 10 20 20 08 08 10 20 40 10 20 40 80 02 01     ...  ... @. @...
     2cc:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 80 40     ........... @..@
     2dc:	20 10 08 04 02 01 80 04 02 01 80 40 20 10 08 04      ..........@ ...
     2ec:	02 01 08 04 02 01 01 02 04 08 10 20 40 80 01 02     ........... @...
     2fc:	04 08 10 20 40 80                                   ... @.

00000302 <digital_pin_to_port_PGM>:
     302:	05 05 05 05 07 05 08 08 08 08 02 02 02 02 0a 0a     ................
     312:	08 08 04 04 04 04 01 01 01 01 01 01 01 01 03 03     ................
     322:	03 03 03 03 03 03 04 07 07 07 0c 0c 0c 0c 0c 0c     ................
     332:	0c 0c 02 02 02 02 06 06 06 06 06 06 06 06 0b 0b     ................
     342:	0b 0b 0b 0b 0b 0b                                   ......

00000348 <port_to_input_PGM>:
     348:	00 00 20 00 23 00 26 00 29 00 2c 00 2f 00 32 00     .. .#.&.).,./.2.
     358:	00 01 00 00 03 01 06 01 09 01                       ..........

00000362 <port_to_output_PGM>:
     362:	00 00 22 00 25 00 28 00 2b 00 2e 00 31 00 34 00     ..".%.(.+...1.4.
     372:	02 01 00 00 05 01 08 01 0b 01                       ..........

0000037c <port_to_mode_PGM>:
     37c:	00 00 21 00 24 00 27 00 2a 00 2d 00 30 00 33 00     ..!.$.'.*.-.0.3.
     38c:	01 01 00 00 04 01 07 01 0a 01                       ..........

00000396 <__ctors_start>:
     396:	88 03       	fmulsu	r16, r16
     398:	b1 0c       	add	r11, r1
     39a:	4b 11       	cpse	r20, r11

0000039c <__ctors_end>:
     39c:	11 24       	eor	r1, r1
     39e:	1f be       	out	0x3f, r1	; 63
     3a0:	cf ef       	ldi	r28, 0xFF	; 255
     3a2:	d1 e2       	ldi	r29, 0x21	; 33
     3a4:	de bf       	out	0x3e, r29	; 62
     3a6:	cd bf       	out	0x3d, r28	; 61
     3a8:	00 e0       	ldi	r16, 0x00	; 0
     3aa:	0c bf       	out	0x3c, r16	; 60

000003ac <__do_copy_data>:
     3ac:	13 e0       	ldi	r17, 0x03	; 3
     3ae:	a0 e0       	ldi	r26, 0x00	; 0
     3b0:	b2 e0       	ldi	r27, 0x02	; 2
     3b2:	ec e7       	ldi	r30, 0x7C	; 124
     3b4:	f1 e3       	ldi	r31, 0x31	; 49
     3b6:	00 e0       	ldi	r16, 0x00	; 0
     3b8:	0b bf       	out	0x3b, r16	; 59
     3ba:	02 c0       	rjmp	.+4      	; 0x3c0 <__do_copy_data+0x14>
     3bc:	07 90       	elpm	r0, Z+
     3be:	0d 92       	st	X+, r0
     3c0:	aa 32       	cpi	r26, 0x2A	; 42
     3c2:	b1 07       	cpc	r27, r17
     3c4:	d9 f7       	brne	.-10     	; 0x3bc <__do_copy_data+0x10>

000003c6 <__do_clear_bss>:
     3c6:	2c e0       	ldi	r18, 0x0C	; 12
     3c8:	aa e2       	ldi	r26, 0x2A	; 42
     3ca:	b3 e0       	ldi	r27, 0x03	; 3
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <.do_clear_bss_start>

000003ce <.do_clear_bss_loop>:
     3ce:	1d 92       	st	X+, r1

000003d0 <.do_clear_bss_start>:
     3d0:	a7 3f       	cpi	r26, 0xF7	; 247
     3d2:	b2 07       	cpc	r27, r18
     3d4:	e1 f7       	brne	.-8      	; 0x3ce <.do_clear_bss_loop>

000003d6 <__do_global_ctors>:
     3d6:	13 e0       	ldi	r17, 0x03	; 3
     3d8:	cc e9       	ldi	r28, 0x9C	; 156
     3da:	d3 e0       	ldi	r29, 0x03	; 3
     3dc:	00 e0       	ldi	r16, 0x00	; 0
     3de:	06 c0       	rjmp	.+12     	; 0x3ec <__do_global_ctors+0x16>
     3e0:	22 97       	sbiw	r28, 0x02	; 2
     3e2:	01 09       	sbc	r16, r1
     3e4:	fe 01       	movw	r30, r28
     3e6:	0b bf       	out	0x3b, r16	; 59
     3e8:	0e 94 b8 18 	call	0x3170	; 0x3170 <__tablejump_elpm__>
     3ec:	c6 39       	cpi	r28, 0x96	; 150
     3ee:	d1 07       	cpc	r29, r17
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	08 07       	cpc	r16, r24
     3f4:	a9 f7       	brne	.-22     	; 0x3e0 <__do_global_ctors+0xa>
     3f6:	41 d1       	rcall	.+642    	; 0x67a <main>
     3f8:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <_exit>

000003fc <__bad_interrupt>:
     3fc:	01 ce       	rjmp	.-1022   	; 0x0 <__vectors>

000003fe <_Z5task2Pv>:

#define STACK_DEPTH 502


void vApplicationIdleHook()
{
     3fe:	8a e2       	ldi	r24, 0x2A	; 42
     400:	c8 2e       	mov	r12, r24
     402:	83 e0       	ldi	r24, 0x03	; 3
     404:	d8 2e       	mov	r13, r24
     406:	9c e2       	ldi	r25, 0x2C	; 44
     408:	e9 2e       	mov	r14, r25
     40a:	93 e0       	ldi	r25, 0x03	; 3
     40c:	f9 2e       	mov	r15, r25
     40e:	0e e2       	ldi	r16, 0x2E	; 46
     410:	13 e0       	ldi	r17, 0x03	; 3
     412:	20 e3       	ldi	r18, 0x30	; 48
     414:	33 e0       	ldi	r19, 0x03	; 3
     416:	42 e3       	ldi	r20, 0x32	; 50
     418:	53 e0       	ldi	r21, 0x03	; 3
     41a:	64 e3       	ldi	r22, 0x34	; 52
     41c:	73 e0       	ldi	r23, 0x03	; 3
     41e:	8e e3       	ldi	r24, 0x3E	; 62
     420:	93 e0       	ldi	r25, 0x03	; 3
     422:	4e d4       	rcall	.+2204   	; 0xcc0 <_ZN7MPU605010getMotion6EPiS0_S0_S0_S0_S0_>
     424:	68 ee       	ldi	r22, 0xE8	; 232
     426:	73 e0       	ldi	r23, 0x03	; 3
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 f6 13 	call	0x27ec	; 0x27ec <delay>
     430:	6a e0       	ldi	r22, 0x0A	; 10
     432:	72 e0       	ldi	r23, 0x02	; 2
     434:	8e e3       	ldi	r24, 0x3E	; 62
     436:	9a e0       	ldi	r25, 0x0A	; 10
     438:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN5Print5printEPKc>
     43c:	60 91 34 03 	lds	r22, 0x0334
     440:	70 91 35 03 	lds	r23, 0x0335
     444:	4a e0       	ldi	r20, 0x0A	; 10
     446:	50 e0       	ldi	r21, 0x00	; 0
     448:	8e e3       	ldi	r24, 0x3E	; 62
     44a:	9a e0       	ldi	r25, 0x0A	; 10
     44c:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN5Print5printEii>
     450:	6e e0       	ldi	r22, 0x0E	; 14
     452:	72 e0       	ldi	r23, 0x02	; 2
     454:	8e e3       	ldi	r24, 0x3E	; 62
     456:	9a e0       	ldi	r25, 0x0A	; 10
     458:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN5Print5printEPKc>
     45c:	60 91 32 03 	lds	r22, 0x0332
     460:	70 91 33 03 	lds	r23, 0x0333
     464:	4a e0       	ldi	r20, 0x0A	; 10
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	8e e3       	ldi	r24, 0x3E	; 62
     46a:	9a e0       	ldi	r25, 0x0A	; 10
     46c:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN5Print5printEii>
     470:	6e e0       	ldi	r22, 0x0E	; 14
     472:	72 e0       	ldi	r23, 0x02	; 2
     474:	8e e3       	ldi	r24, 0x3E	; 62
     476:	9a e0       	ldi	r25, 0x0A	; 10
     478:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN5Print5printEPKc>
     47c:	60 91 30 03 	lds	r22, 0x0330
     480:	70 91 31 03 	lds	r23, 0x0331
     484:	4a e0       	ldi	r20, 0x0A	; 10
     486:	50 e0       	ldi	r21, 0x00	; 0
     488:	8e e3       	ldi	r24, 0x3E	; 62
     48a:	9a e0       	ldi	r25, 0x0A	; 10
     48c:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN5Print5printEii>
     490:	6e e0       	ldi	r22, 0x0E	; 14
     492:	72 e0       	ldi	r23, 0x02	; 2
     494:	8e e3       	ldi	r24, 0x3E	; 62
     496:	9a e0       	ldi	r25, 0x0A	; 10
     498:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN5Print5printEPKc>
     49c:	60 91 2e 03 	lds	r22, 0x032E
     4a0:	70 91 2f 03 	lds	r23, 0x032F
     4a4:	4a e0       	ldi	r20, 0x0A	; 10
     4a6:	50 e0       	ldi	r21, 0x00	; 0
     4a8:	8e e3       	ldi	r24, 0x3E	; 62
     4aa:	9a e0       	ldi	r25, 0x0A	; 10
     4ac:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN5Print5printEii>
     4b0:	6e e0       	ldi	r22, 0x0E	; 14
     4b2:	72 e0       	ldi	r23, 0x02	; 2
     4b4:	8e e3       	ldi	r24, 0x3E	; 62
     4b6:	9a e0       	ldi	r25, 0x0A	; 10
     4b8:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN5Print5printEPKc>
     4bc:	60 91 2c 03 	lds	r22, 0x032C
     4c0:	70 91 2d 03 	lds	r23, 0x032D
     4c4:	4a e0       	ldi	r20, 0x0A	; 10
     4c6:	50 e0       	ldi	r21, 0x00	; 0
     4c8:	8e e3       	ldi	r24, 0x3E	; 62
     4ca:	9a e0       	ldi	r25, 0x0A	; 10
     4cc:	0e 94 50 13 	call	0x26a0	; 0x26a0 <_ZN5Print5printEii>
     4d0:	6e e0       	ldi	r22, 0x0E	; 14
     4d2:	72 e0       	ldi	r23, 0x02	; 2
     4d4:	8e e3       	ldi	r24, 0x3E	; 62
     4d6:	9a e0       	ldi	r25, 0x0A	; 10
     4d8:	0e 94 3e 12 	call	0x247c	; 0x247c <_ZN5Print5printEPKc>
     4dc:	60 91 2a 03 	lds	r22, 0x032A
     4e0:	70 91 2b 03 	lds	r23, 0x032B
     4e4:	4a e0       	ldi	r20, 0x0A	; 10
     4e6:	50 e0       	ldi	r21, 0x00	; 0
     4e8:	8e e3       	ldi	r24, 0x3E	; 62
     4ea:	9a e0       	ldi	r25, 0x0A	; 10
     4ec:	0e 94 58 13 	call	0x26b0	; 0x26b0 <_ZN5Print7printlnEii>
     4f0:	86 cf       	rjmp	.-244    	; 0x3fe <_Z5task2Pv>

000004f2 <_Z5task3Pv>:
     4f2:	22 e0       	ldi	r18, 0x02	; 2
     4f4:	82 2e       	mov	r8, r18
     4f6:	91 2c       	mov	r9, r1
     4f8:	a1 2c       	mov	r10, r1
     4fa:	b1 2c       	mov	r11, r1
     4fc:	60 e0       	ldi	r22, 0x00	; 0
     4fe:	87 e3       	ldi	r24, 0x37	; 55
     500:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <digitalWrite>
     504:	82 e0       	ldi	r24, 0x02	; 2
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 1e 14 	call	0x283c	; 0x283c <delayMicroseconds>
     50c:	61 e0       	ldi	r22, 0x01	; 1
     50e:	87 e3       	ldi	r24, 0x37	; 55
     510:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <digitalWrite>
     514:	8a e0       	ldi	r24, 0x0A	; 10
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 1e 14 	call	0x283c	; 0x283c <delayMicroseconds>
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	87 e3       	ldi	r24, 0x37	; 55
     520:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <digitalWrite>
     524:	20 e4       	ldi	r18, 0x40	; 64
     526:	32 e4       	ldi	r19, 0x42	; 66
     528:	4f e0       	ldi	r20, 0x0F	; 15
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	61 e0       	ldi	r22, 0x01	; 1
     52e:	88 e3       	ldi	r24, 0x38	; 56
     530:	0e 94 7d 15 	call	0x2afa	; 0x2afa <pulseIn>
     534:	a5 01       	movw	r20, r10
     536:	94 01       	movw	r18, r8
     538:	0e 94 96 18 	call	0x312c	; 0x312c <__divmodsi4>
     53c:	ca 01       	movw	r24, r20
     53e:	b9 01       	movw	r22, r18
     540:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <__floatsisf>
     544:	2d ec       	ldi	r18, 0xCD	; 205
     546:	3c ec       	ldi	r19, 0xCC	; 204
     548:	48 ee       	ldi	r20, 0xE8	; 232
     54a:	51 e4       	ldi	r21, 0x41	; 65
     54c:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__divsf3>
     550:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <__fixsfsi>
     554:	6b 01       	movw	r12, r22
     556:	7c 01       	movw	r14, r24
     558:	dc 01       	movw	r26, r24
     55a:	cb 01       	movw	r24, r22
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	a1 09       	sbc	r26, r1
     560:	b1 09       	sbc	r27, r1
     562:	83 36       	cpi	r24, 0x63	; 99
     564:	91 05       	cpc	r25, r1
     566:	a1 05       	cpc	r26, r1
     568:	b1 05       	cpc	r27, r1
     56a:	30 f4       	brcc	.+12     	; 0x578 <_Z5task3Pv+0x86>
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	82 e2       	ldi	r24, 0x22	; 34
     570:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <digitalWrite>
     574:	60 e0       	ldi	r22, 0x00	; 0
     576:	0b c0       	rjmp	.+22     	; 0x58e <_Z5task3Pv+0x9c>
     578:	84 e6       	ldi	r24, 0x64	; 100
     57a:	c8 16       	cp	r12, r24
     57c:	d1 04       	cpc	r13, r1
     57e:	e1 04       	cpc	r14, r1
     580:	f1 04       	cpc	r15, r1
     582:	64 f0       	brlt	.+24     	; 0x59c <_Z5task3Pv+0xaa>
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	82 e2       	ldi	r24, 0x22	; 34
     588:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <digitalWrite>
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	83 e2       	ldi	r24, 0x23	; 35
     590:	0e 94 4b 15 	call	0x2a96	; 0x2a96 <digitalWrite>
     594:	84 ef       	ldi	r24, 0xF4	; 244
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	0e 94 33 0b 	call	0x1666	; 0x1666 <vTaskDelay>
     59c:	60 e1       	ldi	r22, 0x10	; 16
     59e:	72 e0       	ldi	r23, 0x02	; 2
     5a0:	8e e3       	ldi	r24, 0x3E	; 62
     5a2:	9a e0       	ldi	r25, 0x0A	; 10
     5a4:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN5Print7printlnEPKc>
     5a8:	2a e0       	ldi	r18, 0x0A	; 10
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	b7 01       	movw	r22, r14
     5ae:	a6 01       	movw	r20, r12
     5b0:	8e e3       	ldi	r24, 0x3E	; 62
     5b2:	9a e0       	ldi	r25, 0x0A	; 10
     5b4:	0e 94 3d 13 	call	0x267a	; 0x267a <_ZN5Print7printlnEli>
     5b8:	68 e3       	ldi	r22, 0x38	; 56
     5ba:	72 e0       	ldi	r23, 0x02	; 2
     5bc:	8e e3       	ldi	r24, 0x3E	; 62
     5be:	9a e0       	ldi	r25, 0x0A	; 10
     5c0:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN5Print7printlnEPKc>
     5c4:	68 ee       	ldi	r22, 0xE8	; 232
     5c6:	73 e0       	ldi	r23, 0x03	; 3
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	90 e0       	ldi	r25, 0x00	; 0
     5cc:	0e 94 f6 13 	call	0x27ec	; 0x27ec <delay>
     5d0:	95 cf       	rjmp	.-214    	; 0x4fc <_Z5task3Pv+0xa>

000005d2 <setup>:
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	87 e3       	ldi	r24, 0x37	; 55
     5d6:	0e 94 09 15 	call	0x2a12	; 0x2a12 <pinMode>
     5da:	60 e0       	ldi	r22, 0x00	; 0
     5dc:	88 e3       	ldi	r24, 0x38	; 56
     5de:	0e 94 09 15 	call	0x2a12	; 0x2a12 <pinMode>
     5e2:	61 e0       	ldi	r22, 0x01	; 1
     5e4:	83 e2       	ldi	r24, 0x23	; 35
     5e6:	0e 94 09 15 	call	0x2a12	; 0x2a12 <pinMode>
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	82 e2       	ldi	r24, 0x22	; 34
     5ee:	0e 94 09 15 	call	0x2a12	; 0x2a12 <pinMode>
     5f2:	61 e0       	ldi	r22, 0x01	; 1
     5f4:	8d e0       	ldi	r24, 0x0D	; 13
     5f6:	0e 94 09 15 	call	0x2a12	; 0x2a12 <pinMode>
     5fa:	61 e0       	ldi	r22, 0x01	; 1
     5fc:	8e e0       	ldi	r24, 0x0E	; 14
     5fe:	0e 94 09 15 	call	0x2a12	; 0x2a12 <pinMode>
     602:	86 e8       	ldi	r24, 0x86	; 134
     604:	99 e0       	ldi	r25, 0x09	; 9
     606:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <_ZN7TwoWire5beginEv>
     60a:	6d ea       	ldi	r22, 0xAD	; 173
     60c:	72 e0       	ldi	r23, 0x02	; 2
     60e:	8e e3       	ldi	r24, 0x3E	; 62
     610:	9a e0       	ldi	r25, 0x0A	; 10
     612:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN5Print7printlnEPKc>
     616:	8e e3       	ldi	r24, 0x3E	; 62
     618:	93 e0       	ldi	r25, 0x03	; 3
     61a:	c9 d3       	rcall	.+1938   	; 0xdae <_ZN7MPU605010initializeEv>
     61c:	61 e0       	ldi	r22, 0x01	; 1
     61e:	8e e3       	ldi	r24, 0x3E	; 62
     620:	93 e0       	ldi	r25, 0x03	; 3
     622:	48 d3       	rcall	.+1680   	; 0xcb4 <_ZN7MPU605019setI2CBypassEnabledEb>
     624:	86 e3       	ldi	r24, 0x36	; 54
     626:	93 e0       	ldi	r25, 0x03	; 3
     628:	e9 d0       	rcall	.+466    	; 0x7fc <_ZN8HMC5883L10initializeEv>
     62a:	69 ec       	ldi	r22, 0xC9	; 201
     62c:	72 e0       	ldi	r23, 0x02	; 2
     62e:	8e e3       	ldi	r24, 0x3E	; 62
     630:	9a e0       	ldi	r25, 0x0A	; 10
     632:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN5Print7printlnEPKc>
     636:	86 e3       	ldi	r24, 0x36	; 54
     638:	93 e0       	ldi	r25, 0x03	; 3
     63a:	a8 d0       	rcall	.+336    	; 0x78c <_ZN8HMC5883L14testConnectionEv>
     63c:	88 23       	and	r24, r24
     63e:	19 f0       	breq	.+6      	; 0x646 <setup+0x74>
     640:	6b e3       	ldi	r22, 0x3B	; 59
     642:	72 e0       	ldi	r23, 0x02	; 2
     644:	02 c0       	rjmp	.+4      	; 0x64a <setup+0x78>
     646:	6a e5       	ldi	r22, 0x5A	; 90
     648:	72 e0       	ldi	r23, 0x02	; 2
     64a:	8e e3       	ldi	r24, 0x3E	; 62
     64c:	9a e0       	ldi	r25, 0x0A	; 10
     64e:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN5Print7printlnEPKc>
     652:	69 ec       	ldi	r22, 0xC9	; 201
     654:	72 e0       	ldi	r23, 0x02	; 2
     656:	8e e3       	ldi	r24, 0x3E	; 62
     658:	9a e0       	ldi	r25, 0x0A	; 10
     65a:	0e 94 76 12 	call	0x24ec	; 0x24ec <_ZN5Print7printlnEPKc>
     65e:	8e e3       	ldi	r24, 0x3E	; 62
     660:	93 e0       	ldi	r25, 0x03	; 3
     662:	d0 d3       	rcall	.+1952   	; 0xe04 <_ZN7MPU605014testConnectionEv>
     664:	88 23       	and	r24, r24
     666:	19 f0       	breq	.+6      	; 0x66e <setup+0x9c>
     668:	65 e7       	ldi	r22, 0x75	; 117
     66a:	72 e0       	ldi	r23, 0x02	; 2
     66c:	02 c0       	rjmp	.+4      	; 0x672 <setup+0xa0>
     66e:	63 e9       	ldi	r22, 0x93	; 147
     670:	72 e0       	ldi	r23, 0x02	; 2
     672:	8e e3       	ldi	r24, 0x3E	; 62
     674:	9a e0       	ldi	r25, 0x0A	; 10
     676:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <_ZN5Print7printlnEPKc>

0000067a <main>:
	
}

int main(void)
{
     67a:	af 92       	push	r10
     67c:	bf 92       	push	r11
     67e:	cf 92       	push	r12
     680:	df 92       	push	r13
     682:	ef 92       	push	r14
     684:	ff 92       	push	r15
     686:	0f 93       	push	r16
     688:	cf 93       	push	r28
     68a:	df 93       	push	r29
     68c:	00 d0       	rcall	.+0      	; 0x68e <main+0x14>
     68e:	1f 92       	push	r1
     690:	cd b7       	in	r28, 0x3d	; 61
     692:	de b7       	in	r29, 0x3e	; 62
	init();
     694:	0e 94 28 14 	call	0x2850	; 0x2850 <init>
	setup();
     698:	9c df       	rcall	.-200    	; 0x5d2 <setup>
	Serial.begin(9600);
     69a:	40 e8       	ldi	r20, 0x80	; 128
     69c:	55 e2       	ldi	r21, 0x25	; 37
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	70 e0       	ldi	r23, 0x00	; 0
     6a2:	8e e3       	ldi	r24, 0x3E	; 62
     6a4:	9a e0       	ldi	r25, 0x0A	; 10
     6a6:	0e 94 c8 10 	call	0x2190	; 0x2190 <_ZN14HardwareSerial5beginEm>


	pinMode(11,OUTPUT);
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	8b e0       	ldi	r24, 0x0B	; 11
     6ae:	0e 94 09 15 	call	0x2a12	; 0x2a12 <pinMode>
	//TaskHandle_t t1,t3;
	//TaskHandle_t t3;
	//TaskHandle_t t1;
	//Create tasks
	//xTaskCreate(task1, "Task 1", STACK_DEPTH, NULL, 4, &t1);
	xTaskCreate(task2, "Task 2", STACK_DEPTH, NULL, 5, &t2);
     6b2:	a1 2c       	mov	r10, r1
     6b4:	b1 2c       	mov	r11, r1
     6b6:	c1 2c       	mov	r12, r1
     6b8:	d1 2c       	mov	r13, r1
     6ba:	ce 01       	movw	r24, r28
     6bc:	03 96       	adiw	r24, 0x03	; 3
     6be:	7c 01       	movw	r14, r24
     6c0:	05 e0       	ldi	r16, 0x05	; 5
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	46 ef       	ldi	r20, 0xF6	; 246
     6c8:	51 e0       	ldi	r21, 0x01	; 1
     6ca:	67 ef       	ldi	r22, 0xF7	; 247
     6cc:	72 e0       	ldi	r23, 0x02	; 2
     6ce:	8f ef       	ldi	r24, 0xFF	; 255
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	67 d5       	rcall	.+2766   	; 0x11a2 <xTaskGenericCreate>
	xTaskCreate(task3, "Task 3", STACK_DEPTH, NULL, 3, &t3);
     6d4:	ce 01       	movw	r24, r28
     6d6:	01 96       	adiw	r24, 0x01	; 1
     6d8:	7c 01       	movw	r14, r24
     6da:	03 e0       	ldi	r16, 0x03	; 3
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	46 ef       	ldi	r20, 0xF6	; 246
     6e2:	51 e0       	ldi	r21, 0x01	; 1
     6e4:	6e ef       	ldi	r22, 0xFE	; 254
     6e6:	72 e0       	ldi	r23, 0x02	; 2
     6e8:	89 e7       	ldi	r24, 0x79	; 121
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	5a d5       	rcall	.+2740   	; 0x11a2 <xTaskGenericCreate>

	vTaskStartScheduler();
     6ee:	53 d6       	rcall	.+3238   	; 0x1396 <vTaskStartScheduler>

}
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	0f 90       	pop	r0
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	0f 91       	pop	r16
     702:	ff 90       	pop	r15
     704:	ef 90       	pop	r14
     706:	df 90       	pop	r13
     708:	cf 90       	pop	r12
     70a:	bf 90       	pop	r11
     70c:	af 90       	pop	r10
     70e:	08 95       	ret

00000710 <_GLOBAL__sub_I_accelgyro>:

// class default I2C address is 0x68
// specific I2C addresses may be passed as a parameter here
// AD0 low = 0x68 (default for InvenSense evaluation board)
// AD0 high = 0x69
MPU6050 accelgyro;
     710:	8e e3       	ldi	r24, 0x3E	; 62
     712:	93 e0       	ldi	r25, 0x03	; 3
     714:	b7 d2       	rcall	.+1390   	; 0xc84 <_ZN7MPU6050C1Ev>
HMC5883L mag;
     716:	86 e3       	ldi	r24, 0x36	; 54
     718:	93 e0       	ldi	r25, 0x03	; 3
     71a:	34 c0       	rjmp	.+104    	; 0x784 <_ZN8HMC5883LC1Ev>

0000071c <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	ec 01       	movw	r28, r24
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
     722:	62 d6       	rcall	.+3268   	; 0x13e8 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
     724:	80 91 4d 03 	lds	r24, 0x034D
     728:	90 91 4e 03 	lds	r25, 0x034E
     72c:	89 2b       	or	r24, r25
     72e:	31 f4       	brne	.+12     	; 0x73c <pvPortMalloc+0x20>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK ) );
     730:	82 e5       	ldi	r24, 0x52	; 82
     732:	93 e0       	ldi	r25, 0x03	; 3
     734:	90 93 4e 03 	sts	0x034E, r25
     738:	80 93 4d 03 	sts	0x034D, r24
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     73c:	40 91 4f 03 	lds	r20, 0x034F
     740:	50 91 50 03 	lds	r21, 0x0350
     744:	9e 01       	movw	r18, r28
     746:	24 0f       	add	r18, r20
     748:	35 1f       	adc	r19, r21
     74a:	2b 3d       	cpi	r18, 0xDB	; 219
     74c:	85 e0       	ldi	r24, 0x05	; 5
     74e:	38 07       	cpc	r19, r24
     750:	70 f4       	brcc	.+28     	; 0x76e <pvPortMalloc+0x52>
     752:	42 17       	cp	r20, r18
     754:	53 07       	cpc	r21, r19
     756:	70 f4       	brcc	.+28     	; 0x774 <pvPortMalloc+0x58>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
     758:	c0 91 4d 03 	lds	r28, 0x034D
     75c:	d0 91 4e 03 	lds	r29, 0x034E
     760:	c4 0f       	add	r28, r20
     762:	d5 1f       	adc	r29, r21
			xNextFreeByte += xWantedSize;
     764:	30 93 50 03 	sts	0x0350, r19
     768:	20 93 4f 03 	sts	0x034F, r18
     76c:	05 c0       	rjmp	.+10     	; 0x778 <pvPortMalloc+0x5c>

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
void *pvReturn = NULL;
     76e:	c0 e0       	ldi	r28, 0x00	; 0
     770:	d0 e0       	ldi	r29, 0x00	; 0
     772:	02 c0       	rjmp	.+4      	; 0x778 <pvPortMalloc+0x5c>
     774:	c0 e0       	ldi	r28, 0x00	; 0
     776:	d0 e0       	ldi	r29, 0x00	; 0
			xNextFreeByte += xWantedSize;
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
     778:	f8 d6       	rcall	.+3568   	; 0x156a <xTaskResumeAll>
		}
	}
	#endif

	return pvReturn;
}
     77a:	ce 01       	movw	r24, r28
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	08 95       	ret

00000782 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
     782:	08 95       	ret

00000784 <_ZN8HMC5883LC1Ev>:
 * @see HMC5883L_MODEREG_LENGTH
 */
uint8_t HMC5883L::getMode() {
    I2Cdev::readBits(devAddr, HMC5883L_RA_MODE, HMC5883L_MODEREG_BIT, HMC5883L_MODEREG_LENGTH, buffer);
    return buffer[0];
}
     784:	2e e1       	ldi	r18, 0x1E	; 30
     786:	fc 01       	movw	r30, r24
     788:	20 83       	st	Z, r18
     78a:	08 95       	ret

0000078c <_ZN8HMC5883L14testConnectionEv>:
     78c:	0f 93       	push	r16
     78e:	1f 93       	push	r17
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	ec 01       	movw	r28, r24
     796:	00 91 06 02 	lds	r16, 0x0206
     79a:	10 91 07 02 	lds	r17, 0x0207
     79e:	9c 01       	movw	r18, r24
     7a0:	2f 5f       	subi	r18, 0xFF	; 255
     7a2:	3f 4f       	sbci	r19, 0xFF	; 255
     7a4:	43 e0       	ldi	r20, 0x03	; 3
     7a6:	6a e0       	ldi	r22, 0x0A	; 10
     7a8:	88 81       	ld	r24, Y
     7aa:	7d d0       	rcall	.+250    	; 0x8a6 <_ZN6I2Cdev9readBytesEhhhPhj>
     7ac:	83 30       	cpi	r24, 0x03	; 3
     7ae:	51 f4       	brne	.+20     	; 0x7c4 <_ZN8HMC5883L14testConnectionEv+0x38>
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	88 34       	cpi	r24, 0x48	; 72
     7b4:	39 f4       	brne	.+14     	; 0x7c4 <_ZN8HMC5883L14testConnectionEv+0x38>
     7b6:	8a 81       	ldd	r24, Y+2	; 0x02
     7b8:	84 33       	cpi	r24, 0x34	; 52
     7ba:	21 f4       	brne	.+8      	; 0x7c4 <_ZN8HMC5883L14testConnectionEv+0x38>
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	9b 81       	ldd	r25, Y+3	; 0x03
     7c0:	93 33       	cpi	r25, 0x33	; 51
     7c2:	09 f0       	breq	.+2      	; 0x7c6 <_ZN8HMC5883L14testConnectionEv+0x3a>
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	08 95       	ret

000007d0 <_ZN8HMC5883L7setGainEh>:
     7d0:	46 2f       	mov	r20, r22
     7d2:	42 95       	swap	r20
     7d4:	44 0f       	add	r20, r20
     7d6:	40 7e       	andi	r20, 0xE0	; 224
     7d8:	61 e0       	ldi	r22, 0x01	; 1
     7da:	fc 01       	movw	r30, r24
     7dc:	80 81       	ld	r24, Z
     7de:	54 c0       	rjmp	.+168    	; 0x888 <_ZN6I2Cdev9writeByteEhhh>

000007e0 <_ZN8HMC5883L7setModeEh>:
 * @see HMC5883L_MODE_IDLE
 * @see HMC5883L_RA_MODE
 * @see HMC5883L_MODEREG_BIT
 * @see HMC5883L_MODEREG_LENGTH
 */
void HMC5883L::setMode(uint8_t newMode) {
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	ec 01       	movw	r28, r24
     7e8:	16 2f       	mov	r17, r22
    // use this method to guarantee that bits 7-2 are set to zero, which is a
    // requirement specified in the datasheet; it's actually more efficient than
    // using the I2Cdev.writeBits method
    I2Cdev::writeByte(devAddr, HMC5883L_RA_MODE, mode << (HMC5883L_MODEREG_BIT - HMC5883L_MODEREG_LENGTH + 1));
     7ea:	4f 81       	ldd	r20, Y+7	; 0x07
     7ec:	62 e0       	ldi	r22, 0x02	; 2
     7ee:	88 81       	ld	r24, Y
     7f0:	4b d0       	rcall	.+150    	; 0x888 <_ZN6I2Cdev9writeByteEhhh>
    mode = newMode; // track to tell if we have to clear bit 7 after a read
     7f2:	1f 83       	std	Y+7, r17	; 0x07
}
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	08 95       	ret

000007fc <_ZN8HMC5883L10initializeEv>:
 * averaging, 15 Hz data output rate, normal measurement bias, a,d 1090 gain (in
 * terms of LSB/Gauss). Be sure to adjust any settings you need specifically
 * after initialization, especially the gain settings if you happen to be seeing
 * a lot of -4096 values (see the datasheet for mor information).
 */
void HMC5883L::initialize() {
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	ec 01       	movw	r28, r24
    // write CONFIG_A register
    I2Cdev::writeByte(devAddr, HMC5883L_RA_CONFIG_A,
        (HMC5883L_AVERAGING_8 << (HMC5883L_CRA_AVERAGE_BIT - HMC5883L_CRA_AVERAGE_LENGTH + 1)) |
        (HMC5883L_RATE_15     << (HMC5883L_CRA_RATE_BIT - HMC5883L_CRA_RATE_LENGTH + 1)) |
        (HMC5883L_BIAS_NORMAL << (HMC5883L_CRA_BIAS_BIT - HMC5883L_CRA_BIAS_LENGTH + 1)));
     802:	40 e7       	ldi	r20, 0x70	; 112
     804:	60 e0       	ldi	r22, 0x00	; 0
     806:	88 81       	ld	r24, Y
     808:	3f d0       	rcall	.+126    	; 0x888 <_ZN6I2Cdev9writeByteEhhh>

    // write CONFIG_B register
    setGain(HMC5883L_GAIN_1090);
     80a:	61 e0       	ldi	r22, 0x01	; 1
     80c:	ce 01       	movw	r24, r28
     80e:	e0 df       	rcall	.-64     	; 0x7d0 <_ZN8HMC5883L7setGainEh>
    
    // write MODE register
    setMode(HMC5883L_MODE_SINGLE);
     810:	61 e0       	ldi	r22, 0x01	; 1
     812:	ce 01       	movw	r24, r28
}
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28

    // write CONFIG_B register
    setGain(HMC5883L_GAIN_1090);
    
    // write MODE register
    setMode(HMC5883L_MODE_SINGLE);
     818:	e3 cf       	rjmp	.-58     	; 0x7e0 <_ZN8HMC5883L7setModeEh>

0000081a <_ZN6I2Cdev10writeBytesEhhhPh>:
int8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout) {
    uint8_t b;
    uint8_t count = readByte(devAddr, regAddr, &b, timeout);
    *data = b & (1 << bitNum);
    return count;
}
     81a:	ef 92       	push	r14
     81c:	ff 92       	push	r15
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
     826:	1f 92       	push	r1
     828:	1f 92       	push	r1
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	06 2f       	mov	r16, r22
     830:	14 2f       	mov	r17, r20
     832:	68 2f       	mov	r22, r24
     834:	86 e8       	ldi	r24, 0x86	; 134
     836:	99 e0       	ldi	r25, 0x09	; 9
     838:	29 83       	std	Y+1, r18	; 0x01
     83a:	3a 83       	std	Y+2, r19	; 0x02
     83c:	0e 94 92 0c 	call	0x1924	; 0x1924 <_ZN7TwoWire17beginTransmissionEh>
     840:	60 2f       	mov	r22, r16
     842:	86 e8       	ldi	r24, 0x86	; 134
     844:	99 e0       	ldi	r25, 0x09	; 9
     846:	0e 94 3a 0c 	call	0x1874	; 0x1874 <_ZN7TwoWire5writeEh>
     84a:	29 81       	ldd	r18, Y+1	; 0x01
     84c:	02 2f       	mov	r16, r18
     84e:	e2 2e       	mov	r14, r18
     850:	3a 81       	ldd	r19, Y+2	; 0x02
     852:	f3 2e       	mov	r15, r19
     854:	8e 2d       	mov	r24, r14
     856:	80 1b       	sub	r24, r16
     858:	81 17       	cp	r24, r17
     85a:	40 f4       	brcc	.+16     	; 0x86c <_ZN6I2Cdev10writeBytesEhhhPh+0x52>
     85c:	f7 01       	movw	r30, r14
     85e:	61 91       	ld	r22, Z+
     860:	7f 01       	movw	r14, r30
     862:	86 e8       	ldi	r24, 0x86	; 134
     864:	99 e0       	ldi	r25, 0x09	; 9
     866:	0e 94 3a 0c 	call	0x1874	; 0x1874 <_ZN7TwoWire5writeEh>
     86a:	f4 cf       	rjmp	.-24     	; 0x854 <_ZN6I2Cdev10writeBytesEhhhPh+0x3a>
     86c:	86 e8       	ldi	r24, 0x86	; 134
     86e:	99 e0       	ldi	r25, 0x09	; 9
     870:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN7TwoWire15endTransmissionEv>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	df 91       	pop	r29
     87c:	cf 91       	pop	r28
     87e:	1f 91       	pop	r17
     880:	0f 91       	pop	r16
     882:	ff 90       	pop	r15
     884:	ef 90       	pop	r14
     886:	08 95       	ret

00000888 <_ZN6I2Cdev9writeByteEhhh>:
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	1f 92       	push	r1
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	49 83       	std	Y+1, r20	; 0x01
     894:	9e 01       	movw	r18, r28
     896:	2f 5f       	subi	r18, 0xFF	; 255
     898:	3f 4f       	sbci	r19, 0xFF	; 255
     89a:	41 e0       	ldi	r20, 0x01	; 1
     89c:	be df       	rcall	.-132    	; 0x81a <_ZN6I2Cdev10writeBytesEhhhPh>
     89e:	0f 90       	pop	r0
     8a0:	df 91       	pop	r29
     8a2:	cf 91       	pop	r28
     8a4:	08 95       	ret

000008a6 <_ZN6I2Cdev9readBytesEhhhPhj>:
     8a6:	3f 92       	push	r3
     8a8:	4f 92       	push	r4
     8aa:	5f 92       	push	r5
     8ac:	6f 92       	push	r6
     8ae:	7f 92       	push	r7
     8b0:	8f 92       	push	r8
     8b2:	9f 92       	push	r9
     8b4:	af 92       	push	r10
     8b6:	bf 92       	push	r11
     8b8:	cf 92       	push	r12
     8ba:	df 92       	push	r13
     8bc:	ef 92       	push	r14
     8be:	ff 92       	push	r15
     8c0:	0f 93       	push	r16
     8c2:	1f 93       	push	r17
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	00 d0       	rcall	.+0      	; 0x8ca <_ZN6I2Cdev9readBytesEhhhPhj+0x24>
     8ca:	00 d0       	rcall	.+0      	; 0x8cc <_ZN6I2Cdev9readBytesEhhhPhj+0x26>
     8cc:	cd b7       	in	r28, 0x3d	; 61
     8ce:	de b7       	in	r29, 0x3e	; 62
     8d0:	68 2e       	mov	r6, r24
     8d2:	56 2e       	mov	r5, r22
     8d4:	74 2e       	mov	r7, r20
     8d6:	3a 83       	std	Y+2, r19	; 0x02
     8d8:	29 83       	std	Y+1, r18	; 0x01
     8da:	0e 94 b5 13 	call	0x276a	; 0x276a <millis>
     8de:	6b 01       	movw	r12, r22
     8e0:	7c 01       	movw	r14, r24
     8e2:	31 2c       	mov	r3, r1
     8e4:	41 2c       	mov	r4, r1
     8e6:	87 2d       	mov	r24, r7
     8e8:	90 e0       	ldi	r25, 0x00	; 0
     8ea:	9c 83       	std	Y+4, r25	; 0x04
     8ec:	8b 83       	std	Y+3, r24	; 0x03
     8ee:	48 01       	movw	r8, r16
     8f0:	a1 2c       	mov	r10, r1
     8f2:	b1 2c       	mov	r11, r1
     8f4:	37 14       	cp	r3, r7
     8f6:	98 f5       	brcc	.+102    	; 0x95e <_ZN6I2Cdev9readBytesEhhhPhj+0xb8>
     8f8:	66 2d       	mov	r22, r6
     8fa:	86 e8       	ldi	r24, 0x86	; 134
     8fc:	99 e0       	ldi	r25, 0x09	; 9
     8fe:	0e 94 92 0c 	call	0x1924	; 0x1924 <_ZN7TwoWire17beginTransmissionEh>
     902:	65 2d       	mov	r22, r5
     904:	86 e8       	ldi	r24, 0x86	; 134
     906:	99 e0       	ldi	r25, 0x09	; 9
     908:	b5 d7       	rcall	.+3946   	; 0x1874 <_ZN7TwoWire5writeEh>
     90a:	86 e8       	ldi	r24, 0x86	; 134
     90c:	99 e0       	ldi	r25, 0x09	; 9
     90e:	0e 94 af 0c 	call	0x195e	; 0x195e <_ZN7TwoWire15endTransmissionEv>
     912:	66 2d       	mov	r22, r6
     914:	86 e8       	ldi	r24, 0x86	; 134
     916:	99 e0       	ldi	r25, 0x09	; 9
     918:	0e 94 92 0c 	call	0x1924	; 0x1924 <_ZN7TwoWire17beginTransmissionEh>
     91c:	4b 81       	ldd	r20, Y+3	; 0x03
     91e:	5c 81       	ldd	r21, Y+4	; 0x04
     920:	43 19       	sub	r20, r3
     922:	51 09       	sbc	r21, r1
     924:	41 32       	cpi	r20, 0x21	; 33
     926:	51 05       	cpc	r21, r1
     928:	14 f0       	brlt	.+4      	; 0x92e <_ZN6I2Cdev9readBytesEhhhPhj+0x88>
     92a:	40 e2       	ldi	r20, 0x20	; 32
     92c:	50 e0       	ldi	r21, 0x00	; 0
     92e:	66 2d       	mov	r22, r6
     930:	86 e8       	ldi	r24, 0x86	; 134
     932:	99 e0       	ldi	r25, 0x09	; 9
     934:	f5 d7       	rcall	.+4074   	; 0x1920 <_ZN7TwoWire11requestFromEhh>
     936:	86 e8       	ldi	r24, 0x86	; 134
     938:	99 e0       	ldi	r25, 0x09	; 9
     93a:	44 d7       	rcall	.+3720   	; 0x17c4 <_ZN7TwoWire9availableEv>
     93c:	89 2b       	or	r24, r25
     93e:	59 f1       	breq	.+86     	; 0x996 <_ZN6I2Cdev9readBytesEhhhPhj+0xf0>
     940:	01 15       	cp	r16, r1
     942:	11 05       	cpc	r17, r1
     944:	91 f1       	breq	.+100    	; 0x9aa <_ZN6I2Cdev9readBytesEhhhPhj+0x104>
     946:	0e 94 b5 13 	call	0x276a	; 0x276a <millis>
     94a:	6c 19       	sub	r22, r12
     94c:	7d 09       	sbc	r23, r13
     94e:	8e 09       	sbc	r24, r14
     950:	9f 09       	sbc	r25, r15
     952:	68 15       	cp	r22, r8
     954:	79 05       	cpc	r23, r9
     956:	8a 05       	cpc	r24, r10
     958:	9b 05       	cpc	r25, r11
     95a:	38 f1       	brcs	.+78     	; 0x9aa <_ZN6I2Cdev9readBytesEhhhPhj+0x104>
     95c:	1c c0       	rjmp	.+56     	; 0x996 <_ZN6I2Cdev9readBytesEhhhPhj+0xf0>
     95e:	01 15       	cp	r16, r1
     960:	11 05       	cpc	r17, r1
     962:	99 f1       	breq	.+102    	; 0x9ca <_ZN6I2Cdev9readBytesEhhhPhj+0x124>
     964:	0e 94 b5 13 	call	0x276a	; 0x276a <millis>
     968:	6c 19       	sub	r22, r12
     96a:	7d 09       	sbc	r23, r13
     96c:	8e 09       	sbc	r24, r14
     96e:	9f 09       	sbc	r25, r15
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	60 17       	cp	r22, r16
     976:	71 07       	cpc	r23, r17
     978:	82 07       	cpc	r24, r18
     97a:	93 07       	cpc	r25, r19
     97c:	30 f1       	brcs	.+76     	; 0x9ca <_ZN6I2Cdev9readBytesEhhhPhj+0x124>
     97e:	87 2d       	mov	r24, r7
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	24 2d       	mov	r18, r4
     984:	33 27       	eor	r19, r19
     986:	27 fd       	sbrc	r18, 7
     988:	30 95       	com	r19
     98a:	28 17       	cp	r18, r24
     98c:	39 07       	cpc	r19, r25
     98e:	ec f4       	brge	.+58     	; 0x9ca <_ZN6I2Cdev9readBytesEhhhPhj+0x124>
     990:	44 24       	eor	r4, r4
     992:	4a 94       	dec	r4
     994:	1a c0       	rjmp	.+52     	; 0x9ca <_ZN6I2Cdev9readBytesEhhhPhj+0x124>
     996:	86 e8       	ldi	r24, 0x86	; 134
     998:	99 e0       	ldi	r25, 0x09	; 9
     99a:	e1 d7       	rcall	.+4034   	; 0x195e <_ZN7TwoWire15endTransmissionEv>
     99c:	87 2d       	mov	r24, r7
     99e:	90 e2       	ldi	r25, 0x20	; 32
     9a0:	97 15       	cp	r25, r7
     9a2:	08 f4       	brcc	.+2      	; 0x9a6 <_ZN6I2Cdev9readBytesEhhhPhj+0x100>
     9a4:	80 e2       	ldi	r24, 0x20	; 32
     9a6:	38 0e       	add	r3, r24
     9a8:	a5 cf       	rjmp	.-182    	; 0x8f4 <_ZN6I2Cdev9readBytesEhhhPhj+0x4e>
     9aa:	e9 81       	ldd	r30, Y+1	; 0x01
     9ac:	fa 81       	ldd	r31, Y+2	; 0x02
     9ae:	e4 0d       	add	r30, r4
     9b0:	f1 1d       	adc	r31, r1
     9b2:	47 fc       	sbrc	r4, 7
     9b4:	fa 95       	dec	r31
     9b6:	fe 83       	std	Y+6, r31	; 0x06
     9b8:	ed 83       	std	Y+5, r30	; 0x05
     9ba:	86 e8       	ldi	r24, 0x86	; 134
     9bc:	99 e0       	ldi	r25, 0x09	; 9
     9be:	0a d7       	rcall	.+3604   	; 0x17d4 <_ZN7TwoWire4readEv>
     9c0:	ed 81       	ldd	r30, Y+5	; 0x05
     9c2:	fe 81       	ldd	r31, Y+6	; 0x06
     9c4:	80 83       	st	Z, r24
     9c6:	43 94       	inc	r4
     9c8:	b6 cf       	rjmp	.-148    	; 0x936 <_ZN6I2Cdev9readBytesEhhhPhj+0x90>
     9ca:	84 2d       	mov	r24, r4
     9cc:	26 96       	adiw	r28, 0x06	; 6
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	de bf       	out	0x3e, r29	; 62
     9d4:	0f be       	out	0x3f, r0	; 63
     9d6:	cd bf       	out	0x3d, r28	; 61
     9d8:	df 91       	pop	r29
     9da:	cf 91       	pop	r28
     9dc:	1f 91       	pop	r17
     9de:	0f 91       	pop	r16
     9e0:	ff 90       	pop	r15
     9e2:	ef 90       	pop	r14
     9e4:	df 90       	pop	r13
     9e6:	cf 90       	pop	r12
     9e8:	bf 90       	pop	r11
     9ea:	af 90       	pop	r10
     9ec:	9f 90       	pop	r9
     9ee:	8f 90       	pop	r8
     9f0:	7f 90       	pop	r7
     9f2:	6f 90       	pop	r6
     9f4:	5f 90       	pop	r5
     9f6:	4f 90       	pop	r4
     9f8:	3f 90       	pop	r3
     9fa:	08 95       	ret

000009fc <_ZN6I2Cdev8readByteEhhPhj>:
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	89 01       	movw	r16, r18
     a02:	9a 01       	movw	r18, r20
     a04:	41 e0       	ldi	r20, 0x01	; 1
     a06:	4f df       	rcall	.-354    	; 0x8a6 <_ZN6I2Cdev9readBytesEhhhPhj>
     a08:	1f 91       	pop	r17
     a0a:	0f 91       	pop	r16
     a0c:	08 95       	ret

00000a0e <_ZN6I2Cdev8readBitsEhhhhPhj>:
 * @param length Number of bits to read (not more than 8)
 * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)
 * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)
 * @return Status of read operation (true = success)
 */
int8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {
     a0e:	cf 92       	push	r12
     a10:	df 92       	push	r13
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	1f 92       	push	r1
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	c4 2e       	mov	r12, r20
     a26:	d2 2e       	mov	r13, r18
    // 76543210 bit numbers
    //    xxx   args: bitStart=4, length=3
    //    010   masked
    //   -> 010 shifted
    uint8_t count, b;
    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {
     a28:	97 01       	movw	r18, r14
     a2a:	ae 01       	movw	r20, r28
     a2c:	4f 5f       	subi	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	e5 df       	rcall	.-54     	; 0x9fc <_ZN6I2Cdev8readByteEhhPhj>
     a32:	88 23       	and	r24, r24
     a34:	f1 f0       	breq	.+60     	; 0xa72 <_ZN6I2Cdev8readBitsEhhhhPhj+0x64>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
     a36:	4c 2d       	mov	r20, r12
     a38:	50 e0       	ldi	r21, 0x00	; 0
     a3a:	4d 19       	sub	r20, r13
     a3c:	51 09       	sbc	r21, r1
     a3e:	4f 5f       	subi	r20, 0xFF	; 255
     a40:	5f 4f       	sbci	r21, 0xFF	; 255
     a42:	61 e0       	ldi	r22, 0x01	; 1
     a44:	70 e0       	ldi	r23, 0x00	; 0
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <_ZN6I2Cdev8readBitsEhhhhPhj+0x3e>
     a48:	66 0f       	add	r22, r22
     a4a:	77 1f       	adc	r23, r23
     a4c:	da 94       	dec	r13
     a4e:	e2 f7       	brpl	.-8      	; 0xa48 <_ZN6I2Cdev8readBitsEhhhhPhj+0x3a>
     a50:	61 50       	subi	r22, 0x01	; 1
     a52:	71 09       	sbc	r23, r1
     a54:	04 2e       	mov	r0, r20
     a56:	01 c0       	rjmp	.+2      	; 0xa5a <_ZN6I2Cdev8readBitsEhhhhPhj+0x4c>
     a58:	66 0f       	add	r22, r22
     a5a:	0a 94       	dec	r0
     a5c:	ea f7       	brpl	.-6      	; 0xa58 <_ZN6I2Cdev8readBitsEhhhhPhj+0x4a>
        b &= mask;
     a5e:	29 81       	ldd	r18, Y+1	; 0x01
     a60:	26 23       	and	r18, r22
        b >>= (bitStart - length + 1);
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	02 c0       	rjmp	.+4      	; 0xa6a <_ZN6I2Cdev8readBitsEhhhhPhj+0x5c>
     a66:	35 95       	asr	r19
     a68:	27 95       	ror	r18
     a6a:	4a 95       	dec	r20
     a6c:	e2 f7       	brpl	.-8      	; 0xa66 <_ZN6I2Cdev8readBitsEhhhhPhj+0x58>
     a6e:	f8 01       	movw	r30, r16
     a70:	20 83       	st	Z, r18
        *data = b;
    }
    return count;
}
     a72:	0f 90       	pop	r0
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	ff 90       	pop	r15
     a7e:	ef 90       	pop	r14
     a80:	df 90       	pop	r13
     a82:	cf 90       	pop	r12
     a84:	08 95       	ret

00000a86 <_ZN6I2Cdev8writeBitEhhhh>:
 * @param regAddr Register regAddr to write to
 * @param bitNum Bit position to write (0-7)
 * @param value New bit value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {
     a86:	ef 92       	push	r14
     a88:	ff 92       	push	r15
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	cf 93       	push	r28
     a90:	df 93       	push	r29
     a92:	1f 92       	push	r1
     a94:	cd b7       	in	r28, 0x3d	; 61
     a96:	de b7       	in	r29, 0x3e	; 62
     a98:	18 2f       	mov	r17, r24
     a9a:	06 2f       	mov	r16, r22
     a9c:	f4 2e       	mov	r15, r20
     a9e:	e2 2e       	mov	r14, r18
    uint8_t b;
    readByte(devAddr, regAddr, &b);
     aa0:	20 91 06 02 	lds	r18, 0x0206
     aa4:	30 91 07 02 	lds	r19, 0x0207
     aa8:	ae 01       	movw	r20, r28
     aaa:	4f 5f       	subi	r20, 0xFF	; 255
     aac:	5f 4f       	sbci	r21, 0xFF	; 255
     aae:	a6 df       	rcall	.-180    	; 0x9fc <_ZN6I2Cdev8readByteEhhPhj>
     ab0:	89 81       	ldd	r24, Y+1	; 0x01
    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));
     ab2:	21 e0       	ldi	r18, 0x01	; 1
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	0f 2c       	mov	r0, r15
     ab8:	01 c0       	rjmp	.+2      	; 0xabc <_ZN6I2Cdev8writeBitEhhhh+0x36>
     aba:	22 0f       	add	r18, r18
     abc:	0a 94       	dec	r0
     abe:	ea f7       	brpl	.-6      	; 0xaba <_ZN6I2Cdev8writeBitEhhhh+0x34>
     ac0:	ee 20       	and	r14, r14
     ac2:	19 f0       	breq	.+6      	; 0xaca <_ZN6I2Cdev8writeBitEhhhh+0x44>
     ac4:	48 2f       	mov	r20, r24
     ac6:	42 2b       	or	r20, r18
     ac8:	03 c0       	rjmp	.+6      	; 0xad0 <_ZN6I2Cdev8writeBitEhhhh+0x4a>
     aca:	42 2f       	mov	r20, r18
     acc:	40 95       	com	r20
     ace:	48 23       	and	r20, r24
     ad0:	49 83       	std	Y+1, r20	; 0x01
    return writeByte(devAddr, regAddr, b);
     ad2:	60 2f       	mov	r22, r16
     ad4:	81 2f       	mov	r24, r17
     ad6:	d8 de       	rcall	.-592    	; 0x888 <_ZN6I2Cdev9writeByteEhhh>
}
     ad8:	0f 90       	pop	r0
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	08 95       	ret

00000ae8 <_ZN6I2Cdev9writeBitsEhhhhh>:
 * @param bitStart First bit position to write (0-7)
 * @param length Number of bits to write (not more than 8)
 * @param data Right-aligned value to write
 * @return Status of operation (true = success)
 */
bool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {
     ae8:	df 92       	push	r13
     aea:	ef 92       	push	r14
     aec:	ff 92       	push	r15
     aee:	0f 93       	push	r16
     af0:	1f 93       	push	r17
     af2:	cf 93       	push	r28
     af4:	df 93       	push	r29
     af6:	1f 92       	push	r1
     af8:	cd b7       	in	r28, 0x3d	; 61
     afa:	de b7       	in	r29, 0x3e	; 62
     afc:	f8 2e       	mov	r15, r24
     afe:	e6 2e       	mov	r14, r22
     b00:	d4 2e       	mov	r13, r20
     b02:	12 2f       	mov	r17, r18
    // 00011100 mask byte
    // 10101111 original value (sample)
    // 10100011 original & ~mask
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
     b04:	20 91 06 02 	lds	r18, 0x0206
     b08:	30 91 07 02 	lds	r19, 0x0207
     b0c:	ae 01       	movw	r20, r28
     b0e:	4f 5f       	subi	r20, 0xFF	; 255
     b10:	5f 4f       	sbci	r21, 0xFF	; 255
     b12:	74 df       	rcall	.-280    	; 0x9fc <_ZN6I2Cdev8readByteEhhPhj>
     b14:	88 23       	and	r24, r24
     b16:	11 f1       	breq	.+68     	; 0xb5c <_ZN6I2Cdev9writeBitsEhhhhh+0x74>
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
     b18:	4d 2d       	mov	r20, r13
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	41 1b       	sub	r20, r17
     b1e:	51 09       	sbc	r21, r1
     b20:	4f 5f       	subi	r20, 0xFF	; 255
     b22:	5f 4f       	sbci	r21, 0xFF	; 255
     b24:	e1 e0       	ldi	r30, 0x01	; 1
     b26:	f0 e0       	ldi	r31, 0x00	; 0
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <_ZN6I2Cdev9writeBitsEhhhhh+0x46>
     b2a:	ee 0f       	add	r30, r30
     b2c:	ff 1f       	adc	r31, r31
     b2e:	1a 95       	dec	r17
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <_ZN6I2Cdev9writeBitsEhhhhh+0x42>
     b32:	31 97       	sbiw	r30, 0x01	; 1
     b34:	04 2e       	mov	r0, r20
     b36:	01 c0       	rjmp	.+2      	; 0xb3a <_ZN6I2Cdev9writeBitsEhhhhh+0x52>
     b38:	ee 0f       	add	r30, r30
     b3a:	0a 94       	dec	r0
     b3c:	ea f7       	brpl	.-6      	; 0xb38 <_ZN6I2Cdev9writeBitsEhhhhh+0x50>
        data <<= (bitStart - length + 1); // shift data into correct position
     b3e:	01 c0       	rjmp	.+2      	; 0xb42 <_ZN6I2Cdev9writeBitsEhhhhh+0x5a>
     b40:	00 0f       	add	r16, r16
     b42:	4a 95       	dec	r20
     b44:	ea f7       	brpl	.-6      	; 0xb40 <_ZN6I2Cdev9writeBitsEhhhhh+0x58>
        data &= mask; // zero all non-important bits in data
        b &= ~(mask); // zero all important bits in existing byte
     b46:	4e 2f       	mov	r20, r30
     b48:	40 95       	com	r20
     b4a:	89 81       	ldd	r24, Y+1	; 0x01
     b4c:	48 23       	and	r20, r24
    // 10101011 masked | value
    uint8_t b;
    if (readByte(devAddr, regAddr, &b) != 0) {
        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);
        data <<= (bitStart - length + 1); // shift data into correct position
        data &= mask; // zero all non-important bits in data
     b4e:	e0 23       	and	r30, r16
        b &= ~(mask); // zero all important bits in existing byte
        b |= data; // combine data with existing byte
     b50:	4e 2b       	or	r20, r30
     b52:	49 83       	std	Y+1, r20	; 0x01
        return writeByte(devAddr, regAddr, b);
     b54:	6e 2d       	mov	r22, r14
     b56:	8f 2d       	mov	r24, r15
     b58:	97 de       	rcall	.-722    	; 0x888 <_ZN6I2Cdev9writeByteEhhh>
     b5a:	01 c0       	rjmp	.+2      	; 0xb5e <_ZN6I2Cdev9writeBitsEhhhhh+0x76>
    } else {
        return false;
     b5c:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     b5e:	0f 90       	pop	r0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	1f 91       	pop	r17
     b66:	0f 91       	pop	r16
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	08 95       	ret

00000b70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     b70:	fc 01       	movw	r30, r24
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b72:	03 96       	adiw	r24, 0x03	; 3
     b74:	92 83       	std	Z+2, r25	; 0x02
     b76:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     b78:	2f ef       	ldi	r18, 0xFF	; 255
     b7a:	3f ef       	ldi	r19, 0xFF	; 255
     b7c:	34 83       	std	Z+4, r19	; 0x04
     b7e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b80:	96 83       	std	Z+6, r25	; 0x06
     b82:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b84:	90 87       	std	Z+8, r25	; 0x08
     b86:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     b88:	10 82       	st	Z, r1
     b8a:	08 95       	ret

00000b8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     b8c:	fc 01       	movw	r30, r24
     b8e:	11 86       	std	Z+9, r1	; 0x09
     b90:	10 86       	std	Z+8, r1	; 0x08
     b92:	08 95       	ret

00000b94 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	9c 01       	movw	r18, r24
     b9a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
     b9c:	dc 01       	movw	r26, r24
     b9e:	11 96       	adiw	r26, 0x01	; 1
     ba0:	cd 91       	ld	r28, X+
     ba2:	dc 91       	ld	r29, X
     ba4:	12 97       	sbiw	r26, 0x02	; 2

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     ba6:	d3 83       	std	Z+3, r29	; 0x03
     ba8:	c2 83       	std	Z+2, r28	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     baa:	8c 81       	ldd	r24, Y+4	; 0x04
     bac:	9d 81       	ldd	r25, Y+5	; 0x05
     bae:	95 83       	std	Z+5, r25	; 0x05
     bb0:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxPrevious->pxNext = pxNewListItem;
     bb2:	8c 81       	ldd	r24, Y+4	; 0x04
     bb4:	9d 81       	ldd	r25, Y+5	; 0x05
     bb6:	dc 01       	movw	r26, r24
     bb8:	13 96       	adiw	r26, 0x03	; 3
     bba:	7c 93       	st	X, r23
     bbc:	6e 93       	st	-X, r22
     bbe:	12 97       	sbiw	r26, 0x02	; 2
	pxIndex->pxPrevious = pxNewListItem;
     bc0:	7d 83       	std	Y+5, r23	; 0x05
     bc2:	6c 83       	std	Y+4, r22	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     bc4:	31 87       	std	Z+9, r19	; 0x09
     bc6:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     bc8:	f9 01       	movw	r30, r18
     bca:	80 81       	ld	r24, Z
     bcc:	8f 5f       	subi	r24, 0xFF	; 255
     bce:	80 83       	st	Z, r24
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     bdc:	48 81       	ld	r20, Y
     bde:	59 81       	ldd	r21, Y+1	; 0x01
	are stored in ready lists (all of which have the same xItemValue value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     be0:	4f 3f       	cpi	r20, 0xFF	; 255
     be2:	2f ef       	ldi	r18, 0xFF	; 255
     be4:	52 07       	cpc	r21, r18
     be6:	21 f4       	brne	.+8      	; 0xbf0 <vListInsert+0x1a>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     be8:	fc 01       	movw	r30, r24
     bea:	a7 81       	ldd	r26, Z+7	; 0x07
     bec:	b0 85       	ldd	r27, Z+8	; 0x08
     bee:	0d c0       	rjmp	.+26     	; 0xc0a <vListInsert+0x34>
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips, and ensure
		configASSERT() is defined!  http://www.freertos.org/a00110.html#configASSERT
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     bf0:	dc 01       	movw	r26, r24
     bf2:	13 96       	adiw	r26, 0x03	; 3
     bf4:	12 96       	adiw	r26, 0x02	; 2
     bf6:	ed 91       	ld	r30, X+
     bf8:	fc 91       	ld	r31, X
     bfa:	13 97       	sbiw	r26, 0x03	; 3
     bfc:	20 81       	ld	r18, Z
     bfe:	31 81       	ldd	r19, Z+1	; 0x01
     c00:	42 17       	cp	r20, r18
     c02:	53 07       	cpc	r21, r19
     c04:	10 f0       	brcs	.+4      	; 0xc0a <vListInsert+0x34>
     c06:	df 01       	movw	r26, r30
     c08:	f5 cf       	rjmp	.-22     	; 0xbf4 <vListInsert+0x1e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     c0a:	12 96       	adiw	r26, 0x02	; 2
     c0c:	ed 91       	ld	r30, X+
     c0e:	fc 91       	ld	r31, X
     c10:	13 97       	sbiw	r26, 0x03	; 3
     c12:	fb 83       	std	Y+3, r31	; 0x03
     c14:	ea 83       	std	Y+2, r30	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     c16:	d5 83       	std	Z+5, r29	; 0x05
     c18:	c4 83       	std	Z+4, r28	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     c1a:	bd 83       	std	Y+5, r27	; 0x05
     c1c:	ac 83       	std	Y+4, r26	; 0x04
	pxIterator->pxNext = pxNewListItem;
     c1e:	13 96       	adiw	r26, 0x03	; 3
     c20:	dc 93       	st	X, r29
     c22:	ce 93       	st	-X, r28
     c24:	12 97       	sbiw	r26, 0x02	; 2

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     c26:	99 87       	std	Y+9, r25	; 0x09
     c28:	88 87       	std	Y+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
     c2a:	fc 01       	movw	r30, r24
     c2c:	20 81       	ld	r18, Z
     c2e:	2f 5f       	subi	r18, 0xFF	; 255
     c30:	20 83       	st	Z, r18
}
     c32:	df 91       	pop	r29
     c34:	cf 91       	pop	r28
     c36:	08 95       	ret

00000c38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     c38:	cf 93       	push	r28
     c3a:	df 93       	push	r29
     c3c:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     c3e:	a0 85       	ldd	r26, Z+8	; 0x08
     c40:	b1 85       	ldd	r27, Z+9	; 0x09

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     c42:	c2 81       	ldd	r28, Z+2	; 0x02
     c44:	d3 81       	ldd	r29, Z+3	; 0x03
     c46:	84 81       	ldd	r24, Z+4	; 0x04
     c48:	95 81       	ldd	r25, Z+5	; 0x05
     c4a:	9d 83       	std	Y+5, r25	; 0x05
     c4c:	8c 83       	std	Y+4, r24	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     c4e:	c4 81       	ldd	r28, Z+4	; 0x04
     c50:	d5 81       	ldd	r29, Z+5	; 0x05
     c52:	82 81       	ldd	r24, Z+2	; 0x02
     c54:	93 81       	ldd	r25, Z+3	; 0x03
     c56:	9b 83       	std	Y+3, r25	; 0x03
     c58:	8a 83       	std	Y+2, r24	; 0x02

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     c5a:	11 96       	adiw	r26, 0x01	; 1
     c5c:	cd 91       	ld	r28, X+
     c5e:	dc 91       	ld	r29, X
     c60:	12 97       	sbiw	r26, 0x02	; 2
     c62:	ce 17       	cp	r28, r30
     c64:	df 07       	cpc	r29, r31
     c66:	31 f4       	brne	.+12     	; 0xc74 <uxListRemove+0x3c>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	9d 81       	ldd	r25, Y+5	; 0x05
     c6c:	12 96       	adiw	r26, 0x02	; 2
     c6e:	9c 93       	st	X, r25
     c70:	8e 93       	st	-X, r24
     c72:	11 97       	sbiw	r26, 0x01	; 1
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     c74:	11 86       	std	Z+9, r1	; 0x09
     c76:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     c78:	8c 91       	ld	r24, X
     c7a:	81 50       	subi	r24, 0x01	; 1
     c7c:	8c 93       	st	X, r24

	return pxList->uxNumberOfItems;
}
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <_ZN7MPU6050C1Ev>:
/** Write byte to FIFO buffer.
 * @see getFIFOByte()
 * @see MPU6050_RA_FIFO_R_W
 */
void MPU6050::setFIFOByte(uint8_t data) {
    I2Cdev::writeByte(devAddr, MPU6050_RA_FIFO_R_W, data);
     c84:	28 e6       	ldi	r18, 0x68	; 104
     c86:	fc 01       	movw	r30, r24
     c88:	20 83       	st	Z, r18
     c8a:	08 95       	ret

00000c8c <_ZN7MPU605021setFullScaleGyroRangeEh>:
     c8c:	0f 93       	push	r16
     c8e:	06 2f       	mov	r16, r22
     c90:	22 e0       	ldi	r18, 0x02	; 2
     c92:	44 e0       	ldi	r20, 0x04	; 4
     c94:	6b e1       	ldi	r22, 0x1B	; 27
     c96:	fc 01       	movw	r30, r24
     c98:	80 81       	ld	r24, Z
     c9a:	26 df       	rcall	.-436    	; 0xae8 <_ZN6I2Cdev9writeBitsEhhhhh>
     c9c:	0f 91       	pop	r16
     c9e:	08 95       	ret

00000ca0 <_ZN7MPU605022setFullScaleAccelRangeEh>:
     ca0:	0f 93       	push	r16
     ca2:	06 2f       	mov	r16, r22
     ca4:	22 e0       	ldi	r18, 0x02	; 2
     ca6:	44 e0       	ldi	r20, 0x04	; 4
     ca8:	6c e1       	ldi	r22, 0x1C	; 28
     caa:	fc 01       	movw	r30, r24
     cac:	80 81       	ld	r24, Z
     cae:	1c df       	rcall	.-456    	; 0xae8 <_ZN6I2Cdev9writeBitsEhhhhh>
     cb0:	0f 91       	pop	r16
     cb2:	08 95       	ret

00000cb4 <_ZN7MPU605019setI2CBypassEnabledEb>:
     cb4:	26 2f       	mov	r18, r22
     cb6:	41 e0       	ldi	r20, 0x01	; 1
     cb8:	67 e3       	ldi	r22, 0x37	; 55
     cba:	fc 01       	movw	r30, r24
     cbc:	80 81       	ld	r24, Z
     cbe:	e3 ce       	rjmp	.-570    	; 0xa86 <_ZN6I2Cdev8writeBitEhhhh>

00000cc0 <_ZN7MPU605010getMotion6EPiS0_S0_S0_S0_S0_>:
     cc0:	4f 92       	push	r4
     cc2:	5f 92       	push	r5
     cc4:	6f 92       	push	r6
     cc6:	7f 92       	push	r7
     cc8:	8f 92       	push	r8
     cca:	9f 92       	push	r9
     ccc:	af 92       	push	r10
     cce:	bf 92       	push	r11
     cd0:	cf 92       	push	r12
     cd2:	df 92       	push	r13
     cd4:	ef 92       	push	r14
     cd6:	ff 92       	push	r15
     cd8:	0f 93       	push	r16
     cda:	1f 93       	push	r17
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	ec 01       	movw	r28, r24
     ce2:	5b 01       	movw	r10, r22
     ce4:	3a 01       	movw	r6, r20
     ce6:	49 01       	movw	r8, r18
     ce8:	28 01       	movw	r4, r16
     cea:	00 91 06 02 	lds	r16, 0x0206
     cee:	10 91 07 02 	lds	r17, 0x0207
     cf2:	9c 01       	movw	r18, r24
     cf4:	2f 5f       	subi	r18, 0xFF	; 255
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	4e e0       	ldi	r20, 0x0E	; 14
     cfa:	6b e3       	ldi	r22, 0x3B	; 59
     cfc:	88 81       	ld	r24, Y
     cfe:	d3 dd       	rcall	.-1114   	; 0x8a6 <_ZN6I2Cdev9readBytesEhhhPhj>
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	98 2f       	mov	r25, r24
     d06:	88 27       	eor	r24, r24
     d08:	2a 81       	ldd	r18, Y+2	; 0x02
     d0a:	82 2b       	or	r24, r18
     d0c:	f5 01       	movw	r30, r10
     d0e:	91 83       	std	Z+1, r25	; 0x01
     d10:	80 83       	st	Z, r24
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	98 2f       	mov	r25, r24
     d18:	88 27       	eor	r24, r24
     d1a:	2c 81       	ldd	r18, Y+4	; 0x04
     d1c:	82 2b       	or	r24, r18
     d1e:	f3 01       	movw	r30, r6
     d20:	91 83       	std	Z+1, r25	; 0x01
     d22:	80 83       	st	Z, r24
     d24:	8d 81       	ldd	r24, Y+5	; 0x05
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	98 2f       	mov	r25, r24
     d2a:	88 27       	eor	r24, r24
     d2c:	2e 81       	ldd	r18, Y+6	; 0x06
     d2e:	82 2b       	or	r24, r18
     d30:	f4 01       	movw	r30, r8
     d32:	91 83       	std	Z+1, r25	; 0x01
     d34:	80 83       	st	Z, r24
     d36:	89 85       	ldd	r24, Y+9	; 0x09
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	98 2f       	mov	r25, r24
     d3c:	88 27       	eor	r24, r24
     d3e:	2a 85       	ldd	r18, Y+10	; 0x0a
     d40:	82 2b       	or	r24, r18
     d42:	f2 01       	movw	r30, r4
     d44:	91 83       	std	Z+1, r25	; 0x01
     d46:	80 83       	st	Z, r24
     d48:	8b 85       	ldd	r24, Y+11	; 0x0b
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	98 2f       	mov	r25, r24
     d4e:	88 27       	eor	r24, r24
     d50:	2c 85       	ldd	r18, Y+12	; 0x0c
     d52:	82 2b       	or	r24, r18
     d54:	f7 01       	movw	r30, r14
     d56:	91 83       	std	Z+1, r25	; 0x01
     d58:	80 83       	st	Z, r24
     d5a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	98 2f       	mov	r25, r24
     d60:	88 27       	eor	r24, r24
     d62:	2e 85       	ldd	r18, Y+14	; 0x0e
     d64:	82 2b       	or	r24, r18
     d66:	f6 01       	movw	r30, r12
     d68:	91 83       	std	Z+1, r25	; 0x01
     d6a:	80 83       	st	Z, r24
     d6c:	df 91       	pop	r29
     d6e:	cf 91       	pop	r28
     d70:	1f 91       	pop	r17
     d72:	0f 91       	pop	r16
     d74:	ff 90       	pop	r15
     d76:	ef 90       	pop	r14
     d78:	df 90       	pop	r13
     d7a:	cf 90       	pop	r12
     d7c:	bf 90       	pop	r11
     d7e:	af 90       	pop	r10
     d80:	9f 90       	pop	r9
     d82:	8f 90       	pop	r8
     d84:	7f 90       	pop	r7
     d86:	6f 90       	pop	r6
     d88:	5f 90       	pop	r5
     d8a:	4f 90       	pop	r4
     d8c:	08 95       	ret

00000d8e <_ZN7MPU605015setSleepEnabledEb>:
     d8e:	26 2f       	mov	r18, r22
     d90:	46 e0       	ldi	r20, 0x06	; 6
     d92:	6b e6       	ldi	r22, 0x6B	; 107
     d94:	fc 01       	movw	r30, r24
     d96:	80 81       	ld	r24, Z
     d98:	76 ce       	rjmp	.-788    	; 0xa86 <_ZN6I2Cdev8writeBitEhhhh>

00000d9a <_ZN7MPU605014setClockSourceEh>:
     d9a:	0f 93       	push	r16
     d9c:	06 2f       	mov	r16, r22
     d9e:	23 e0       	ldi	r18, 0x03	; 3
     da0:	42 e0       	ldi	r20, 0x02	; 2
     da2:	6b e6       	ldi	r22, 0x6B	; 107
     da4:	fc 01       	movw	r30, r24
     da6:	80 81       	ld	r24, Z
     da8:	9f de       	rcall	.-706    	; 0xae8 <_ZN6I2Cdev9writeBitsEhhhhh>
     daa:	0f 91       	pop	r16
     dac:	08 95       	ret

00000dae <_ZN7MPU605010initializeEv>:
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	ec 01       	movw	r28, r24
     db4:	61 e0       	ldi	r22, 0x01	; 1
     db6:	f1 df       	rcall	.-30     	; 0xd9a <_ZN7MPU605014setClockSourceEh>
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	ce 01       	movw	r24, r28
     dbc:	67 df       	rcall	.-306    	; 0xc8c <_ZN7MPU605021setFullScaleGyroRangeEh>
     dbe:	60 e0       	ldi	r22, 0x00	; 0
     dc0:	ce 01       	movw	r24, r28
     dc2:	6e df       	rcall	.-292    	; 0xca0 <_ZN7MPU605022setFullScaleAccelRangeEh>
     dc4:	60 e0       	ldi	r22, 0x00	; 0
     dc6:	ce 01       	movw	r24, r28
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	e0 cf       	rjmp	.-64     	; 0xd8e <_ZN7MPU605015setSleepEnabledEb>

00000dce <_ZN7MPU605011getDeviceIDEv>:
 * @return Device ID (6 bits only! should be 0x34)
 * @see MPU6050_RA_WHO_AM_I
 * @see MPU6050_WHO_AM_I_BIT
 * @see MPU6050_WHO_AM_I_LENGTH
 */
uint8_t MPU6050::getDeviceID() {
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	cf 93       	push	r28
     dd8:	df 93       	push	r29
     dda:	ec 01       	movw	r28, r24
    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);
     ddc:	e0 90 06 02 	lds	r14, 0x0206
     de0:	f0 90 07 02 	lds	r15, 0x0207
     de4:	8c 01       	movw	r16, r24
     de6:	0f 5f       	subi	r16, 0xFF	; 255
     de8:	1f 4f       	sbci	r17, 0xFF	; 255
     dea:	26 e0       	ldi	r18, 0x06	; 6
     dec:	46 e0       	ldi	r20, 0x06	; 6
     dee:	65 e7       	ldi	r22, 0x75	; 117
     df0:	88 81       	ld	r24, Y
     df2:	0d de       	rcall	.-998    	; 0xa0e <_ZN6I2Cdev8readBitsEhhhhPhj>
    return buffer[0];
}
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	1f 91       	pop	r17
     dfc:	0f 91       	pop	r16
     dfe:	ff 90       	pop	r15
     e00:	ef 90       	pop	r14
     e02:	08 95       	ret

00000e04 <_ZN7MPU605014testConnectionEv>:
/** Verify the I2C connection.
 * Make sure the device is connected and responds as expected.
 * @return True if connection is valid, false otherwise
 */
bool MPU6050::testConnection() {
    return getDeviceID() == 0x34;
     e04:	e4 df       	rcall	.-56     	; 0xdce <_ZN7MPU605011getDeviceIDEv>
     e06:	91 e0       	ldi	r25, 0x01	; 1
     e08:	84 33       	cpi	r24, 0x34	; 52
     e0a:	09 f0       	breq	.+2      	; 0xe0e <_ZN7MPU605014testConnectionEv+0xa>
     e0c:	90 e0       	ldi	r25, 0x00	; 0
}
     e0e:	89 2f       	mov	r24, r25
     e10:	08 95       	ret

00000e12 <pxPortInitialiseStack>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     e12:	31 e1       	ldi	r19, 0x11	; 17
     e14:	fc 01       	movw	r30, r24
     e16:	30 83       	st	Z, r19
     e18:	31 97       	sbiw	r30, 0x01	; 1
     e1a:	22 e2       	ldi	r18, 0x22	; 34
     e1c:	20 83       	st	Z, r18
     e1e:	31 97       	sbiw	r30, 0x01	; 1
     e20:	a3 e3       	ldi	r26, 0x33	; 51
     e22:	a0 83       	st	Z, r26
     e24:	31 97       	sbiw	r30, 0x01	; 1
     e26:	60 83       	st	Z, r22
     e28:	31 97       	sbiw	r30, 0x01	; 1
     e2a:	70 83       	st	Z, r23
     e2c:	31 97       	sbiw	r30, 0x01	; 1
     e2e:	10 82       	st	Z, r1
     e30:	31 97       	sbiw	r30, 0x01	; 1
     e32:	10 82       	st	Z, r1
     e34:	31 97       	sbiw	r30, 0x01	; 1
     e36:	60 e8       	ldi	r22, 0x80	; 128
     e38:	60 83       	st	Z, r22
     e3a:	31 97       	sbiw	r30, 0x01	; 1
     e3c:	10 82       	st	Z, r1
     e3e:	31 97       	sbiw	r30, 0x01	; 1
     e40:	10 82       	st	Z, r1
     e42:	31 97       	sbiw	r30, 0x01	; 1
     e44:	10 82       	st	Z, r1
     e46:	31 97       	sbiw	r30, 0x01	; 1
     e48:	62 e0       	ldi	r22, 0x02	; 2
     e4a:	60 83       	st	Z, r22
     e4c:	31 97       	sbiw	r30, 0x01	; 1
     e4e:	63 e0       	ldi	r22, 0x03	; 3
     e50:	60 83       	st	Z, r22
     e52:	31 97       	sbiw	r30, 0x01	; 1
     e54:	64 e0       	ldi	r22, 0x04	; 4
     e56:	60 83       	st	Z, r22
     e58:	31 97       	sbiw	r30, 0x01	; 1
     e5a:	65 e0       	ldi	r22, 0x05	; 5
     e5c:	60 83       	st	Z, r22
     e5e:	31 97       	sbiw	r30, 0x01	; 1
     e60:	66 e0       	ldi	r22, 0x06	; 6
     e62:	60 83       	st	Z, r22
     e64:	31 97       	sbiw	r30, 0x01	; 1
     e66:	67 e0       	ldi	r22, 0x07	; 7
     e68:	60 83       	st	Z, r22
     e6a:	31 97       	sbiw	r30, 0x01	; 1
     e6c:	68 e0       	ldi	r22, 0x08	; 8
     e6e:	60 83       	st	Z, r22
     e70:	31 97       	sbiw	r30, 0x01	; 1
     e72:	69 e0       	ldi	r22, 0x09	; 9
     e74:	60 83       	st	Z, r22
     e76:	31 97       	sbiw	r30, 0x01	; 1
     e78:	60 e1       	ldi	r22, 0x10	; 16
     e7a:	60 83       	st	Z, r22
     e7c:	31 97       	sbiw	r30, 0x01	; 1
     e7e:	30 83       	st	Z, r19
     e80:	31 97       	sbiw	r30, 0x01	; 1
     e82:	32 e1       	ldi	r19, 0x12	; 18
     e84:	30 83       	st	Z, r19
     e86:	31 97       	sbiw	r30, 0x01	; 1
     e88:	33 e1       	ldi	r19, 0x13	; 19
     e8a:	30 83       	st	Z, r19
     e8c:	31 97       	sbiw	r30, 0x01	; 1
     e8e:	34 e1       	ldi	r19, 0x14	; 20
     e90:	30 83       	st	Z, r19
     e92:	31 97       	sbiw	r30, 0x01	; 1
     e94:	35 e1       	ldi	r19, 0x15	; 21
     e96:	30 83       	st	Z, r19
     e98:	31 97       	sbiw	r30, 0x01	; 1
     e9a:	36 e1       	ldi	r19, 0x16	; 22
     e9c:	30 83       	st	Z, r19
     e9e:	31 97       	sbiw	r30, 0x01	; 1
     ea0:	37 e1       	ldi	r19, 0x17	; 23
     ea2:	30 83       	st	Z, r19
     ea4:	31 97       	sbiw	r30, 0x01	; 1
     ea6:	38 e1       	ldi	r19, 0x18	; 24
     ea8:	30 83       	st	Z, r19
     eaa:	31 97       	sbiw	r30, 0x01	; 1
     eac:	39 e1       	ldi	r19, 0x19	; 25
     eae:	30 83       	st	Z, r19
     eb0:	31 97       	sbiw	r30, 0x01	; 1
     eb2:	30 e2       	ldi	r19, 0x20	; 32
     eb4:	30 83       	st	Z, r19
     eb6:	31 97       	sbiw	r30, 0x01	; 1
     eb8:	31 e2       	ldi	r19, 0x21	; 33
     eba:	30 83       	st	Z, r19
     ebc:	31 97       	sbiw	r30, 0x01	; 1
     ebe:	20 83       	st	Z, r18
     ec0:	31 97       	sbiw	r30, 0x01	; 1
     ec2:	23 e2       	ldi	r18, 0x23	; 35
     ec4:	20 83       	st	Z, r18
     ec6:	31 97       	sbiw	r30, 0x01	; 1
     ec8:	40 83       	st	Z, r20
     eca:	31 97       	sbiw	r30, 0x01	; 1
     ecc:	50 83       	st	Z, r21
     ece:	31 97       	sbiw	r30, 0x01	; 1
     ed0:	26 e2       	ldi	r18, 0x26	; 38
     ed2:	20 83       	st	Z, r18
     ed4:	31 97       	sbiw	r30, 0x01	; 1
     ed6:	27 e2       	ldi	r18, 0x27	; 39
     ed8:	20 83       	st	Z, r18
     eda:	31 97       	sbiw	r30, 0x01	; 1
     edc:	28 e2       	ldi	r18, 0x28	; 40
     ede:	20 83       	st	Z, r18
     ee0:	31 97       	sbiw	r30, 0x01	; 1
     ee2:	29 e2       	ldi	r18, 0x29	; 41
     ee4:	20 83       	st	Z, r18
     ee6:	31 97       	sbiw	r30, 0x01	; 1
     ee8:	20 e3       	ldi	r18, 0x30	; 48
     eea:	20 83       	st	Z, r18
     eec:	31 97       	sbiw	r30, 0x01	; 1
     eee:	21 e3       	ldi	r18, 0x31	; 49
     ef0:	20 83       	st	Z, r18
     ef2:	89 97       	sbiw	r24, 0x29	; 41
     ef4:	08 95       	ret

00000ef6 <xPortStartScheduler>:
     ef6:	82 e0       	ldi	r24, 0x02	; 2
     ef8:	80 93 b0 00 	sts	0x00B0, r24
     efc:	10 92 b2 00 	sts	0x00B2, r1
     f00:	90 e3       	ldi	r25, 0x30	; 48
     f02:	90 93 b3 00 	sts	0x00B3, r25
     f06:	80 93 70 00 	sts	0x0070, r24
     f0a:	83 e0       	ldi	r24, 0x03	; 3
     f0c:	80 93 b1 00 	sts	0x00B1, r24
     f10:	a0 91 84 09 	lds	r26, 0x0984
     f14:	b0 91 85 09 	lds	r27, 0x0985
     f18:	cd 91       	ld	r28, X+
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	dd 91       	ld	r29, X+
     f1e:	de bf       	out	0x3e, r29	; 62
     f20:	ff 91       	pop	r31
     f22:	ef 91       	pop	r30
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	bf 91       	pop	r27
     f2a:	af 91       	pop	r26
     f2c:	9f 91       	pop	r25
     f2e:	8f 91       	pop	r24
     f30:	7f 91       	pop	r23
     f32:	6f 91       	pop	r22
     f34:	5f 91       	pop	r21
     f36:	4f 91       	pop	r20
     f38:	3f 91       	pop	r19
     f3a:	2f 91       	pop	r18
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	cf 90       	pop	r12
     f48:	bf 90       	pop	r11
     f4a:	af 90       	pop	r10
     f4c:	9f 90       	pop	r9
     f4e:	8f 90       	pop	r8
     f50:	7f 90       	pop	r7
     f52:	6f 90       	pop	r6
     f54:	5f 90       	pop	r5
     f56:	4f 90       	pop	r4
     f58:	3f 90       	pop	r3
     f5a:	2f 90       	pop	r2
     f5c:	1f 90       	pop	r1
     f5e:	0f 90       	pop	r0
     f60:	0c be       	out	0x3c, r0	; 60
     f62:	0f 90       	pop	r0
     f64:	0b be       	out	0x3b, r0	; 59
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	08 95       	ret
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	08 95       	ret

00000f72 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	0f 92       	push	r0
     f7a:	0b b6       	in	r0, 0x3b	; 59
     f7c:	0f 92       	push	r0
     f7e:	0c b6       	in	r0, 0x3c	; 60
     f80:	0f 92       	push	r0
     f82:	1f 92       	push	r1
     f84:	11 24       	eor	r1, r1
     f86:	2f 92       	push	r2
     f88:	3f 92       	push	r3
     f8a:	4f 92       	push	r4
     f8c:	5f 92       	push	r5
     f8e:	6f 92       	push	r6
     f90:	7f 92       	push	r7
     f92:	8f 92       	push	r8
     f94:	9f 92       	push	r9
     f96:	af 92       	push	r10
     f98:	bf 92       	push	r11
     f9a:	cf 92       	push	r12
     f9c:	df 92       	push	r13
     f9e:	ef 92       	push	r14
     fa0:	ff 92       	push	r15
     fa2:	0f 93       	push	r16
     fa4:	1f 93       	push	r17
     fa6:	2f 93       	push	r18
     fa8:	3f 93       	push	r19
     faa:	4f 93       	push	r20
     fac:	5f 93       	push	r21
     fae:	6f 93       	push	r22
     fb0:	7f 93       	push	r23
     fb2:	8f 93       	push	r24
     fb4:	9f 93       	push	r25
     fb6:	af 93       	push	r26
     fb8:	bf 93       	push	r27
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	ef 93       	push	r30
     fc0:	ff 93       	push	r31
     fc2:	a0 91 84 09 	lds	r26, 0x0984
     fc6:	b0 91 85 09 	lds	r27, 0x0985
     fca:	0d b6       	in	r0, 0x3d	; 61
     fcc:	0d 92       	st	X+, r0
     fce:	0e b6       	in	r0, 0x3e	; 62
     fd0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     fd2:	9a d3       	rcall	.+1844   	; 0x1708 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     fd4:	a0 91 84 09 	lds	r26, 0x0984
     fd8:	b0 91 85 09 	lds	r27, 0x0985
     fdc:	cd 91       	ld	r28, X+
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	dd 91       	ld	r29, X+
     fe2:	de bf       	out	0x3e, r29	; 62
     fe4:	ff 91       	pop	r31
     fe6:	ef 91       	pop	r30
     fe8:	df 91       	pop	r29
     fea:	cf 91       	pop	r28
     fec:	bf 91       	pop	r27
     fee:	af 91       	pop	r26
     ff0:	9f 91       	pop	r25
     ff2:	8f 91       	pop	r24
     ff4:	7f 91       	pop	r23
     ff6:	6f 91       	pop	r22
     ff8:	5f 91       	pop	r21
     ffa:	4f 91       	pop	r20
     ffc:	3f 91       	pop	r19
     ffe:	2f 91       	pop	r18
    1000:	1f 91       	pop	r17
    1002:	0f 91       	pop	r16
    1004:	ff 90       	pop	r15
    1006:	ef 90       	pop	r14
    1008:	df 90       	pop	r13
    100a:	cf 90       	pop	r12
    100c:	bf 90       	pop	r11
    100e:	af 90       	pop	r10
    1010:	9f 90       	pop	r9
    1012:	8f 90       	pop	r8
    1014:	7f 90       	pop	r7
    1016:	6f 90       	pop	r6
    1018:	5f 90       	pop	r5
    101a:	4f 90       	pop	r4
    101c:	3f 90       	pop	r3
    101e:	2f 90       	pop	r2
    1020:	1f 90       	pop	r1
    1022:	0f 90       	pop	r0
    1024:	0c be       	out	0x3c, r0	; 60
    1026:	0f 90       	pop	r0
    1028:	0b be       	out	0x3b, r0	; 59
    102a:	0f 90       	pop	r0
    102c:	0f be       	out	0x3f, r0	; 63
    102e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1030:	08 95       	ret

00001032 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1032:	0f 92       	push	r0
    1034:	0f b6       	in	r0, 0x3f	; 63
    1036:	f8 94       	cli
    1038:	0f 92       	push	r0
    103a:	0b b6       	in	r0, 0x3b	; 59
    103c:	0f 92       	push	r0
    103e:	0c b6       	in	r0, 0x3c	; 60
    1040:	0f 92       	push	r0
    1042:	1f 92       	push	r1
    1044:	11 24       	eor	r1, r1
    1046:	2f 92       	push	r2
    1048:	3f 92       	push	r3
    104a:	4f 92       	push	r4
    104c:	5f 92       	push	r5
    104e:	6f 92       	push	r6
    1050:	7f 92       	push	r7
    1052:	8f 92       	push	r8
    1054:	9f 92       	push	r9
    1056:	af 92       	push	r10
    1058:	bf 92       	push	r11
    105a:	cf 92       	push	r12
    105c:	df 92       	push	r13
    105e:	ef 92       	push	r14
    1060:	ff 92       	push	r15
    1062:	0f 93       	push	r16
    1064:	1f 93       	push	r17
    1066:	2f 93       	push	r18
    1068:	3f 93       	push	r19
    106a:	4f 93       	push	r20
    106c:	5f 93       	push	r21
    106e:	6f 93       	push	r22
    1070:	7f 93       	push	r23
    1072:	8f 93       	push	r24
    1074:	9f 93       	push	r25
    1076:	af 93       	push	r26
    1078:	bf 93       	push	r27
    107a:	cf 93       	push	r28
    107c:	df 93       	push	r29
    107e:	ef 93       	push	r30
    1080:	ff 93       	push	r31
    1082:	a0 91 84 09 	lds	r26, 0x0984
    1086:	b0 91 85 09 	lds	r27, 0x0985
    108a:	0d b6       	in	r0, 0x3d	; 61
    108c:	0d 92       	st	X+, r0
    108e:	0e b6       	in	r0, 0x3e	; 62
    1090:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1092:	b0 d1       	rcall	.+864    	; 0x13f4 <xTaskIncrementTick>
    1094:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
    1096:	38 d3       	rcall	.+1648   	; 0x1708 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1098:	a0 91 84 09 	lds	r26, 0x0984
    109c:	b0 91 85 09 	lds	r27, 0x0985
    10a0:	cd 91       	ld	r28, X+
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	dd 91       	ld	r29, X+
    10a6:	de bf       	out	0x3e, r29	; 62
    10a8:	ff 91       	pop	r31
    10aa:	ef 91       	pop	r30
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	bf 91       	pop	r27
    10b2:	af 91       	pop	r26
    10b4:	9f 91       	pop	r25
    10b6:	8f 91       	pop	r24
    10b8:	7f 91       	pop	r23
    10ba:	6f 91       	pop	r22
    10bc:	5f 91       	pop	r21
    10be:	4f 91       	pop	r20
    10c0:	3f 91       	pop	r19
    10c2:	2f 91       	pop	r18
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	ff 90       	pop	r15
    10ca:	ef 90       	pop	r14
    10cc:	df 90       	pop	r13
    10ce:	cf 90       	pop	r12
    10d0:	bf 90       	pop	r11
    10d2:	af 90       	pop	r10
    10d4:	9f 90       	pop	r9
    10d6:	8f 90       	pop	r8
    10d8:	7f 90       	pop	r7
    10da:	6f 90       	pop	r6
    10dc:	5f 90       	pop	r5
    10de:	4f 90       	pop	r4
    10e0:	3f 90       	pop	r3
    10e2:	2f 90       	pop	r2
    10e4:	1f 90       	pop	r1
    10e6:	0f 90       	pop	r0
    10e8:	0c be       	out	0x3c, r0	; 60
    10ea:	0f 90       	pop	r0
    10ec:	0b be       	out	0x3b, r0	; 59
    10ee:	0f 90       	pop	r0
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	0f 90       	pop	r0

	asm volatile ( "ret" );
    10f4:	08 95       	ret

000010f6 <__vector_13>:
	 * count is incrmented after the context is saved.
	 */
	 ISR(TIMER2_COMPA_vect, ISR_NAKED)
	 {
		 
	 		vPortYieldFromTick();
    10f6:	9d df       	rcall	.-198    	; 0x1032 <vPortYieldFromTick>
	 		asm volatile ( "reti" );
    10f8:	18 95       	reti

000010fa <prvResetNextTaskUnblockTime>:
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    10fa:	e0 91 4c 09 	lds	r30, 0x094C
    10fe:	f0 91 4d 09 	lds	r31, 0x094D
    1102:	80 81       	ld	r24, Z
    1104:	81 11       	cpse	r24, r1
    1106:	07 c0       	rjmp	.+14     	; 0x1116 <prvResetNextTaskUnblockTime+0x1c>
    1108:	8f ef       	ldi	r24, 0xFF	; 255
    110a:	9f ef       	ldi	r25, 0xFF	; 255
    110c:	90 93 09 02 	sts	0x0209, r25
    1110:	80 93 08 02 	sts	0x0208, r24
    1114:	08 95       	ret
    1116:	e0 91 4c 09 	lds	r30, 0x094C
    111a:	f0 91 4d 09 	lds	r31, 0x094D
    111e:	05 80       	ldd	r0, Z+5	; 0x05
    1120:	f6 81       	ldd	r31, Z+6	; 0x06
    1122:	e0 2d       	mov	r30, r0
    1124:	06 80       	ldd	r0, Z+6	; 0x06
    1126:	f7 81       	ldd	r31, Z+7	; 0x07
    1128:	e0 2d       	mov	r30, r0
    112a:	82 81       	ldd	r24, Z+2	; 0x02
    112c:	93 81       	ldd	r25, Z+3	; 0x03
    112e:	90 93 09 02 	sts	0x0209, r25
    1132:	80 93 08 02 	sts	0x0208, r24
    1136:	08 95       	ret

00001138 <prvAddCurrentTaskToDelayedList>:
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	ec 01       	movw	r28, r24
    113e:	e0 91 84 09 	lds	r30, 0x0984
    1142:	f0 91 85 09 	lds	r31, 0x0985
    1146:	93 83       	std	Z+3, r25	; 0x03
    1148:	82 83       	std	Z+2, r24	; 0x02
    114a:	80 91 34 09 	lds	r24, 0x0934
    114e:	90 91 35 09 	lds	r25, 0x0935
    1152:	c8 17       	cp	r28, r24
    1154:	d9 07       	cpc	r29, r25
    1156:	60 f4       	brcc	.+24     	; 0x1170 <prvAddCurrentTaskToDelayedList+0x38>
    1158:	60 91 84 09 	lds	r22, 0x0984
    115c:	70 91 85 09 	lds	r23, 0x0985
    1160:	80 91 4a 09 	lds	r24, 0x094A
    1164:	90 91 4b 09 	lds	r25, 0x094B
    1168:	6e 5f       	subi	r22, 0xFE	; 254
    116a:	7f 4f       	sbci	r23, 0xFF	; 255
    116c:	34 dd       	rcall	.-1432   	; 0xbd6 <vListInsert>
    116e:	16 c0       	rjmp	.+44     	; 0x119c <prvAddCurrentTaskToDelayedList+0x64>
    1170:	60 91 84 09 	lds	r22, 0x0984
    1174:	70 91 85 09 	lds	r23, 0x0985
    1178:	80 91 4c 09 	lds	r24, 0x094C
    117c:	90 91 4d 09 	lds	r25, 0x094D
    1180:	6e 5f       	subi	r22, 0xFE	; 254
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	28 dd       	rcall	.-1456   	; 0xbd6 <vListInsert>
    1186:	80 91 08 02 	lds	r24, 0x0208
    118a:	90 91 09 02 	lds	r25, 0x0209
    118e:	c8 17       	cp	r28, r24
    1190:	d9 07       	cpc	r29, r25
    1192:	20 f4       	brcc	.+8      	; 0x119c <prvAddCurrentTaskToDelayedList+0x64>
    1194:	d0 93 09 02 	sts	0x0209, r29
    1198:	c0 93 08 02 	sts	0x0208, r28
    119c:	df 91       	pop	r29
    119e:	cf 91       	pop	r28
    11a0:	08 95       	ret

000011a2 <xTaskGenericCreate>:
    11a2:	4f 92       	push	r4
    11a4:	5f 92       	push	r5
    11a6:	6f 92       	push	r6
    11a8:	7f 92       	push	r7
    11aa:	8f 92       	push	r8
    11ac:	9f 92       	push	r9
    11ae:	af 92       	push	r10
    11b0:	bf 92       	push	r11
    11b2:	cf 92       	push	r12
    11b4:	df 92       	push	r13
    11b6:	ef 92       	push	r14
    11b8:	ff 92       	push	r15
    11ba:	0f 93       	push	r16
    11bc:	1f 93       	push	r17
    11be:	cf 93       	push	r28
    11c0:	df 93       	push	r29
    11c2:	4c 01       	movw	r8, r24
    11c4:	5b 01       	movw	r10, r22
    11c6:	2a 01       	movw	r4, r20
    11c8:	39 01       	movw	r6, r18
    11ca:	81 e2       	ldi	r24, 0x21	; 33
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	a6 da       	rcall	.-2740   	; 0x71c <pvPortMalloc>
    11d0:	ec 01       	movw	r28, r24
    11d2:	00 97       	sbiw	r24, 0x00	; 0
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <xTaskGenericCreate+0x36>
    11d6:	cd c0       	rjmp	.+410    	; 0x1372 <xTaskGenericCreate+0x1d0>
    11d8:	c1 14       	cp	r12, r1
    11da:	d1 04       	cpc	r13, r1
    11dc:	09 f0       	breq	.+2      	; 0x11e0 <xTaskGenericCreate+0x3e>
    11de:	b2 c0       	rjmp	.+356    	; 0x1344 <xTaskGenericCreate+0x1a2>
    11e0:	c2 01       	movw	r24, r4
    11e2:	9c da       	rcall	.-2760   	; 0x71c <pvPortMalloc>
    11e4:	98 8f       	std	Y+24, r25	; 0x18
    11e6:	8f 8b       	std	Y+23, r24	; 0x17
    11e8:	89 2b       	or	r24, r25
    11ea:	09 f0       	breq	.+2      	; 0x11ee <xTaskGenericCreate+0x4c>
    11ec:	ad c0       	rjmp	.+346    	; 0x1348 <xTaskGenericCreate+0x1a6>
    11ee:	ce 01       	movw	r24, r28
    11f0:	c8 da       	rcall	.-2672   	; 0x782 <vPortFree>
    11f2:	bf c0       	rjmp	.+382    	; 0x1372 <xTaskGenericCreate+0x1d0>
    11f4:	cf 01       	movw	r24, r30
    11f6:	31 91       	ld	r19, Z+
    11f8:	da 01       	movw	r26, r20
    11fa:	3d 93       	st	X+, r19
    11fc:	ad 01       	movw	r20, r26
    11fe:	dc 01       	movw	r26, r24
    1200:	8c 91       	ld	r24, X
    1202:	88 23       	and	r24, r24
    1204:	11 f0       	breq	.+4      	; 0x120a <xTaskGenericCreate+0x68>
    1206:	21 50       	subi	r18, 0x01	; 1
    1208:	a9 f7       	brne	.-22     	; 0x11f4 <xTaskGenericCreate+0x52>
    120a:	18 a2       	std	Y+32, r1	; 0x20
    120c:	10 2f       	mov	r17, r16
    120e:	04 30       	cpi	r16, 0x04	; 4
    1210:	08 f0       	brcs	.+2      	; 0x1214 <xTaskGenericCreate+0x72>
    1212:	13 e0       	ldi	r17, 0x03	; 3
    1214:	1e 8b       	std	Y+22, r17	; 0x16
    1216:	5e 01       	movw	r10, r28
    1218:	b2 e0       	ldi	r27, 0x02	; 2
    121a:	ab 0e       	add	r10, r27
    121c:	b1 1c       	adc	r11, r1
    121e:	c5 01       	movw	r24, r10
    1220:	b5 dc       	rcall	.-1686   	; 0xb8c <vListInitialiseItem>
    1222:	ce 01       	movw	r24, r28
    1224:	0c 96       	adiw	r24, 0x0c	; 12
    1226:	b2 dc       	rcall	.-1692   	; 0xb8c <vListInitialiseItem>
    1228:	d9 87       	std	Y+9, r29	; 0x09
    122a:	c8 87       	std	Y+8, r28	; 0x08
    122c:	84 e0       	ldi	r24, 0x04	; 4
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	81 1b       	sub	r24, r17
    1232:	91 09       	sbc	r25, r1
    1234:	9d 87       	std	Y+13, r25	; 0x0d
    1236:	8c 87       	std	Y+12, r24	; 0x0c
    1238:	db 8b       	std	Y+19, r29	; 0x13
    123a:	ca 8b       	std	Y+18, r28	; 0x12
    123c:	a3 01       	movw	r20, r6
    123e:	b4 01       	movw	r22, r8
    1240:	c6 01       	movw	r24, r12
    1242:	e7 dd       	rcall	.-1074   	; 0xe12 <pxPortInitialiseStack>
    1244:	99 83       	std	Y+1, r25	; 0x01
    1246:	88 83       	st	Y, r24
    1248:	e1 14       	cp	r14, r1
    124a:	f1 04       	cpc	r15, r1
    124c:	19 f0       	breq	.+6      	; 0x1254 <xTaskGenericCreate+0xb2>
    124e:	f7 01       	movw	r30, r14
    1250:	d1 83       	std	Z+1, r29	; 0x01
    1252:	c0 83       	st	Z, r28
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	0f 92       	push	r0
    125a:	80 91 36 09 	lds	r24, 0x0936
    125e:	8f 5f       	subi	r24, 0xFF	; 255
    1260:	80 93 36 09 	sts	0x0936, r24
    1264:	80 91 84 09 	lds	r24, 0x0984
    1268:	90 91 85 09 	lds	r25, 0x0985
    126c:	89 2b       	or	r24, r25
    126e:	69 f5       	brne	.+90     	; 0x12ca <xTaskGenericCreate+0x128>
    1270:	d0 93 85 09 	sts	0x0985, r29
    1274:	c0 93 84 09 	sts	0x0984, r28
    1278:	80 91 36 09 	lds	r24, 0x0936
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	a1 f5       	brne	.+104    	; 0x12e8 <xTaskGenericCreate+0x146>
    1280:	80 e6       	ldi	r24, 0x60	; 96
    1282:	99 e0       	ldi	r25, 0x09	; 9
    1284:	75 dc       	rcall	.-1814   	; 0xb70 <vListInitialise>
    1286:	89 e6       	ldi	r24, 0x69	; 105
    1288:	99 e0       	ldi	r25, 0x09	; 9
    128a:	72 dc       	rcall	.-1820   	; 0xb70 <vListInitialise>
    128c:	82 e7       	ldi	r24, 0x72	; 114
    128e:	99 e0       	ldi	r25, 0x09	; 9
    1290:	6f dc       	rcall	.-1826   	; 0xb70 <vListInitialise>
    1292:	8b e7       	ldi	r24, 0x7B	; 123
    1294:	99 e0       	ldi	r25, 0x09	; 9
    1296:	6c dc       	rcall	.-1832   	; 0xb70 <vListInitialise>
    1298:	87 e5       	ldi	r24, 0x57	; 87
    129a:	99 e0       	ldi	r25, 0x09	; 9
    129c:	69 dc       	rcall	.-1838   	; 0xb70 <vListInitialise>
    129e:	8e e4       	ldi	r24, 0x4E	; 78
    12a0:	99 e0       	ldi	r25, 0x09	; 9
    12a2:	66 dc       	rcall	.-1844   	; 0xb70 <vListInitialise>
    12a4:	81 e4       	ldi	r24, 0x41	; 65
    12a6:	99 e0       	ldi	r25, 0x09	; 9
    12a8:	63 dc       	rcall	.-1850   	; 0xb70 <vListInitialise>
    12aa:	88 e3       	ldi	r24, 0x38	; 56
    12ac:	99 e0       	ldi	r25, 0x09	; 9
    12ae:	60 dc       	rcall	.-1856   	; 0xb70 <vListInitialise>
    12b0:	87 e5       	ldi	r24, 0x57	; 87
    12b2:	99 e0       	ldi	r25, 0x09	; 9
    12b4:	90 93 4d 09 	sts	0x094D, r25
    12b8:	80 93 4c 09 	sts	0x094C, r24
    12bc:	8e e4       	ldi	r24, 0x4E	; 78
    12be:	99 e0       	ldi	r25, 0x09	; 9
    12c0:	90 93 4b 09 	sts	0x094B, r25
    12c4:	80 93 4a 09 	sts	0x094A, r24
    12c8:	0f c0       	rjmp	.+30     	; 0x12e8 <xTaskGenericCreate+0x146>
    12ca:	80 91 32 09 	lds	r24, 0x0932
    12ce:	81 11       	cpse	r24, r1
    12d0:	0b c0       	rjmp	.+22     	; 0x12e8 <xTaskGenericCreate+0x146>
    12d2:	e0 91 84 09 	lds	r30, 0x0984
    12d6:	f0 91 85 09 	lds	r31, 0x0985
    12da:	86 89       	ldd	r24, Z+22	; 0x16
    12dc:	08 17       	cp	r16, r24
    12de:	20 f0       	brcs	.+8      	; 0x12e8 <xTaskGenericCreate+0x146>
    12e0:	d0 93 85 09 	sts	0x0985, r29
    12e4:	c0 93 84 09 	sts	0x0984, r28
    12e8:	80 91 2e 09 	lds	r24, 0x092E
    12ec:	8f 5f       	subi	r24, 0xFF	; 255
    12ee:	80 93 2e 09 	sts	0x092E, r24
    12f2:	8e 89       	ldd	r24, Y+22	; 0x16
    12f4:	90 91 33 09 	lds	r25, 0x0933
    12f8:	98 17       	cp	r25, r24
    12fa:	10 f4       	brcc	.+4      	; 0x1300 <xTaskGenericCreate+0x15e>
    12fc:	80 93 33 09 	sts	0x0933, r24
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9c 01       	movw	r18, r24
    1304:	22 0f       	add	r18, r18
    1306:	33 1f       	adc	r19, r19
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	22 0f       	add	r18, r18
    130e:	33 1f       	adc	r19, r19
    1310:	82 0f       	add	r24, r18
    1312:	93 1f       	adc	r25, r19
    1314:	b5 01       	movw	r22, r10
    1316:	80 5a       	subi	r24, 0xA0	; 160
    1318:	96 4f       	sbci	r25, 0xF6	; 246
    131a:	3c dc       	rcall	.-1928   	; 0xb94 <vListInsertEnd>
    131c:	0f 90       	pop	r0
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	80 91 32 09 	lds	r24, 0x0932
    1324:	88 23       	and	r24, r24
    1326:	51 f0       	breq	.+20     	; 0x133c <xTaskGenericCreate+0x19a>
    1328:	e0 91 84 09 	lds	r30, 0x0984
    132c:	f0 91 85 09 	lds	r31, 0x0985
    1330:	86 89       	ldd	r24, Z+22	; 0x16
    1332:	80 17       	cp	r24, r16
    1334:	28 f4       	brcc	.+10     	; 0x1340 <xTaskGenericCreate+0x19e>
    1336:	1d de       	rcall	.-966    	; 0xf72 <vPortYield>
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	1c c0       	rjmp	.+56     	; 0x1374 <xTaskGenericCreate+0x1d2>
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	1a c0       	rjmp	.+52     	; 0x1374 <xTaskGenericCreate+0x1d2>
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	18 c0       	rjmp	.+48     	; 0x1374 <xTaskGenericCreate+0x1d2>
    1344:	d8 8e       	std	Y+24, r13	; 0x18
    1346:	cf 8a       	std	Y+23, r12	; 0x17
    1348:	f1 e0       	ldi	r31, 0x01	; 1
    134a:	4f 1a       	sub	r4, r31
    134c:	51 08       	sbc	r5, r1
    134e:	cf 88       	ldd	r12, Y+23	; 0x17
    1350:	d8 8c       	ldd	r13, Y+24	; 0x18
    1352:	c4 0c       	add	r12, r4
    1354:	d5 1c       	adc	r13, r5
    1356:	d5 01       	movw	r26, r10
    1358:	8c 91       	ld	r24, X
    135a:	89 8f       	std	Y+25, r24	; 0x19
    135c:	8c 91       	ld	r24, X
    135e:	88 23       	and	r24, r24
    1360:	09 f4       	brne	.+2      	; 0x1364 <xTaskGenericCreate+0x1c2>
    1362:	53 cf       	rjmp	.-346    	; 0x120a <xTaskGenericCreate+0x68>
    1364:	ae 01       	movw	r20, r28
    1366:	46 5e       	subi	r20, 0xE6	; 230
    1368:	5f 4f       	sbci	r21, 0xFF	; 255
    136a:	f5 01       	movw	r30, r10
    136c:	31 96       	adiw	r30, 0x01	; 1
    136e:	27 e0       	ldi	r18, 0x07	; 7
    1370:	41 cf       	rjmp	.-382    	; 0x11f4 <xTaskGenericCreate+0x52>
    1372:	8f ef       	ldi	r24, 0xFF	; 255
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	1f 91       	pop	r17
    137a:	0f 91       	pop	r16
    137c:	ff 90       	pop	r15
    137e:	ef 90       	pop	r14
    1380:	df 90       	pop	r13
    1382:	cf 90       	pop	r12
    1384:	bf 90       	pop	r11
    1386:	af 90       	pop	r10
    1388:	9f 90       	pop	r9
    138a:	8f 90       	pop	r8
    138c:	7f 90       	pop	r7
    138e:	6f 90       	pop	r6
    1390:	5f 90       	pop	r5
    1392:	4f 90       	pop	r4
    1394:	08 95       	ret

00001396 <vTaskStartScheduler>:
    1396:	af 92       	push	r10
    1398:	bf 92       	push	r11
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	a1 2c       	mov	r10, r1
    13a6:	b1 2c       	mov	r11, r1
    13a8:	c1 2c       	mov	r12, r1
    13aa:	d1 2c       	mov	r13, r1
    13ac:	e1 2c       	mov	r14, r1
    13ae:	f1 2c       	mov	r15, r1
    13b0:	00 e0       	ldi	r16, 0x00	; 0
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	45 e5       	ldi	r20, 0x55	; 85
    13b8:	50 e0       	ldi	r21, 0x00	; 0
    13ba:	65 e0       	ldi	r22, 0x05	; 5
    13bc:	73 e0       	ldi	r23, 0x03	; 3
    13be:	8e e4       	ldi	r24, 0x4E	; 78
    13c0:	9b e0       	ldi	r25, 0x0B	; 11
    13c2:	ef de       	rcall	.-546    	; 0x11a2 <xTaskGenericCreate>
    13c4:	81 30       	cpi	r24, 0x01	; 1
    13c6:	41 f4       	brne	.+16     	; 0x13d8 <vTaskStartScheduler+0x42>
    13c8:	f8 94       	cli
    13ca:	80 93 32 09 	sts	0x0932, r24
    13ce:	10 92 35 09 	sts	0x0935, r1
    13d2:	10 92 34 09 	sts	0x0934, r1
    13d6:	8f dd       	rcall	.-1250   	; 0xef6 <xPortStartScheduler>
    13d8:	0f 91       	pop	r16
    13da:	ff 90       	pop	r15
    13dc:	ef 90       	pop	r14
    13de:	df 90       	pop	r13
    13e0:	cf 90       	pop	r12
    13e2:	bf 90       	pop	r11
    13e4:	af 90       	pop	r10
    13e6:	08 95       	ret

000013e8 <vTaskSuspendAll>:
    13e8:	80 91 2d 09 	lds	r24, 0x092D
    13ec:	8f 5f       	subi	r24, 0xFF	; 255
    13ee:	80 93 2d 09 	sts	0x092D, r24
    13f2:	08 95       	ret

000013f4 <xTaskIncrementTick>:
    13f4:	cf 92       	push	r12
    13f6:	df 92       	push	r13
    13f8:	ef 92       	push	r14
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
    1404:	80 91 2d 09 	lds	r24, 0x092D
    1408:	81 11       	cpse	r24, r1
    140a:	96 c0       	rjmp	.+300    	; 0x1538 <xTaskIncrementTick+0x144>
    140c:	80 91 34 09 	lds	r24, 0x0934
    1410:	90 91 35 09 	lds	r25, 0x0935
    1414:	01 96       	adiw	r24, 0x01	; 1
    1416:	90 93 35 09 	sts	0x0935, r25
    141a:	80 93 34 09 	sts	0x0934, r24
    141e:	e0 90 34 09 	lds	r14, 0x0934
    1422:	f0 90 35 09 	lds	r15, 0x0935
    1426:	e1 14       	cp	r14, r1
    1428:	f1 04       	cpc	r15, r1
    142a:	b1 f4       	brne	.+44     	; 0x1458 <xTaskIncrementTick+0x64>
    142c:	80 91 4c 09 	lds	r24, 0x094C
    1430:	90 91 4d 09 	lds	r25, 0x094D
    1434:	20 91 4a 09 	lds	r18, 0x094A
    1438:	30 91 4b 09 	lds	r19, 0x094B
    143c:	30 93 4d 09 	sts	0x094D, r19
    1440:	20 93 4c 09 	sts	0x094C, r18
    1444:	90 93 4b 09 	sts	0x094B, r25
    1448:	80 93 4a 09 	sts	0x094A, r24
    144c:	80 91 2f 09 	lds	r24, 0x092F
    1450:	8f 5f       	subi	r24, 0xFF	; 255
    1452:	80 93 2f 09 	sts	0x092F, r24
    1456:	51 de       	rcall	.-862    	; 0x10fa <prvResetNextTaskUnblockTime>
    1458:	80 91 08 02 	lds	r24, 0x0208
    145c:	90 91 09 02 	lds	r25, 0x0209
    1460:	e8 16       	cp	r14, r24
    1462:	f9 06       	cpc	r15, r25
    1464:	08 f4       	brcc	.+2      	; 0x1468 <xTaskIncrementTick+0x74>
    1466:	51 c0       	rjmp	.+162    	; 0x150a <xTaskIncrementTick+0x116>
    1468:	d1 2c       	mov	r13, r1
    146a:	cc 24       	eor	r12, r12
    146c:	c3 94       	inc	r12
    146e:	01 c0       	rjmp	.+2      	; 0x1472 <xTaskIncrementTick+0x7e>
    1470:	dc 2c       	mov	r13, r12
    1472:	e0 91 4c 09 	lds	r30, 0x094C
    1476:	f0 91 4d 09 	lds	r31, 0x094D
    147a:	80 81       	ld	r24, Z
    147c:	81 11       	cpse	r24, r1
    147e:	07 c0       	rjmp	.+14     	; 0x148e <xTaskIncrementTick+0x9a>
    1480:	8f ef       	ldi	r24, 0xFF	; 255
    1482:	9f ef       	ldi	r25, 0xFF	; 255
    1484:	90 93 09 02 	sts	0x0209, r25
    1488:	80 93 08 02 	sts	0x0208, r24
    148c:	3f c0       	rjmp	.+126    	; 0x150c <xTaskIncrementTick+0x118>
    148e:	e0 91 4c 09 	lds	r30, 0x094C
    1492:	f0 91 4d 09 	lds	r31, 0x094D
    1496:	05 80       	ldd	r0, Z+5	; 0x05
    1498:	f6 81       	ldd	r31, Z+6	; 0x06
    149a:	e0 2d       	mov	r30, r0
    149c:	c6 81       	ldd	r28, Z+6	; 0x06
    149e:	d7 81       	ldd	r29, Z+7	; 0x07
    14a0:	2a 81       	ldd	r18, Y+2	; 0x02
    14a2:	3b 81       	ldd	r19, Y+3	; 0x03
    14a4:	e2 16       	cp	r14, r18
    14a6:	f3 06       	cpc	r15, r19
    14a8:	28 f4       	brcc	.+10     	; 0x14b4 <xTaskIncrementTick+0xc0>
    14aa:	30 93 09 02 	sts	0x0209, r19
    14ae:	20 93 08 02 	sts	0x0208, r18
    14b2:	2c c0       	rjmp	.+88     	; 0x150c <xTaskIncrementTick+0x118>
    14b4:	8e 01       	movw	r16, r28
    14b6:	0e 5f       	subi	r16, 0xFE	; 254
    14b8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ba:	c8 01       	movw	r24, r16
    14bc:	bd db       	rcall	.-2182   	; 0xc38 <uxListRemove>
    14be:	8c 89       	ldd	r24, Y+20	; 0x14
    14c0:	9d 89       	ldd	r25, Y+21	; 0x15
    14c2:	89 2b       	or	r24, r25
    14c4:	19 f0       	breq	.+6      	; 0x14cc <xTaskIncrementTick+0xd8>
    14c6:	ce 01       	movw	r24, r28
    14c8:	0c 96       	adiw	r24, 0x0c	; 12
    14ca:	b6 db       	rcall	.-2196   	; 0xc38 <uxListRemove>
    14cc:	2e 89       	ldd	r18, Y+22	; 0x16
    14ce:	80 91 33 09 	lds	r24, 0x0933
    14d2:	82 17       	cp	r24, r18
    14d4:	10 f4       	brcc	.+4      	; 0x14da <xTaskIncrementTick+0xe6>
    14d6:	20 93 33 09 	sts	0x0933, r18
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	c9 01       	movw	r24, r18
    14de:	88 0f       	add	r24, r24
    14e0:	99 1f       	adc	r25, r25
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	88 0f       	add	r24, r24
    14e8:	99 1f       	adc	r25, r25
    14ea:	82 0f       	add	r24, r18
    14ec:	93 1f       	adc	r25, r19
    14ee:	b8 01       	movw	r22, r16
    14f0:	80 5a       	subi	r24, 0xA0	; 160
    14f2:	96 4f       	sbci	r25, 0xF6	; 246
    14f4:	4f db       	rcall	.-2402   	; 0xb94 <vListInsertEnd>
    14f6:	e0 91 84 09 	lds	r30, 0x0984
    14fa:	f0 91 85 09 	lds	r31, 0x0985
    14fe:	9e 89       	ldd	r25, Y+22	; 0x16
    1500:	86 89       	ldd	r24, Z+22	; 0x16
    1502:	98 17       	cp	r25, r24
    1504:	08 f0       	brcs	.+2      	; 0x1508 <xTaskIncrementTick+0x114>
    1506:	b4 cf       	rjmp	.-152    	; 0x1470 <xTaskIncrementTick+0x7c>
    1508:	b4 cf       	rjmp	.-152    	; 0x1472 <xTaskIncrementTick+0x7e>
    150a:	d1 2c       	mov	r13, r1
    150c:	e0 91 84 09 	lds	r30, 0x0984
    1510:	f0 91 85 09 	lds	r31, 0x0985
    1514:	86 89       	ldd	r24, Z+22	; 0x16
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	fc 01       	movw	r30, r24
    151a:	ee 0f       	add	r30, r30
    151c:	ff 1f       	adc	r31, r31
    151e:	ee 0f       	add	r30, r30
    1520:	ff 1f       	adc	r31, r31
    1522:	ee 0f       	add	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	8e 0f       	add	r24, r30
    1528:	9f 1f       	adc	r25, r31
    152a:	fc 01       	movw	r30, r24
    152c:	e0 5a       	subi	r30, 0xA0	; 160
    152e:	f6 4f       	sbci	r31, 0xF6	; 246
    1530:	80 81       	ld	r24, Z
    1532:	82 30       	cpi	r24, 0x02	; 2
    1534:	40 f4       	brcc	.+16     	; 0x1546 <xTaskIncrementTick+0x152>
    1536:	09 c0       	rjmp	.+18     	; 0x154a <xTaskIncrementTick+0x156>
    1538:	80 91 31 09 	lds	r24, 0x0931
    153c:	8f 5f       	subi	r24, 0xFF	; 255
    153e:	80 93 31 09 	sts	0x0931, r24
    1542:	d1 2c       	mov	r13, r1
    1544:	02 c0       	rjmp	.+4      	; 0x154a <xTaskIncrementTick+0x156>
    1546:	dd 24       	eor	r13, r13
    1548:	d3 94       	inc	r13
    154a:	80 91 30 09 	lds	r24, 0x0930
    154e:	88 23       	and	r24, r24
    1550:	11 f0       	breq	.+4      	; 0x1556 <xTaskIncrementTick+0x162>
    1552:	dd 24       	eor	r13, r13
    1554:	d3 94       	inc	r13
    1556:	8d 2d       	mov	r24, r13
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	ff 90       	pop	r15
    1562:	ef 90       	pop	r14
    1564:	df 90       	pop	r13
    1566:	cf 90       	pop	r12
    1568:	08 95       	ret

0000156a <xTaskResumeAll>:
    156a:	df 92       	push	r13
    156c:	ef 92       	push	r14
    156e:	ff 92       	push	r15
    1570:	0f 93       	push	r16
    1572:	1f 93       	push	r17
    1574:	cf 93       	push	r28
    1576:	df 93       	push	r29
    1578:	0f b6       	in	r0, 0x3f	; 63
    157a:	f8 94       	cli
    157c:	0f 92       	push	r0
    157e:	80 91 2d 09 	lds	r24, 0x092D
    1582:	81 50       	subi	r24, 0x01	; 1
    1584:	80 93 2d 09 	sts	0x092D, r24
    1588:	80 91 2d 09 	lds	r24, 0x092D
    158c:	81 11       	cpse	r24, r1
    158e:	5c c0       	rjmp	.+184    	; 0x1648 <xTaskResumeAll+0xde>
    1590:	80 91 36 09 	lds	r24, 0x0936
    1594:	88 23       	and	r24, r24
    1596:	09 f4       	brne	.+2      	; 0x159a <xTaskResumeAll+0x30>
    1598:	59 c0       	rjmp	.+178    	; 0x164c <xTaskResumeAll+0xe2>
    159a:	0f 2e       	mov	r0, r31
    159c:	f1 e4       	ldi	r31, 0x41	; 65
    159e:	ef 2e       	mov	r14, r31
    15a0:	f9 e0       	ldi	r31, 0x09	; 9
    15a2:	ff 2e       	mov	r15, r31
    15a4:	f0 2d       	mov	r31, r0
    15a6:	dd 24       	eor	r13, r13
    15a8:	d3 94       	inc	r13
    15aa:	2d c0       	rjmp	.+90     	; 0x1606 <xTaskResumeAll+0x9c>
    15ac:	e0 91 46 09 	lds	r30, 0x0946
    15b0:	f0 91 47 09 	lds	r31, 0x0947
    15b4:	c6 81       	ldd	r28, Z+6	; 0x06
    15b6:	d7 81       	ldd	r29, Z+7	; 0x07
    15b8:	ce 01       	movw	r24, r28
    15ba:	0c 96       	adiw	r24, 0x0c	; 12
    15bc:	3d db       	rcall	.-2438   	; 0xc38 <uxListRemove>
    15be:	8e 01       	movw	r16, r28
    15c0:	0e 5f       	subi	r16, 0xFE	; 254
    15c2:	1f 4f       	sbci	r17, 0xFF	; 255
    15c4:	c8 01       	movw	r24, r16
    15c6:	38 db       	rcall	.-2448   	; 0xc38 <uxListRemove>
    15c8:	8e 89       	ldd	r24, Y+22	; 0x16
    15ca:	90 91 33 09 	lds	r25, 0x0933
    15ce:	98 17       	cp	r25, r24
    15d0:	10 f4       	brcc	.+4      	; 0x15d6 <xTaskResumeAll+0x6c>
    15d2:	80 93 33 09 	sts	0x0933, r24
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	9c 01       	movw	r18, r24
    15da:	22 0f       	add	r18, r18
    15dc:	33 1f       	adc	r19, r19
    15de:	22 0f       	add	r18, r18
    15e0:	33 1f       	adc	r19, r19
    15e2:	22 0f       	add	r18, r18
    15e4:	33 1f       	adc	r19, r19
    15e6:	82 0f       	add	r24, r18
    15e8:	93 1f       	adc	r25, r19
    15ea:	b8 01       	movw	r22, r16
    15ec:	80 5a       	subi	r24, 0xA0	; 160
    15ee:	96 4f       	sbci	r25, 0xF6	; 246
    15f0:	d1 da       	rcall	.-2654   	; 0xb94 <vListInsertEnd>
    15f2:	e0 91 84 09 	lds	r30, 0x0984
    15f6:	f0 91 85 09 	lds	r31, 0x0985
    15fa:	9e 89       	ldd	r25, Y+22	; 0x16
    15fc:	86 89       	ldd	r24, Z+22	; 0x16
    15fe:	98 17       	cp	r25, r24
    1600:	10 f0       	brcs	.+4      	; 0x1606 <xTaskResumeAll+0x9c>
    1602:	d0 92 30 09 	sts	0x0930, r13
    1606:	f7 01       	movw	r30, r14
    1608:	80 81       	ld	r24, Z
    160a:	81 11       	cpse	r24, r1
    160c:	cf cf       	rjmp	.-98     	; 0x15ac <xTaskResumeAll+0x42>
    160e:	80 91 31 09 	lds	r24, 0x0931
    1612:	88 23       	and	r24, r24
    1614:	91 f0       	breq	.+36     	; 0x163a <xTaskResumeAll+0xd0>
    1616:	80 91 31 09 	lds	r24, 0x0931
    161a:	88 23       	and	r24, r24
    161c:	71 f0       	breq	.+28     	; 0x163a <xTaskResumeAll+0xd0>
    161e:	c1 e0       	ldi	r28, 0x01	; 1
    1620:	e9 de       	rcall	.-558    	; 0x13f4 <xTaskIncrementTick>
    1622:	81 11       	cpse	r24, r1
    1624:	c0 93 30 09 	sts	0x0930, r28
    1628:	80 91 31 09 	lds	r24, 0x0931
    162c:	81 50       	subi	r24, 0x01	; 1
    162e:	80 93 31 09 	sts	0x0931, r24
    1632:	80 91 31 09 	lds	r24, 0x0931
    1636:	81 11       	cpse	r24, r1
    1638:	f3 cf       	rjmp	.-26     	; 0x1620 <xTaskResumeAll+0xb6>
    163a:	80 91 30 09 	lds	r24, 0x0930
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	39 f4       	brne	.+14     	; 0x1650 <xTaskResumeAll+0xe6>
    1642:	97 dc       	rcall	.-1746   	; 0xf72 <vPortYield>
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	05 c0       	rjmp	.+10     	; 0x1652 <xTaskResumeAll+0xe8>
    1648:	80 e0       	ldi	r24, 0x00	; 0
    164a:	03 c0       	rjmp	.+6      	; 0x1652 <xTaskResumeAll+0xe8>
    164c:	80 e0       	ldi	r24, 0x00	; 0
    164e:	01 c0       	rjmp	.+2      	; 0x1652 <xTaskResumeAll+0xe8>
    1650:	80 e0       	ldi	r24, 0x00	; 0
    1652:	0f 90       	pop	r0
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	1f 91       	pop	r17
    165c:	0f 91       	pop	r16
    165e:	ff 90       	pop	r15
    1660:	ef 90       	pop	r14
    1662:	df 90       	pop	r13
    1664:	08 95       	ret

00001666 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
    1666:	cf 93       	push	r28
    1668:	df 93       	push	r29
    166a:	ec 01       	movw	r28, r24
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	91 f0       	breq	.+36     	; 0x1694 <vTaskDelay+0x2e>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
    1670:	bb de       	rcall	.-650    	; 0x13e8 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    1672:	80 91 34 09 	lds	r24, 0x0934
    1676:	90 91 35 09 	lds	r25, 0x0935
    167a:	c8 0f       	add	r28, r24
    167c:	d9 1f       	adc	r29, r25

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
    167e:	80 91 84 09 	lds	r24, 0x0984
    1682:	90 91 85 09 	lds	r25, 0x0985
    1686:	02 96       	adiw	r24, 0x02	; 2
    1688:	d7 da       	rcall	.-2642   	; 0xc38 <uxListRemove>
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    168a:	ce 01       	movw	r24, r28
    168c:	55 dd       	rcall	.-1366   	; 0x1138 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    168e:	6d df       	rcall	.-294    	; 0x156a <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    1690:	81 11       	cpse	r24, r1
    1692:	01 c0       	rjmp	.+2      	; 0x1696 <vTaskDelay+0x30>
		{
			portYIELD_WITHIN_API();
    1694:	6e dc       	rcall	.-1828   	; 0xf72 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	08 95       	ret

0000169c <prvIdleTask>:

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    169c:	0f 2e       	mov	r0, r31
    169e:	f0 e6       	ldi	r31, 0x60	; 96
    16a0:	ef 2e       	mov	r14, r31
    16a2:	f9 e0       	ldi	r31, 0x09	; 9
    16a4:	ff 2e       	mov	r15, r31
    16a6:	f0 2d       	mov	r31, r0
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    16a8:	c8 e3       	ldi	r28, 0x38	; 56
    16aa:	d9 e0       	ldi	r29, 0x09	; 9
    16ac:	23 c0       	rjmp	.+70     	; 0x16f4 <prvIdleTask+0x58>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
		{
			vTaskSuspendAll();
    16ae:	9c de       	rcall	.-712    	; 0x13e8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    16b0:	18 81       	ld	r17, Y
			}
			( void ) xTaskResumeAll();
    16b2:	5b df       	rcall	.-330    	; 0x156a <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    16b4:	11 23       	and	r17, r17
    16b6:	f1 f0       	breq	.+60     	; 0x16f4 <prvIdleTask+0x58>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	0f 92       	push	r0
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
    16be:	e0 91 3d 09 	lds	r30, 0x093D
    16c2:	f0 91 3e 09 	lds	r31, 0x093E
    16c6:	06 81       	ldd	r16, Z+6	; 0x06
    16c8:	17 81       	ldd	r17, Z+7	; 0x07
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
    16ca:	c8 01       	movw	r24, r16
    16cc:	02 96       	adiw	r24, 0x02	; 2
    16ce:	b4 da       	rcall	.-2712   	; 0xc38 <uxListRemove>
					--uxCurrentNumberOfTasks;
    16d0:	80 91 36 09 	lds	r24, 0x0936
    16d4:	81 50       	subi	r24, 0x01	; 1
    16d6:	80 93 36 09 	sts	0x0936, r24
					--uxTasksDeleted;
    16da:	80 91 37 09 	lds	r24, 0x0937
    16de:	81 50       	subi	r24, 0x01	; 1
    16e0:	80 93 37 09 	sts	0x0937, r24
				}
				taskEXIT_CRITICAL();
    16e4:	0f 90       	pop	r0
    16e6:	0f be       	out	0x3f, r0	; 63
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
		vPortFreeAligned( pxTCB->pxStack );
    16e8:	f8 01       	movw	r30, r16
    16ea:	87 89       	ldd	r24, Z+23	; 0x17
    16ec:	90 8d       	ldd	r25, Z+24	; 0x18
    16ee:	49 d8       	rcall	.-3950   	; 0x782 <vPortFree>
		vPortFree( pxTCB );
    16f0:	c8 01       	movw	r24, r16
    16f2:	47 d8       	rcall	.-3954   	; 0x782 <vPortFree>
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
    16f4:	80 91 37 09 	lds	r24, 0x0937
    16f8:	81 11       	cpse	r24, r1
    16fa:	d9 cf       	rjmp	.-78     	; 0x16ae <prvIdleTask+0x12>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
    16fc:	f7 01       	movw	r30, r14
    16fe:	80 81       	ld	r24, Z
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	c0 f3       	brcs	.-16     	; 0x16f4 <prvIdleTask+0x58>
			{
				taskYIELD();
    1704:	36 dc       	rcall	.-1940   	; 0xf72 <vPortYield>
    1706:	f6 cf       	rjmp	.-20     	; 0x16f4 <prvIdleTask+0x58>

00001708 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1708:	80 91 2d 09 	lds	r24, 0x092D
    170c:	88 23       	and	r24, r24
    170e:	21 f0       	breq	.+8      	; 0x1718 <vTaskSwitchContext+0x10>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	80 93 30 09 	sts	0x0930, r24
    1716:	08 95       	ret
	}
	else
	{
		xYieldPending = pdFALSE;
    1718:	10 92 30 09 	sts	0x0930, r1
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
    171c:	80 91 33 09 	lds	r24, 0x0933
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	fc 01       	movw	r30, r24
    1724:	ee 0f       	add	r30, r30
    1726:	ff 1f       	adc	r31, r31
    1728:	ee 0f       	add	r30, r30
    172a:	ff 1f       	adc	r31, r31
    172c:	ee 0f       	add	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	8e 0f       	add	r24, r30
    1732:	9f 1f       	adc	r25, r31
    1734:	fc 01       	movw	r30, r24
    1736:	e0 5a       	subi	r30, 0xA0	; 160
    1738:	f6 4f       	sbci	r31, 0xF6	; 246
    173a:	80 81       	ld	r24, Z
    173c:	81 11       	cpse	r24, r1
    173e:	17 c0       	rjmp	.+46     	; 0x176e <vTaskSwitchContext+0x66>
    1740:	80 91 33 09 	lds	r24, 0x0933
    1744:	81 50       	subi	r24, 0x01	; 1
    1746:	80 93 33 09 	sts	0x0933, r24
    174a:	80 91 33 09 	lds	r24, 0x0933
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	ee 0f       	add	r30, r30
    1754:	ff 1f       	adc	r31, r31
    1756:	ee 0f       	add	r30, r30
    1758:	ff 1f       	adc	r31, r31
    175a:	ee 0f       	add	r30, r30
    175c:	ff 1f       	adc	r31, r31
    175e:	8e 0f       	add	r24, r30
    1760:	9f 1f       	adc	r25, r31
    1762:	fc 01       	movw	r30, r24
    1764:	e0 5a       	subi	r30, 0xA0	; 160
    1766:	f6 4f       	sbci	r31, 0xF6	; 246
    1768:	80 81       	ld	r24, Z
    176a:	88 23       	and	r24, r24
    176c:	49 f3       	breq	.-46     	; 0x1740 <vTaskSwitchContext+0x38>
    176e:	e0 91 33 09 	lds	r30, 0x0933
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	cf 01       	movw	r24, r30
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	e8 0f       	add	r30, r24
    1784:	f9 1f       	adc	r31, r25
    1786:	e0 5a       	subi	r30, 0xA0	; 160
    1788:	f6 4f       	sbci	r31, 0xF6	; 246
    178a:	a1 81       	ldd	r26, Z+1	; 0x01
    178c:	b2 81       	ldd	r27, Z+2	; 0x02
    178e:	12 96       	adiw	r26, 0x02	; 2
    1790:	0d 90       	ld	r0, X+
    1792:	bc 91       	ld	r27, X
    1794:	a0 2d       	mov	r26, r0
    1796:	b2 83       	std	Z+2, r27	; 0x02
    1798:	a1 83       	std	Z+1, r26	; 0x01
    179a:	cf 01       	movw	r24, r30
    179c:	03 96       	adiw	r24, 0x03	; 3
    179e:	a8 17       	cp	r26, r24
    17a0:	b9 07       	cpc	r27, r25
    17a2:	31 f4       	brne	.+12     	; 0x17b0 <vTaskSwitchContext+0xa8>
    17a4:	12 96       	adiw	r26, 0x02	; 2
    17a6:	8d 91       	ld	r24, X+
    17a8:	9c 91       	ld	r25, X
    17aa:	13 97       	sbiw	r26, 0x03	; 3
    17ac:	92 83       	std	Z+2, r25	; 0x02
    17ae:	81 83       	std	Z+1, r24	; 0x01
    17b0:	01 80       	ldd	r0, Z+1	; 0x01
    17b2:	f2 81       	ldd	r31, Z+2	; 0x02
    17b4:	e0 2d       	mov	r30, r0
    17b6:	86 81       	ldd	r24, Z+6	; 0x06
    17b8:	97 81       	ldd	r25, Z+7	; 0x07
    17ba:	90 93 85 09 	sts	0x0985, r25
    17be:	80 93 84 09 	sts	0x0984, r24
    17c2:	08 95       	ret

000017c4 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    17c4:	80 91 b6 09 	lds	r24, 0x09B6
    17c8:	90 e0       	ldi	r25, 0x00	; 0
    17ca:	20 91 b7 09 	lds	r18, 0x09B7
    17ce:	82 1b       	sub	r24, r18
    17d0:	91 09       	sbc	r25, r1
    17d2:	08 95       	ret

000017d4 <_ZN7TwoWire4readEv>:
    17d4:	20 91 b7 09 	lds	r18, 0x09B7
    17d8:	80 91 b6 09 	lds	r24, 0x09B6
    17dc:	28 17       	cp	r18, r24
    17de:	50 f4       	brcc	.+20     	; 0x17f4 <_ZN7TwoWire4readEv+0x20>
    17e0:	e2 2f       	mov	r30, r18
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	e8 54       	subi	r30, 0x48	; 72
    17e6:	f6 4f       	sbci	r31, 0xF6	; 246
    17e8:	80 81       	ld	r24, Z
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	2f 5f       	subi	r18, 0xFF	; 255
    17ee:	20 93 b7 09 	sts	0x09B7, r18
    17f2:	08 95       	ret
    17f4:	8f ef       	ldi	r24, 0xFF	; 255
    17f6:	9f ef       	ldi	r25, 0xFF	; 255
    17f8:	08 95       	ret

000017fa <_ZN7TwoWire4peekEv>:
    17fa:	e0 91 b7 09 	lds	r30, 0x09B7
    17fe:	80 91 b6 09 	lds	r24, 0x09B6
    1802:	e8 17       	cp	r30, r24
    1804:	30 f4       	brcc	.+12     	; 0x1812 <_ZN7TwoWire4peekEv+0x18>
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	e8 54       	subi	r30, 0x48	; 72
    180a:	f6 4f       	sbci	r31, 0xF6	; 246
    180c:	80 81       	ld	r24, Z
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	08 95       	ret
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	9f ef       	ldi	r25, 0xFF	; 255
    1816:	08 95       	ret

00001818 <_ZN7TwoWire5flushEv>:
    1818:	08 95       	ret

0000181a <_ZN7TwoWire5writeEPKhj>:
    181a:	cf 92       	push	r12
    181c:	df 92       	push	r13
    181e:	ef 92       	push	r14
    1820:	ff 92       	push	r15
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	7c 01       	movw	r14, r24
    182c:	cb 01       	movw	r24, r22
    182e:	8a 01       	movw	r16, r20
    1830:	20 91 92 09 	lds	r18, 0x0992
    1834:	22 23       	and	r18, r18
    1836:	89 f0       	breq	.+34     	; 0x185a <_ZN7TwoWire5writeEPKhj+0x40>
    1838:	eb 01       	movw	r28, r22
    183a:	6b 01       	movw	r12, r22
    183c:	c4 0e       	add	r12, r20
    183e:	d5 1e       	adc	r13, r21
    1840:	cc 15       	cp	r28, r12
    1842:	dd 05       	cpc	r29, r13
    1844:	69 f0       	breq	.+26     	; 0x1860 <_ZN7TwoWire5writeEPKhj+0x46>
    1846:	69 91       	ld	r22, Y+
    1848:	d7 01       	movw	r26, r14
    184a:	ed 91       	ld	r30, X+
    184c:	fc 91       	ld	r31, X
    184e:	01 90       	ld	r0, Z+
    1850:	f0 81       	ld	r31, Z
    1852:	e0 2d       	mov	r30, r0
    1854:	c7 01       	movw	r24, r14
    1856:	19 95       	eicall
    1858:	f3 cf       	rjmp	.-26     	; 0x1840 <_ZN7TwoWire5writeEPKhj+0x26>
    185a:	64 2f       	mov	r22, r20
    185c:	0e 94 29 17 	call	0x2e52	; 0x2e52 <twi_transmit>
    1860:	c8 01       	movw	r24, r16
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	ff 90       	pop	r15
    186c:	ef 90       	pop	r14
    186e:	df 90       	pop	r13
    1870:	cf 90       	pop	r12
    1872:	08 95       	ret

00001874 <_ZN7TwoWire5writeEh>:
    1874:	cf 93       	push	r28
    1876:	df 93       	push	r29
    1878:	1f 92       	push	r1
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	69 83       	std	Y+1, r22	; 0x01
    1880:	20 91 92 09 	lds	r18, 0x0992
    1884:	22 23       	and	r18, r18
    1886:	d1 f0       	breq	.+52     	; 0x18bc <_ZN7TwoWire5writeEh+0x48>
    1888:	20 91 93 09 	lds	r18, 0x0993
    188c:	20 32       	cpi	r18, 0x20	; 32
    188e:	40 f0       	brcs	.+16     	; 0x18a0 <_ZN7TwoWire5writeEh+0x2c>
    1890:	21 e0       	ldi	r18, 0x01	; 1
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	fc 01       	movw	r30, r24
    1896:	33 83       	std	Z+3, r19	; 0x03
    1898:	22 83       	std	Z+2, r18	; 0x02
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	15 c0       	rjmp	.+42     	; 0x18ca <_ZN7TwoWire5writeEh+0x56>
    18a0:	80 91 94 09 	lds	r24, 0x0994
    18a4:	e8 2f       	mov	r30, r24
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	eb 56       	subi	r30, 0x6B	; 107
    18aa:	f6 4f       	sbci	r31, 0xF6	; 246
    18ac:	99 81       	ldd	r25, Y+1	; 0x01
    18ae:	90 83       	st	Z, r25
    18b0:	8f 5f       	subi	r24, 0xFF	; 255
    18b2:	80 93 94 09 	sts	0x0994, r24
    18b6:	80 93 93 09 	sts	0x0993, r24
    18ba:	05 c0       	rjmp	.+10     	; 0x18c6 <_ZN7TwoWire5writeEh+0x52>
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	ce 01       	movw	r24, r28
    18c0:	01 96       	adiw	r24, 0x01	; 1
    18c2:	0e 94 29 17 	call	0x2e52	; 0x2e52 <twi_transmit>
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	0f 90       	pop	r0
    18cc:	df 91       	pop	r29
    18ce:	cf 91       	pop	r28
    18d0:	08 95       	ret

000018d2 <_ZN7TwoWireC1Ev>:
    18d2:	fc 01       	movw	r30, r24
    18d4:	13 82       	std	Z+3, r1	; 0x03
    18d6:	12 82       	std	Z+2, r1	; 0x02
    18d8:	48 ee       	ldi	r20, 0xE8	; 232
    18da:	53 e0       	ldi	r21, 0x03	; 3
    18dc:	60 e0       	ldi	r22, 0x00	; 0
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	44 83       	std	Z+4, r20	; 0x04
    18e2:	55 83       	std	Z+5, r21	; 0x05
    18e4:	66 83       	std	Z+6, r22	; 0x06
    18e6:	77 83       	std	Z+7, r23	; 0x07
    18e8:	8e e0       	ldi	r24, 0x0E	; 14
    18ea:	93 e0       	ldi	r25, 0x03	; 3
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	80 83       	st	Z, r24
    18f0:	08 95       	ret

000018f2 <_ZN7TwoWire5beginEv>:
    18f2:	10 92 b7 09 	sts	0x09B7, r1
    18f6:	10 92 b6 09 	sts	0x09B6, r1
    18fa:	10 92 94 09 	sts	0x0994, r1
    18fe:	10 92 93 09 	sts	0x0993, r1
    1902:	0c 94 62 16 	jmp	0x2cc4	; 0x2cc4 <twi_init>

00001906 <_ZN7TwoWire11requestFromEhhh>:
    1906:	86 2f       	mov	r24, r22
    1908:	41 32       	cpi	r20, 0x21	; 33
    190a:	08 f0       	brcs	.+2      	; 0x190e <_ZN7TwoWire11requestFromEhhh+0x8>
    190c:	40 e2       	ldi	r20, 0x20	; 32
    190e:	68 eb       	ldi	r22, 0xB8	; 184
    1910:	79 e0       	ldi	r23, 0x09	; 9
    1912:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <twi_readFrom>
    1916:	10 92 b7 09 	sts	0x09B7, r1
    191a:	80 93 b6 09 	sts	0x09B6, r24
    191e:	08 95       	ret

00001920 <_ZN7TwoWire11requestFromEhh>:
    1920:	21 e0       	ldi	r18, 0x01	; 1
    1922:	f1 cf       	rjmp	.-30     	; 0x1906 <_ZN7TwoWire11requestFromEhhh>

00001924 <_ZN7TwoWire17beginTransmissionEh>:
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	80 93 92 09 	sts	0x0992, r24
    192a:	60 93 b5 09 	sts	0x09B5, r22
    192e:	10 92 94 09 	sts	0x0994, r1
    1932:	10 92 93 09 	sts	0x0993, r1
    1936:	08 95       	ret

00001938 <_ZN7TwoWire15endTransmissionEh>:
    1938:	0f 93       	push	r16
    193a:	06 2f       	mov	r16, r22
    193c:	21 e0       	ldi	r18, 0x01	; 1
    193e:	40 91 93 09 	lds	r20, 0x0993
    1942:	65 e9       	ldi	r22, 0x95	; 149
    1944:	79 e0       	ldi	r23, 0x09	; 9
    1946:	80 91 b5 09 	lds	r24, 0x09B5
    194a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <twi_writeTo>
    194e:	10 92 94 09 	sts	0x0994, r1
    1952:	10 92 93 09 	sts	0x0993, r1
    1956:	10 92 92 09 	sts	0x0992, r1
    195a:	0f 91       	pop	r16
    195c:	08 95       	ret

0000195e <_ZN7TwoWire15endTransmissionEv>:
    195e:	61 e0       	ldi	r22, 0x01	; 1
    1960:	eb cf       	rjmp	.-42     	; 0x1938 <_ZN7TwoWire15endTransmissionEh>

00001962 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1962:	86 e8       	ldi	r24, 0x86	; 134
    1964:	99 e0       	ldi	r25, 0x09	; 9
    1966:	b5 cf       	rjmp	.-150    	; 0x18d2 <_ZN7TwoWireC1Ev>

00001968 <__divsf3>:
    1968:	0c d0       	rcall	.+24     	; 0x1982 <__divsf3x>
    196a:	eb c0       	rjmp	.+470    	; 0x1b42 <__fp_round>
    196c:	e3 d0       	rcall	.+454    	; 0x1b34 <__fp_pscB>
    196e:	40 f0       	brcs	.+16     	; 0x1980 <__divsf3+0x18>
    1970:	da d0       	rcall	.+436    	; 0x1b26 <__fp_pscA>
    1972:	30 f0       	brcs	.+12     	; 0x1980 <__divsf3+0x18>
    1974:	21 f4       	brne	.+8      	; 0x197e <__divsf3+0x16>
    1976:	5f 3f       	cpi	r21, 0xFF	; 255
    1978:	19 f0       	breq	.+6      	; 0x1980 <__divsf3+0x18>
    197a:	cc c0       	rjmp	.+408    	; 0x1b14 <__fp_inf>
    197c:	51 11       	cpse	r21, r1
    197e:	15 c1       	rjmp	.+554    	; 0x1baa <__fp_szero>
    1980:	cf c0       	rjmp	.+414    	; 0x1b20 <__fp_nan>

00001982 <__divsf3x>:
    1982:	f0 d0       	rcall	.+480    	; 0x1b64 <__fp_split3>
    1984:	98 f3       	brcs	.-26     	; 0x196c <__divsf3+0x4>

00001986 <__divsf3_pse>:
    1986:	99 23       	and	r25, r25
    1988:	c9 f3       	breq	.-14     	; 0x197c <__divsf3+0x14>
    198a:	55 23       	and	r21, r21
    198c:	b1 f3       	breq	.-20     	; 0x197a <__divsf3+0x12>
    198e:	95 1b       	sub	r25, r21
    1990:	55 0b       	sbc	r21, r21
    1992:	bb 27       	eor	r27, r27
    1994:	aa 27       	eor	r26, r26
    1996:	62 17       	cp	r22, r18
    1998:	73 07       	cpc	r23, r19
    199a:	84 07       	cpc	r24, r20
    199c:	38 f0       	brcs	.+14     	; 0x19ac <__divsf3_pse+0x26>
    199e:	9f 5f       	subi	r25, 0xFF	; 255
    19a0:	5f 4f       	sbci	r21, 0xFF	; 255
    19a2:	22 0f       	add	r18, r18
    19a4:	33 1f       	adc	r19, r19
    19a6:	44 1f       	adc	r20, r20
    19a8:	aa 1f       	adc	r26, r26
    19aa:	a9 f3       	breq	.-22     	; 0x1996 <__divsf3_pse+0x10>
    19ac:	33 d0       	rcall	.+102    	; 0x1a14 <__divsf3_pse+0x8e>
    19ae:	0e 2e       	mov	r0, r30
    19b0:	3a f0       	brmi	.+14     	; 0x19c0 <__divsf3_pse+0x3a>
    19b2:	e0 e8       	ldi	r30, 0x80	; 128
    19b4:	30 d0       	rcall	.+96     	; 0x1a16 <__divsf3_pse+0x90>
    19b6:	91 50       	subi	r25, 0x01	; 1
    19b8:	50 40       	sbci	r21, 0x00	; 0
    19ba:	e6 95       	lsr	r30
    19bc:	00 1c       	adc	r0, r0
    19be:	ca f7       	brpl	.-14     	; 0x19b2 <__divsf3_pse+0x2c>
    19c0:	29 d0       	rcall	.+82     	; 0x1a14 <__divsf3_pse+0x8e>
    19c2:	fe 2f       	mov	r31, r30
    19c4:	27 d0       	rcall	.+78     	; 0x1a14 <__divsf3_pse+0x8e>
    19c6:	66 0f       	add	r22, r22
    19c8:	77 1f       	adc	r23, r23
    19ca:	88 1f       	adc	r24, r24
    19cc:	bb 1f       	adc	r27, r27
    19ce:	26 17       	cp	r18, r22
    19d0:	37 07       	cpc	r19, r23
    19d2:	48 07       	cpc	r20, r24
    19d4:	ab 07       	cpc	r26, r27
    19d6:	b0 e8       	ldi	r27, 0x80	; 128
    19d8:	09 f0       	breq	.+2      	; 0x19dc <__divsf3_pse+0x56>
    19da:	bb 0b       	sbc	r27, r27
    19dc:	80 2d       	mov	r24, r0
    19de:	bf 01       	movw	r22, r30
    19e0:	ff 27       	eor	r31, r31
    19e2:	93 58       	subi	r25, 0x83	; 131
    19e4:	5f 4f       	sbci	r21, 0xFF	; 255
    19e6:	2a f0       	brmi	.+10     	; 0x19f2 <__divsf3_pse+0x6c>
    19e8:	9e 3f       	cpi	r25, 0xFE	; 254
    19ea:	51 05       	cpc	r21, r1
    19ec:	68 f0       	brcs	.+26     	; 0x1a08 <__divsf3_pse+0x82>
    19ee:	92 c0       	rjmp	.+292    	; 0x1b14 <__fp_inf>
    19f0:	dc c0       	rjmp	.+440    	; 0x1baa <__fp_szero>
    19f2:	5f 3f       	cpi	r21, 0xFF	; 255
    19f4:	ec f3       	brlt	.-6      	; 0x19f0 <__divsf3_pse+0x6a>
    19f6:	98 3e       	cpi	r25, 0xE8	; 232
    19f8:	dc f3       	brlt	.-10     	; 0x19f0 <__divsf3_pse+0x6a>
    19fa:	86 95       	lsr	r24
    19fc:	77 95       	ror	r23
    19fe:	67 95       	ror	r22
    1a00:	b7 95       	ror	r27
    1a02:	f7 95       	ror	r31
    1a04:	9f 5f       	subi	r25, 0xFF	; 255
    1a06:	c9 f7       	brne	.-14     	; 0x19fa <__divsf3_pse+0x74>
    1a08:	88 0f       	add	r24, r24
    1a0a:	91 1d       	adc	r25, r1
    1a0c:	96 95       	lsr	r25
    1a0e:	87 95       	ror	r24
    1a10:	97 f9       	bld	r25, 7
    1a12:	08 95       	ret
    1a14:	e1 e0       	ldi	r30, 0x01	; 1
    1a16:	66 0f       	add	r22, r22
    1a18:	77 1f       	adc	r23, r23
    1a1a:	88 1f       	adc	r24, r24
    1a1c:	bb 1f       	adc	r27, r27
    1a1e:	62 17       	cp	r22, r18
    1a20:	73 07       	cpc	r23, r19
    1a22:	84 07       	cpc	r24, r20
    1a24:	ba 07       	cpc	r27, r26
    1a26:	20 f0       	brcs	.+8      	; 0x1a30 <__divsf3_pse+0xaa>
    1a28:	62 1b       	sub	r22, r18
    1a2a:	73 0b       	sbc	r23, r19
    1a2c:	84 0b       	sbc	r24, r20
    1a2e:	ba 0b       	sbc	r27, r26
    1a30:	ee 1f       	adc	r30, r30
    1a32:	88 f7       	brcc	.-30     	; 0x1a16 <__divsf3_pse+0x90>
    1a34:	e0 95       	com	r30
    1a36:	08 95       	ret

00001a38 <__fixsfsi>:
    1a38:	04 d0       	rcall	.+8      	; 0x1a42 <__fixunssfsi>
    1a3a:	68 94       	set
    1a3c:	b1 11       	cpse	r27, r1
    1a3e:	b5 c0       	rjmp	.+362    	; 0x1baa <__fp_szero>
    1a40:	08 95       	ret

00001a42 <__fixunssfsi>:
    1a42:	98 d0       	rcall	.+304    	; 0x1b74 <__fp_splitA>
    1a44:	88 f0       	brcs	.+34     	; 0x1a68 <__fixunssfsi+0x26>
    1a46:	9f 57       	subi	r25, 0x7F	; 127
    1a48:	90 f0       	brcs	.+36     	; 0x1a6e <__fixunssfsi+0x2c>
    1a4a:	b9 2f       	mov	r27, r25
    1a4c:	99 27       	eor	r25, r25
    1a4e:	b7 51       	subi	r27, 0x17	; 23
    1a50:	a0 f0       	brcs	.+40     	; 0x1a7a <__fixunssfsi+0x38>
    1a52:	d1 f0       	breq	.+52     	; 0x1a88 <__fixunssfsi+0x46>
    1a54:	66 0f       	add	r22, r22
    1a56:	77 1f       	adc	r23, r23
    1a58:	88 1f       	adc	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	1a f0       	brmi	.+6      	; 0x1a64 <__fixunssfsi+0x22>
    1a5e:	ba 95       	dec	r27
    1a60:	c9 f7       	brne	.-14     	; 0x1a54 <__fixunssfsi+0x12>
    1a62:	12 c0       	rjmp	.+36     	; 0x1a88 <__fixunssfsi+0x46>
    1a64:	b1 30       	cpi	r27, 0x01	; 1
    1a66:	81 f0       	breq	.+32     	; 0x1a88 <__fixunssfsi+0x46>
    1a68:	9f d0       	rcall	.+318    	; 0x1ba8 <__fp_zero>
    1a6a:	b1 e0       	ldi	r27, 0x01	; 1
    1a6c:	08 95       	ret
    1a6e:	9c c0       	rjmp	.+312    	; 0x1ba8 <__fp_zero>
    1a70:	67 2f       	mov	r22, r23
    1a72:	78 2f       	mov	r23, r24
    1a74:	88 27       	eor	r24, r24
    1a76:	b8 5f       	subi	r27, 0xF8	; 248
    1a78:	39 f0       	breq	.+14     	; 0x1a88 <__fixunssfsi+0x46>
    1a7a:	b9 3f       	cpi	r27, 0xF9	; 249
    1a7c:	cc f3       	brlt	.-14     	; 0x1a70 <__fixunssfsi+0x2e>
    1a7e:	86 95       	lsr	r24
    1a80:	77 95       	ror	r23
    1a82:	67 95       	ror	r22
    1a84:	b3 95       	inc	r27
    1a86:	d9 f7       	brne	.-10     	; 0x1a7e <__fixunssfsi+0x3c>
    1a88:	3e f4       	brtc	.+14     	; 0x1a98 <__fixunssfsi+0x56>
    1a8a:	90 95       	com	r25
    1a8c:	80 95       	com	r24
    1a8e:	70 95       	com	r23
    1a90:	61 95       	neg	r22
    1a92:	7f 4f       	sbci	r23, 0xFF	; 255
    1a94:	8f 4f       	sbci	r24, 0xFF	; 255
    1a96:	9f 4f       	sbci	r25, 0xFF	; 255
    1a98:	08 95       	ret

00001a9a <__floatunsisf>:
    1a9a:	e8 94       	clt
    1a9c:	09 c0       	rjmp	.+18     	; 0x1ab0 <__floatsisf+0x12>

00001a9e <__floatsisf>:
    1a9e:	97 fb       	bst	r25, 7
    1aa0:	3e f4       	brtc	.+14     	; 0x1ab0 <__floatsisf+0x12>
    1aa2:	90 95       	com	r25
    1aa4:	80 95       	com	r24
    1aa6:	70 95       	com	r23
    1aa8:	61 95       	neg	r22
    1aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    1aac:	8f 4f       	sbci	r24, 0xFF	; 255
    1aae:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab0:	99 23       	and	r25, r25
    1ab2:	a9 f0       	breq	.+42     	; 0x1ade <__floatsisf+0x40>
    1ab4:	f9 2f       	mov	r31, r25
    1ab6:	96 e9       	ldi	r25, 0x96	; 150
    1ab8:	bb 27       	eor	r27, r27
    1aba:	93 95       	inc	r25
    1abc:	f6 95       	lsr	r31
    1abe:	87 95       	ror	r24
    1ac0:	77 95       	ror	r23
    1ac2:	67 95       	ror	r22
    1ac4:	b7 95       	ror	r27
    1ac6:	f1 11       	cpse	r31, r1
    1ac8:	f8 cf       	rjmp	.-16     	; 0x1aba <__floatsisf+0x1c>
    1aca:	fa f4       	brpl	.+62     	; 0x1b0a <__floatsisf+0x6c>
    1acc:	bb 0f       	add	r27, r27
    1ace:	11 f4       	brne	.+4      	; 0x1ad4 <__floatsisf+0x36>
    1ad0:	60 ff       	sbrs	r22, 0
    1ad2:	1b c0       	rjmp	.+54     	; 0x1b0a <__floatsisf+0x6c>
    1ad4:	6f 5f       	subi	r22, 0xFF	; 255
    1ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    1ada:	9f 4f       	sbci	r25, 0xFF	; 255
    1adc:	16 c0       	rjmp	.+44     	; 0x1b0a <__floatsisf+0x6c>
    1ade:	88 23       	and	r24, r24
    1ae0:	11 f0       	breq	.+4      	; 0x1ae6 <__floatsisf+0x48>
    1ae2:	96 e9       	ldi	r25, 0x96	; 150
    1ae4:	11 c0       	rjmp	.+34     	; 0x1b08 <__floatsisf+0x6a>
    1ae6:	77 23       	and	r23, r23
    1ae8:	21 f0       	breq	.+8      	; 0x1af2 <__floatsisf+0x54>
    1aea:	9e e8       	ldi	r25, 0x8E	; 142
    1aec:	87 2f       	mov	r24, r23
    1aee:	76 2f       	mov	r23, r22
    1af0:	05 c0       	rjmp	.+10     	; 0x1afc <__floatsisf+0x5e>
    1af2:	66 23       	and	r22, r22
    1af4:	71 f0       	breq	.+28     	; 0x1b12 <__floatsisf+0x74>
    1af6:	96 e8       	ldi	r25, 0x86	; 134
    1af8:	86 2f       	mov	r24, r22
    1afa:	70 e0       	ldi	r23, 0x00	; 0
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	2a f0       	brmi	.+10     	; 0x1b0a <__floatsisf+0x6c>
    1b00:	9a 95       	dec	r25
    1b02:	66 0f       	add	r22, r22
    1b04:	77 1f       	adc	r23, r23
    1b06:	88 1f       	adc	r24, r24
    1b08:	da f7       	brpl	.-10     	; 0x1b00 <__floatsisf+0x62>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	96 95       	lsr	r25
    1b0e:	87 95       	ror	r24
    1b10:	97 f9       	bld	r25, 7
    1b12:	08 95       	ret

00001b14 <__fp_inf>:
    1b14:	97 f9       	bld	r25, 7
    1b16:	9f 67       	ori	r25, 0x7F	; 127
    1b18:	80 e8       	ldi	r24, 0x80	; 128
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	08 95       	ret

00001b20 <__fp_nan>:
    1b20:	9f ef       	ldi	r25, 0xFF	; 255
    1b22:	80 ec       	ldi	r24, 0xC0	; 192
    1b24:	08 95       	ret

00001b26 <__fp_pscA>:
    1b26:	00 24       	eor	r0, r0
    1b28:	0a 94       	dec	r0
    1b2a:	16 16       	cp	r1, r22
    1b2c:	17 06       	cpc	r1, r23
    1b2e:	18 06       	cpc	r1, r24
    1b30:	09 06       	cpc	r0, r25
    1b32:	08 95       	ret

00001b34 <__fp_pscB>:
    1b34:	00 24       	eor	r0, r0
    1b36:	0a 94       	dec	r0
    1b38:	12 16       	cp	r1, r18
    1b3a:	13 06       	cpc	r1, r19
    1b3c:	14 06       	cpc	r1, r20
    1b3e:	05 06       	cpc	r0, r21
    1b40:	08 95       	ret

00001b42 <__fp_round>:
    1b42:	09 2e       	mov	r0, r25
    1b44:	03 94       	inc	r0
    1b46:	00 0c       	add	r0, r0
    1b48:	11 f4       	brne	.+4      	; 0x1b4e <__fp_round+0xc>
    1b4a:	88 23       	and	r24, r24
    1b4c:	52 f0       	brmi	.+20     	; 0x1b62 <__fp_round+0x20>
    1b4e:	bb 0f       	add	r27, r27
    1b50:	40 f4       	brcc	.+16     	; 0x1b62 <__fp_round+0x20>
    1b52:	bf 2b       	or	r27, r31
    1b54:	11 f4       	brne	.+4      	; 0x1b5a <__fp_round+0x18>
    1b56:	60 ff       	sbrs	r22, 0
    1b58:	04 c0       	rjmp	.+8      	; 0x1b62 <__fp_round+0x20>
    1b5a:	6f 5f       	subi	r22, 0xFF	; 255
    1b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b5e:	8f 4f       	sbci	r24, 0xFF	; 255
    1b60:	9f 4f       	sbci	r25, 0xFF	; 255
    1b62:	08 95       	ret

00001b64 <__fp_split3>:
    1b64:	57 fd       	sbrc	r21, 7
    1b66:	90 58       	subi	r25, 0x80	; 128
    1b68:	44 0f       	add	r20, r20
    1b6a:	55 1f       	adc	r21, r21
    1b6c:	59 f0       	breq	.+22     	; 0x1b84 <__fp_splitA+0x10>
    1b6e:	5f 3f       	cpi	r21, 0xFF	; 255
    1b70:	71 f0       	breq	.+28     	; 0x1b8e <__fp_splitA+0x1a>
    1b72:	47 95       	ror	r20

00001b74 <__fp_splitA>:
    1b74:	88 0f       	add	r24, r24
    1b76:	97 fb       	bst	r25, 7
    1b78:	99 1f       	adc	r25, r25
    1b7a:	61 f0       	breq	.+24     	; 0x1b94 <__fp_splitA+0x20>
    1b7c:	9f 3f       	cpi	r25, 0xFF	; 255
    1b7e:	79 f0       	breq	.+30     	; 0x1b9e <__fp_splitA+0x2a>
    1b80:	87 95       	ror	r24
    1b82:	08 95       	ret
    1b84:	12 16       	cp	r1, r18
    1b86:	13 06       	cpc	r1, r19
    1b88:	14 06       	cpc	r1, r20
    1b8a:	55 1f       	adc	r21, r21
    1b8c:	f2 cf       	rjmp	.-28     	; 0x1b72 <__fp_split3+0xe>
    1b8e:	46 95       	lsr	r20
    1b90:	f1 df       	rcall	.-30     	; 0x1b74 <__fp_splitA>
    1b92:	08 c0       	rjmp	.+16     	; 0x1ba4 <__fp_splitA+0x30>
    1b94:	16 16       	cp	r1, r22
    1b96:	17 06       	cpc	r1, r23
    1b98:	18 06       	cpc	r1, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	f1 cf       	rjmp	.-30     	; 0x1b80 <__fp_splitA+0xc>
    1b9e:	86 95       	lsr	r24
    1ba0:	71 05       	cpc	r23, r1
    1ba2:	61 05       	cpc	r22, r1
    1ba4:	08 94       	sec
    1ba6:	08 95       	ret

00001ba8 <__fp_zero>:
    1ba8:	e8 94       	clt

00001baa <__fp_szero>:
    1baa:	bb 27       	eor	r27, r27
    1bac:	66 27       	eor	r22, r22
    1bae:	77 27       	eor	r23, r23
    1bb0:	cb 01       	movw	r24, r22
    1bb2:	97 f9       	bld	r25, 7
    1bb4:	08 95       	ret

00001bb6 <_ZN14HardwareSerial9availableEv>:
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	84 85       	ldd	r24, Z+12	; 0x0c
    1bba:	95 85       	ldd	r25, Z+13	; 0x0d
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	e0 5c       	subi	r30, 0xC0	; 192
    1bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc2:	20 81       	ld	r18, Z
    1bc4:	31 81       	ldd	r19, Z+1	; 0x01
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	ee 5b       	subi	r30, 0xBE	; 190
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	80 81       	ld	r24, Z
    1bce:	91 81       	ldd	r25, Z+1	; 0x01
    1bd0:	28 1b       	sub	r18, r24
    1bd2:	39 0b       	sbc	r19, r25
    1bd4:	2f 73       	andi	r18, 0x3F	; 63
    1bd6:	33 27       	eor	r19, r19
    1bd8:	82 2f       	mov	r24, r18
    1bda:	93 2f       	mov	r25, r19
    1bdc:	08 95       	ret

00001bde <_ZN14HardwareSerial4peekEv>:
    1bde:	fc 01       	movw	r30, r24
    1be0:	84 85       	ldd	r24, Z+12	; 0x0c
    1be2:	95 85       	ldd	r25, Z+13	; 0x0d
    1be4:	fc 01       	movw	r30, r24
    1be6:	e0 5c       	subi	r30, 0xC0	; 192
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	40 81       	ld	r20, Z
    1bec:	51 81       	ldd	r21, Z+1	; 0x01
    1bee:	fc 01       	movw	r30, r24
    1bf0:	ee 5b       	subi	r30, 0xBE	; 190
    1bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf4:	20 81       	ld	r18, Z
    1bf6:	31 81       	ldd	r19, Z+1	; 0x01
    1bf8:	42 17       	cp	r20, r18
    1bfa:	53 07       	cpc	r21, r19
    1bfc:	59 f0       	breq	.+22     	; 0x1c14 <_ZN14HardwareSerial4peekEv+0x36>
    1bfe:	fc 01       	movw	r30, r24
    1c00:	ee 5b       	subi	r30, 0xBE	; 190
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	20 81       	ld	r18, Z
    1c06:	31 81       	ldd	r19, Z+1	; 0x01
    1c08:	fc 01       	movw	r30, r24
    1c0a:	e2 0f       	add	r30, r18
    1c0c:	f3 1f       	adc	r31, r19
    1c0e:	20 81       	ld	r18, Z
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	02 c0       	rjmp	.+4      	; 0x1c18 <_ZN14HardwareSerial4peekEv+0x3a>
    1c14:	2f ef       	ldi	r18, 0xFF	; 255
    1c16:	3f ef       	ldi	r19, 0xFF	; 255
    1c18:	82 2f       	mov	r24, r18
    1c1a:	93 2f       	mov	r25, r19
    1c1c:	08 95       	ret

00001c1e <_ZN14HardwareSerial4readEv>:
    1c1e:	fc 01       	movw	r30, r24
    1c20:	84 85       	ldd	r24, Z+12	; 0x0c
    1c22:	95 85       	ldd	r25, Z+13	; 0x0d
    1c24:	fc 01       	movw	r30, r24
    1c26:	e0 5c       	subi	r30, 0xC0	; 192
    1c28:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2a:	40 81       	ld	r20, Z
    1c2c:	51 81       	ldd	r21, Z+1	; 0x01
    1c2e:	fc 01       	movw	r30, r24
    1c30:	ee 5b       	subi	r30, 0xBE	; 190
    1c32:	ff 4f       	sbci	r31, 0xFF	; 255
    1c34:	20 81       	ld	r18, Z
    1c36:	31 81       	ldd	r19, Z+1	; 0x01
    1c38:	42 17       	cp	r20, r18
    1c3a:	53 07       	cpc	r21, r19
    1c3c:	91 f0       	breq	.+36     	; 0x1c62 <_ZN14HardwareSerial4readEv+0x44>
    1c3e:	fc 01       	movw	r30, r24
    1c40:	ee 5b       	subi	r30, 0xBE	; 190
    1c42:	ff 4f       	sbci	r31, 0xFF	; 255
    1c44:	20 81       	ld	r18, Z
    1c46:	31 81       	ldd	r19, Z+1	; 0x01
    1c48:	dc 01       	movw	r26, r24
    1c4a:	a2 0f       	add	r26, r18
    1c4c:	b3 1f       	adc	r27, r19
    1c4e:	2c 91       	ld	r18, X
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	01 96       	adiw	r24, 0x01	; 1
    1c56:	8f 73       	andi	r24, 0x3F	; 63
    1c58:	99 27       	eor	r25, r25
    1c5a:	91 83       	std	Z+1, r25	; 0x01
    1c5c:	80 83       	st	Z, r24
    1c5e:	30 e0       	ldi	r19, 0x00	; 0
    1c60:	02 c0       	rjmp	.+4      	; 0x1c66 <_ZN14HardwareSerial4readEv+0x48>
    1c62:	2f ef       	ldi	r18, 0xFF	; 255
    1c64:	3f ef       	ldi	r19, 0xFF	; 255
    1c66:	82 2f       	mov	r24, r18
    1c68:	93 2f       	mov	r25, r19
    1c6a:	08 95       	ret

00001c6c <_ZN14HardwareSerial5flushEv>:
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	81 a1       	ldd	r24, Z+33	; 0x21
    1c70:	88 23       	and	r24, r24
    1c72:	29 f0       	breq	.+10     	; 0x1c7e <_ZN14HardwareSerial5flushEv+0x12>
    1c74:	a4 89       	ldd	r26, Z+20	; 0x14
    1c76:	b5 89       	ldd	r27, Z+21	; 0x15
    1c78:	8c 91       	ld	r24, X
    1c7a:	86 ff       	sbrs	r24, 6
    1c7c:	fb cf       	rjmp	.-10     	; 0x1c74 <_ZN14HardwareSerial5flushEv+0x8>
    1c7e:	11 a2       	std	Z+33, r1	; 0x21
    1c80:	08 95       	ret

00001c82 <_ZN14HardwareSerial5writeEh>:
    1c82:	dc 01       	movw	r26, r24
    1c84:	1e 96       	adiw	r26, 0x0e	; 14
    1c86:	8d 91       	ld	r24, X+
    1c88:	9c 91       	ld	r25, X
    1c8a:	1f 97       	sbiw	r26, 0x0f	; 15
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	e0 5c       	subi	r30, 0xC0	; 192
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	40 81       	ld	r20, Z
    1c94:	51 81       	ldd	r21, Z+1	; 0x01
    1c96:	4f 5f       	subi	r20, 0xFF	; 255
    1c98:	5f 4f       	sbci	r21, 0xFF	; 255
    1c9a:	4f 73       	andi	r20, 0x3F	; 63
    1c9c:	55 27       	eor	r21, r21
    1c9e:	fc 01       	movw	r30, r24
    1ca0:	ee 5b       	subi	r30, 0xBE	; 190
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	20 81       	ld	r18, Z
    1ca6:	31 81       	ldd	r19, Z+1	; 0x01
    1ca8:	24 17       	cp	r18, r20
    1caa:	35 07       	cpc	r19, r21
    1cac:	d9 f3       	breq	.-10     	; 0x1ca4 <_ZN14HardwareSerial5writeEh+0x22>
    1cae:	fc 01       	movw	r30, r24
    1cb0:	e0 5c       	subi	r30, 0xC0	; 192
    1cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb4:	20 81       	ld	r18, Z
    1cb6:	31 81       	ldd	r19, Z+1	; 0x01
    1cb8:	fc 01       	movw	r30, r24
    1cba:	e2 0f       	add	r30, r18
    1cbc:	f3 1f       	adc	r31, r19
    1cbe:	60 83       	st	Z, r22
    1cc0:	1e 96       	adiw	r26, 0x0e	; 14
    1cc2:	ed 91       	ld	r30, X+
    1cc4:	fc 91       	ld	r31, X
    1cc6:	1f 97       	sbiw	r26, 0x0f	; 15
    1cc8:	e0 5c       	subi	r30, 0xC0	; 192
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	51 83       	std	Z+1, r21	; 0x01
    1cce:	40 83       	st	Z, r20
    1cd0:	56 96       	adiw	r26, 0x16	; 22
    1cd2:	ed 91       	ld	r30, X+
    1cd4:	fc 91       	ld	r31, X
    1cd6:	57 97       	sbiw	r26, 0x17	; 23
    1cd8:	40 81       	ld	r20, Z
    1cda:	21 e0       	ldi	r18, 0x01	; 1
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	c9 01       	movw	r24, r18
    1ce0:	5f 96       	adiw	r26, 0x1f	; 31
    1ce2:	0c 90       	ld	r0, X
    1ce4:	5f 97       	sbiw	r26, 0x1f	; 31
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <_ZN14HardwareSerial5writeEh+0x6a>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <_ZN14HardwareSerial5writeEh+0x66>
    1cf0:	84 2b       	or	r24, r20
    1cf2:	80 83       	st	Z, r24
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	91 96       	adiw	r26, 0x21	; 33
    1cf8:	8c 93       	st	X, r24
    1cfa:	91 97       	sbiw	r26, 0x21	; 33
    1cfc:	54 96       	adiw	r26, 0x14	; 20
    1cfe:	ed 91       	ld	r30, X+
    1d00:	fc 91       	ld	r31, X
    1d02:	55 97       	sbiw	r26, 0x15	; 21
    1d04:	80 81       	ld	r24, Z
    1d06:	80 64       	ori	r24, 0x40	; 64
    1d08:	80 83       	st	Z, r24
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	08 95       	ret

00001d10 <__vector_25>:
    1d10:	1f 92       	push	r1
    1d12:	0f 92       	push	r0
    1d14:	0f b6       	in	r0, 0x3f	; 63
    1d16:	0f 92       	push	r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	0b b6       	in	r0, 0x3b	; 59
    1d1c:	0f 92       	push	r0
    1d1e:	2f 93       	push	r18
    1d20:	3f 93       	push	r19
    1d22:	4f 93       	push	r20
    1d24:	8f 93       	push	r24
    1d26:	9f 93       	push	r25
    1d28:	af 93       	push	r26
    1d2a:	bf 93       	push	r27
    1d2c:	ef 93       	push	r30
    1d2e:	ff 93       	push	r31
    1d30:	80 91 c0 00 	lds	r24, 0x00C0
    1d34:	82 fd       	sbrc	r24, 2
    1d36:	1a c0       	rjmp	.+52     	; 0x1d6c <__vector_25+0x5c>
    1d38:	40 91 c6 00 	lds	r20, 0x00C6
    1d3c:	80 91 7c 0c 	lds	r24, 0x0C7C
    1d40:	90 91 7d 0c 	lds	r25, 0x0C7D
    1d44:	01 96       	adiw	r24, 0x01	; 1
    1d46:	8f 73       	andi	r24, 0x3F	; 63
    1d48:	99 27       	eor	r25, r25
    1d4a:	20 91 7e 0c 	lds	r18, 0x0C7E
    1d4e:	30 91 7f 0c 	lds	r19, 0x0C7F
    1d52:	82 17       	cp	r24, r18
    1d54:	93 07       	cpc	r25, r19
    1d56:	61 f0       	breq	.+24     	; 0x1d70 <__vector_25+0x60>
    1d58:	ec e7       	ldi	r30, 0x7C	; 124
    1d5a:	fc e0       	ldi	r31, 0x0C	; 12
    1d5c:	a0 81       	ld	r26, Z
    1d5e:	b1 81       	ldd	r27, Z+1	; 0x01
    1d60:	a4 5c       	subi	r26, 0xC4	; 196
    1d62:	b3 4f       	sbci	r27, 0xF3	; 243
    1d64:	4c 93       	st	X, r20
    1d66:	91 83       	std	Z+1, r25	; 0x01
    1d68:	80 83       	st	Z, r24
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <__vector_25+0x60>
    1d6c:	80 91 c6 00 	lds	r24, 0x00C6
    1d70:	ff 91       	pop	r31
    1d72:	ef 91       	pop	r30
    1d74:	bf 91       	pop	r27
    1d76:	af 91       	pop	r26
    1d78:	9f 91       	pop	r25
    1d7a:	8f 91       	pop	r24
    1d7c:	4f 91       	pop	r20
    1d7e:	3f 91       	pop	r19
    1d80:	2f 91       	pop	r18
    1d82:	0f 90       	pop	r0
    1d84:	0b be       	out	0x3b, r0	; 59
    1d86:	0f 90       	pop	r0
    1d88:	0f be       	out	0x3f, r0	; 63
    1d8a:	0f 90       	pop	r0
    1d8c:	1f 90       	pop	r1
    1d8e:	18 95       	reti

00001d90 <__vector_36>:
    1d90:	1f 92       	push	r1
    1d92:	0f 92       	push	r0
    1d94:	0f b6       	in	r0, 0x3f	; 63
    1d96:	0f 92       	push	r0
    1d98:	11 24       	eor	r1, r1
    1d9a:	0b b6       	in	r0, 0x3b	; 59
    1d9c:	0f 92       	push	r0
    1d9e:	2f 93       	push	r18
    1da0:	3f 93       	push	r19
    1da2:	4f 93       	push	r20
    1da4:	8f 93       	push	r24
    1da6:	9f 93       	push	r25
    1da8:	af 93       	push	r26
    1daa:	bf 93       	push	r27
    1dac:	ef 93       	push	r30
    1dae:	ff 93       	push	r31
    1db0:	80 91 c8 00 	lds	r24, 0x00C8
    1db4:	82 fd       	sbrc	r24, 2
    1db6:	1a c0       	rjmp	.+52     	; 0x1dec <__vector_36+0x5c>
    1db8:	40 91 ce 00 	lds	r20, 0x00CE
    1dbc:	80 91 f4 0b 	lds	r24, 0x0BF4
    1dc0:	90 91 f5 0b 	lds	r25, 0x0BF5
    1dc4:	01 96       	adiw	r24, 0x01	; 1
    1dc6:	8f 73       	andi	r24, 0x3F	; 63
    1dc8:	99 27       	eor	r25, r25
    1dca:	20 91 f6 0b 	lds	r18, 0x0BF6
    1dce:	30 91 f7 0b 	lds	r19, 0x0BF7
    1dd2:	82 17       	cp	r24, r18
    1dd4:	93 07       	cpc	r25, r19
    1dd6:	61 f0       	breq	.+24     	; 0x1df0 <__vector_36+0x60>
    1dd8:	e4 ef       	ldi	r30, 0xF4	; 244
    1dda:	fb e0       	ldi	r31, 0x0B	; 11
    1ddc:	a0 81       	ld	r26, Z
    1dde:	b1 81       	ldd	r27, Z+1	; 0x01
    1de0:	ac 54       	subi	r26, 0x4C	; 76
    1de2:	b4 4f       	sbci	r27, 0xF4	; 244
    1de4:	4c 93       	st	X, r20
    1de6:	91 83       	std	Z+1, r25	; 0x01
    1de8:	80 83       	st	Z, r24
    1dea:	02 c0       	rjmp	.+4      	; 0x1df0 <__vector_36+0x60>
    1dec:	80 91 ce 00 	lds	r24, 0x00CE
    1df0:	ff 91       	pop	r31
    1df2:	ef 91       	pop	r30
    1df4:	bf 91       	pop	r27
    1df6:	af 91       	pop	r26
    1df8:	9f 91       	pop	r25
    1dfa:	8f 91       	pop	r24
    1dfc:	4f 91       	pop	r20
    1dfe:	3f 91       	pop	r19
    1e00:	2f 91       	pop	r18
    1e02:	0f 90       	pop	r0
    1e04:	0b be       	out	0x3b, r0	; 59
    1e06:	0f 90       	pop	r0
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	0f 90       	pop	r0
    1e0c:	1f 90       	pop	r1
    1e0e:	18 95       	reti

00001e10 <__vector_51>:
    1e10:	1f 92       	push	r1
    1e12:	0f 92       	push	r0
    1e14:	0f b6       	in	r0, 0x3f	; 63
    1e16:	0f 92       	push	r0
    1e18:	11 24       	eor	r1, r1
    1e1a:	0b b6       	in	r0, 0x3b	; 59
    1e1c:	0f 92       	push	r0
    1e1e:	2f 93       	push	r18
    1e20:	3f 93       	push	r19
    1e22:	4f 93       	push	r20
    1e24:	8f 93       	push	r24
    1e26:	9f 93       	push	r25
    1e28:	af 93       	push	r26
    1e2a:	bf 93       	push	r27
    1e2c:	ef 93       	push	r30
    1e2e:	ff 93       	push	r31
    1e30:	80 91 d0 00 	lds	r24, 0x00D0
    1e34:	82 fd       	sbrc	r24, 2
    1e36:	1a c0       	rjmp	.+52     	; 0x1e6c <__vector_51+0x5c>
    1e38:	40 91 d6 00 	lds	r20, 0x00D6
    1e3c:	80 91 6c 0b 	lds	r24, 0x0B6C
    1e40:	90 91 6d 0b 	lds	r25, 0x0B6D
    1e44:	01 96       	adiw	r24, 0x01	; 1
    1e46:	8f 73       	andi	r24, 0x3F	; 63
    1e48:	99 27       	eor	r25, r25
    1e4a:	20 91 6e 0b 	lds	r18, 0x0B6E
    1e4e:	30 91 6f 0b 	lds	r19, 0x0B6F
    1e52:	82 17       	cp	r24, r18
    1e54:	93 07       	cpc	r25, r19
    1e56:	61 f0       	breq	.+24     	; 0x1e70 <__vector_51+0x60>
    1e58:	ec e6       	ldi	r30, 0x6C	; 108
    1e5a:	fb e0       	ldi	r31, 0x0B	; 11
    1e5c:	a0 81       	ld	r26, Z
    1e5e:	b1 81       	ldd	r27, Z+1	; 0x01
    1e60:	a4 5d       	subi	r26, 0xD4	; 212
    1e62:	b4 4f       	sbci	r27, 0xF4	; 244
    1e64:	4c 93       	st	X, r20
    1e66:	91 83       	std	Z+1, r25	; 0x01
    1e68:	80 83       	st	Z, r24
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <__vector_51+0x60>
    1e6c:	80 91 d6 00 	lds	r24, 0x00D6
    1e70:	ff 91       	pop	r31
    1e72:	ef 91       	pop	r30
    1e74:	bf 91       	pop	r27
    1e76:	af 91       	pop	r26
    1e78:	9f 91       	pop	r25
    1e7a:	8f 91       	pop	r24
    1e7c:	4f 91       	pop	r20
    1e7e:	3f 91       	pop	r19
    1e80:	2f 91       	pop	r18
    1e82:	0f 90       	pop	r0
    1e84:	0b be       	out	0x3b, r0	; 59
    1e86:	0f 90       	pop	r0
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	0f 90       	pop	r0
    1e8c:	1f 90       	pop	r1
    1e8e:	18 95       	reti

00001e90 <__vector_54>:
    1e90:	1f 92       	push	r1
    1e92:	0f 92       	push	r0
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	0f 92       	push	r0
    1e98:	11 24       	eor	r1, r1
    1e9a:	0b b6       	in	r0, 0x3b	; 59
    1e9c:	0f 92       	push	r0
    1e9e:	2f 93       	push	r18
    1ea0:	3f 93       	push	r19
    1ea2:	4f 93       	push	r20
    1ea4:	8f 93       	push	r24
    1ea6:	9f 93       	push	r25
    1ea8:	af 93       	push	r26
    1eaa:	bf 93       	push	r27
    1eac:	ef 93       	push	r30
    1eae:	ff 93       	push	r31
    1eb0:	80 91 30 01 	lds	r24, 0x0130
    1eb4:	82 fd       	sbrc	r24, 2
    1eb6:	1a c0       	rjmp	.+52     	; 0x1eec <__vector_54+0x5c>
    1eb8:	40 91 36 01 	lds	r20, 0x0136
    1ebc:	80 91 e4 0a 	lds	r24, 0x0AE4
    1ec0:	90 91 e5 0a 	lds	r25, 0x0AE5
    1ec4:	01 96       	adiw	r24, 0x01	; 1
    1ec6:	8f 73       	andi	r24, 0x3F	; 63
    1ec8:	99 27       	eor	r25, r25
    1eca:	20 91 e6 0a 	lds	r18, 0x0AE6
    1ece:	30 91 e7 0a 	lds	r19, 0x0AE7
    1ed2:	82 17       	cp	r24, r18
    1ed4:	93 07       	cpc	r25, r19
    1ed6:	61 f0       	breq	.+24     	; 0x1ef0 <__vector_54+0x60>
    1ed8:	e4 ee       	ldi	r30, 0xE4	; 228
    1eda:	fa e0       	ldi	r31, 0x0A	; 10
    1edc:	a0 81       	ld	r26, Z
    1ede:	b1 81       	ldd	r27, Z+1	; 0x01
    1ee0:	ac 55       	subi	r26, 0x5C	; 92
    1ee2:	b5 4f       	sbci	r27, 0xF5	; 245
    1ee4:	4c 93       	st	X, r20
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
    1eea:	02 c0       	rjmp	.+4      	; 0x1ef0 <__vector_54+0x60>
    1eec:	80 91 36 01 	lds	r24, 0x0136
    1ef0:	ff 91       	pop	r31
    1ef2:	ef 91       	pop	r30
    1ef4:	bf 91       	pop	r27
    1ef6:	af 91       	pop	r26
    1ef8:	9f 91       	pop	r25
    1efa:	8f 91       	pop	r24
    1efc:	4f 91       	pop	r20
    1efe:	3f 91       	pop	r19
    1f00:	2f 91       	pop	r18
    1f02:	0f 90       	pop	r0
    1f04:	0b be       	out	0x3b, r0	; 59
    1f06:	0f 90       	pop	r0
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	0f 90       	pop	r0
    1f0c:	1f 90       	pop	r1
    1f0e:	18 95       	reti

00001f10 <__vector_26>:
    1f10:	1f 92       	push	r1
    1f12:	0f 92       	push	r0
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	0f 92       	push	r0
    1f18:	11 24       	eor	r1, r1
    1f1a:	0b b6       	in	r0, 0x3b	; 59
    1f1c:	0f 92       	push	r0
    1f1e:	2f 93       	push	r18
    1f20:	3f 93       	push	r19
    1f22:	8f 93       	push	r24
    1f24:	9f 93       	push	r25
    1f26:	af 93       	push	r26
    1f28:	bf 93       	push	r27
    1f2a:	ef 93       	push	r30
    1f2c:	ff 93       	push	r31
    1f2e:	20 91 38 0c 	lds	r18, 0x0C38
    1f32:	30 91 39 0c 	lds	r19, 0x0C39
    1f36:	80 91 3a 0c 	lds	r24, 0x0C3A
    1f3a:	90 91 3b 0c 	lds	r25, 0x0C3B
    1f3e:	28 17       	cp	r18, r24
    1f40:	39 07       	cpc	r19, r25
    1f42:	31 f4       	brne	.+12     	; 0x1f50 <__vector_26+0x40>
    1f44:	e1 ec       	ldi	r30, 0xC1	; 193
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	8f 7d       	andi	r24, 0xDF	; 223
    1f4c:	80 83       	st	Z, r24
    1f4e:	10 c0       	rjmp	.+32     	; 0x1f70 <__vector_26+0x60>
    1f50:	ea e3       	ldi	r30, 0x3A	; 58
    1f52:	fc e0       	ldi	r31, 0x0C	; 12
    1f54:	a0 81       	ld	r26, Z
    1f56:	b1 81       	ldd	r27, Z+1	; 0x01
    1f58:	a8 50       	subi	r26, 0x08	; 8
    1f5a:	b4 4f       	sbci	r27, 0xF4	; 244
    1f5c:	2c 91       	ld	r18, X
    1f5e:	80 81       	ld	r24, Z
    1f60:	91 81       	ldd	r25, Z+1	; 0x01
    1f62:	01 96       	adiw	r24, 0x01	; 1
    1f64:	8f 73       	andi	r24, 0x3F	; 63
    1f66:	99 27       	eor	r25, r25
    1f68:	91 83       	std	Z+1, r25	; 0x01
    1f6a:	80 83       	st	Z, r24
    1f6c:	20 93 c6 00 	sts	0x00C6, r18
    1f70:	ff 91       	pop	r31
    1f72:	ef 91       	pop	r30
    1f74:	bf 91       	pop	r27
    1f76:	af 91       	pop	r26
    1f78:	9f 91       	pop	r25
    1f7a:	8f 91       	pop	r24
    1f7c:	3f 91       	pop	r19
    1f7e:	2f 91       	pop	r18
    1f80:	0f 90       	pop	r0
    1f82:	0b be       	out	0x3b, r0	; 59
    1f84:	0f 90       	pop	r0
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	0f 90       	pop	r0
    1f8a:	1f 90       	pop	r1
    1f8c:	18 95       	reti

00001f8e <__vector_37>:
    1f8e:	1f 92       	push	r1
    1f90:	0f 92       	push	r0
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	0f 92       	push	r0
    1f96:	11 24       	eor	r1, r1
    1f98:	0b b6       	in	r0, 0x3b	; 59
    1f9a:	0f 92       	push	r0
    1f9c:	2f 93       	push	r18
    1f9e:	3f 93       	push	r19
    1fa0:	8f 93       	push	r24
    1fa2:	9f 93       	push	r25
    1fa4:	af 93       	push	r26
    1fa6:	bf 93       	push	r27
    1fa8:	ef 93       	push	r30
    1faa:	ff 93       	push	r31
    1fac:	20 91 b0 0b 	lds	r18, 0x0BB0
    1fb0:	30 91 b1 0b 	lds	r19, 0x0BB1
    1fb4:	80 91 b2 0b 	lds	r24, 0x0BB2
    1fb8:	90 91 b3 0b 	lds	r25, 0x0BB3
    1fbc:	28 17       	cp	r18, r24
    1fbe:	39 07       	cpc	r19, r25
    1fc0:	31 f4       	brne	.+12     	; 0x1fce <__vector_37+0x40>
    1fc2:	e9 ec       	ldi	r30, 0xC9	; 201
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	8f 7d       	andi	r24, 0xDF	; 223
    1fca:	80 83       	st	Z, r24
    1fcc:	10 c0       	rjmp	.+32     	; 0x1fee <__vector_37+0x60>
    1fce:	e2 eb       	ldi	r30, 0xB2	; 178
    1fd0:	fb e0       	ldi	r31, 0x0B	; 11
    1fd2:	a0 81       	ld	r26, Z
    1fd4:	b1 81       	ldd	r27, Z+1	; 0x01
    1fd6:	a0 59       	subi	r26, 0x90	; 144
    1fd8:	b4 4f       	sbci	r27, 0xF4	; 244
    1fda:	2c 91       	ld	r18, X
    1fdc:	80 81       	ld	r24, Z
    1fde:	91 81       	ldd	r25, Z+1	; 0x01
    1fe0:	01 96       	adiw	r24, 0x01	; 1
    1fe2:	8f 73       	andi	r24, 0x3F	; 63
    1fe4:	99 27       	eor	r25, r25
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	80 83       	st	Z, r24
    1fea:	20 93 ce 00 	sts	0x00CE, r18
    1fee:	ff 91       	pop	r31
    1ff0:	ef 91       	pop	r30
    1ff2:	bf 91       	pop	r27
    1ff4:	af 91       	pop	r26
    1ff6:	9f 91       	pop	r25
    1ff8:	8f 91       	pop	r24
    1ffa:	3f 91       	pop	r19
    1ffc:	2f 91       	pop	r18
    1ffe:	0f 90       	pop	r0
    2000:	0b be       	out	0x3b, r0	; 59
    2002:	0f 90       	pop	r0
    2004:	0f be       	out	0x3f, r0	; 63
    2006:	0f 90       	pop	r0
    2008:	1f 90       	pop	r1
    200a:	18 95       	reti

0000200c <__vector_52>:
    200c:	1f 92       	push	r1
    200e:	0f 92       	push	r0
    2010:	0f b6       	in	r0, 0x3f	; 63
    2012:	0f 92       	push	r0
    2014:	11 24       	eor	r1, r1
    2016:	0b b6       	in	r0, 0x3b	; 59
    2018:	0f 92       	push	r0
    201a:	2f 93       	push	r18
    201c:	3f 93       	push	r19
    201e:	8f 93       	push	r24
    2020:	9f 93       	push	r25
    2022:	af 93       	push	r26
    2024:	bf 93       	push	r27
    2026:	ef 93       	push	r30
    2028:	ff 93       	push	r31
    202a:	20 91 28 0b 	lds	r18, 0x0B28
    202e:	30 91 29 0b 	lds	r19, 0x0B29
    2032:	80 91 2a 0b 	lds	r24, 0x0B2A
    2036:	90 91 2b 0b 	lds	r25, 0x0B2B
    203a:	28 17       	cp	r18, r24
    203c:	39 07       	cpc	r19, r25
    203e:	31 f4       	brne	.+12     	; 0x204c <__vector_52+0x40>
    2040:	e1 ed       	ldi	r30, 0xD1	; 209
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	8f 7d       	andi	r24, 0xDF	; 223
    2048:	80 83       	st	Z, r24
    204a:	10 c0       	rjmp	.+32     	; 0x206c <__vector_52+0x60>
    204c:	ea e2       	ldi	r30, 0x2A	; 42
    204e:	fb e0       	ldi	r31, 0x0B	; 11
    2050:	a0 81       	ld	r26, Z
    2052:	b1 81       	ldd	r27, Z+1	; 0x01
    2054:	a8 51       	subi	r26, 0x18	; 24
    2056:	b5 4f       	sbci	r27, 0xF5	; 245
    2058:	2c 91       	ld	r18, X
    205a:	80 81       	ld	r24, Z
    205c:	91 81       	ldd	r25, Z+1	; 0x01
    205e:	01 96       	adiw	r24, 0x01	; 1
    2060:	8f 73       	andi	r24, 0x3F	; 63
    2062:	99 27       	eor	r25, r25
    2064:	91 83       	std	Z+1, r25	; 0x01
    2066:	80 83       	st	Z, r24
    2068:	20 93 d6 00 	sts	0x00D6, r18
    206c:	ff 91       	pop	r31
    206e:	ef 91       	pop	r30
    2070:	bf 91       	pop	r27
    2072:	af 91       	pop	r26
    2074:	9f 91       	pop	r25
    2076:	8f 91       	pop	r24
    2078:	3f 91       	pop	r19
    207a:	2f 91       	pop	r18
    207c:	0f 90       	pop	r0
    207e:	0b be       	out	0x3b, r0	; 59
    2080:	0f 90       	pop	r0
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	0f 90       	pop	r0
    2086:	1f 90       	pop	r1
    2088:	18 95       	reti

0000208a <__vector_55>:
    208a:	1f 92       	push	r1
    208c:	0f 92       	push	r0
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	0f 92       	push	r0
    2092:	11 24       	eor	r1, r1
    2094:	0b b6       	in	r0, 0x3b	; 59
    2096:	0f 92       	push	r0
    2098:	2f 93       	push	r18
    209a:	3f 93       	push	r19
    209c:	8f 93       	push	r24
    209e:	9f 93       	push	r25
    20a0:	af 93       	push	r26
    20a2:	bf 93       	push	r27
    20a4:	ef 93       	push	r30
    20a6:	ff 93       	push	r31
    20a8:	20 91 a0 0a 	lds	r18, 0x0AA0
    20ac:	30 91 a1 0a 	lds	r19, 0x0AA1
    20b0:	80 91 a2 0a 	lds	r24, 0x0AA2
    20b4:	90 91 a3 0a 	lds	r25, 0x0AA3
    20b8:	28 17       	cp	r18, r24
    20ba:	39 07       	cpc	r19, r25
    20bc:	31 f4       	brne	.+12     	; 0x20ca <__vector_55+0x40>
    20be:	e1 e3       	ldi	r30, 0x31	; 49
    20c0:	f1 e0       	ldi	r31, 0x01	; 1
    20c2:	80 81       	ld	r24, Z
    20c4:	8f 7d       	andi	r24, 0xDF	; 223
    20c6:	80 83       	st	Z, r24
    20c8:	10 c0       	rjmp	.+32     	; 0x20ea <__vector_55+0x60>
    20ca:	e2 ea       	ldi	r30, 0xA2	; 162
    20cc:	fa e0       	ldi	r31, 0x0A	; 10
    20ce:	a0 81       	ld	r26, Z
    20d0:	b1 81       	ldd	r27, Z+1	; 0x01
    20d2:	a0 5a       	subi	r26, 0xA0	; 160
    20d4:	b5 4f       	sbci	r27, 0xF5	; 245
    20d6:	2c 91       	ld	r18, X
    20d8:	80 81       	ld	r24, Z
    20da:	91 81       	ldd	r25, Z+1	; 0x01
    20dc:	01 96       	adiw	r24, 0x01	; 1
    20de:	8f 73       	andi	r24, 0x3F	; 63
    20e0:	99 27       	eor	r25, r25
    20e2:	91 83       	std	Z+1, r25	; 0x01
    20e4:	80 83       	st	Z, r24
    20e6:	20 93 36 01 	sts	0x0136, r18
    20ea:	ff 91       	pop	r31
    20ec:	ef 91       	pop	r30
    20ee:	bf 91       	pop	r27
    20f0:	af 91       	pop	r26
    20f2:	9f 91       	pop	r25
    20f4:	8f 91       	pop	r24
    20f6:	3f 91       	pop	r19
    20f8:	2f 91       	pop	r18
    20fa:	0f 90       	pop	r0
    20fc:	0b be       	out	0x3b, r0	; 59
    20fe:	0f 90       	pop	r0
    2100:	0f be       	out	0x3f, r0	; 63
    2102:	0f 90       	pop	r0
    2104:	1f 90       	pop	r1
    2106:	18 95       	reti

00002108 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>:
    2108:	8f 92       	push	r8
    210a:	9f 92       	push	r9
    210c:	af 92       	push	r10
    210e:	bf 92       	push	r11
    2110:	cf 92       	push	r12
    2112:	df 92       	push	r13
    2114:	ef 92       	push	r14
    2116:	ff 92       	push	r15
    2118:	0f 93       	push	r16
    211a:	1f 93       	push	r17
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	cd b7       	in	r28, 0x3d	; 61
    2122:	de b7       	in	r29, 0x3e	; 62
    2124:	fc 01       	movw	r30, r24
    2126:	13 82       	std	Z+3, r1	; 0x03
    2128:	12 82       	std	Z+2, r1	; 0x02
    212a:	88 ee       	ldi	r24, 0xE8	; 232
    212c:	93 e0       	ldi	r25, 0x03	; 3
    212e:	a0 e0       	ldi	r26, 0x00	; 0
    2130:	b0 e0       	ldi	r27, 0x00	; 0
    2132:	84 83       	std	Z+4, r24	; 0x04
    2134:	95 83       	std	Z+5, r25	; 0x05
    2136:	a6 83       	std	Z+6, r26	; 0x06
    2138:	b7 83       	std	Z+7, r27	; 0x07
    213a:	8e e1       	ldi	r24, 0x1E	; 30
    213c:	93 e0       	ldi	r25, 0x03	; 3
    213e:	91 83       	std	Z+1, r25	; 0x01
    2140:	80 83       	st	Z, r24
    2142:	75 87       	std	Z+13, r23	; 0x0d
    2144:	64 87       	std	Z+12, r22	; 0x0c
    2146:	57 87       	std	Z+15, r21	; 0x0f
    2148:	46 87       	std	Z+14, r20	; 0x0e
    214a:	31 8b       	std	Z+17, r19	; 0x11
    214c:	20 8b       	std	Z+16, r18	; 0x10
    214e:	13 8b       	std	Z+19, r17	; 0x13
    2150:	02 8b       	std	Z+18, r16	; 0x12
    2152:	f5 8a       	std	Z+21, r15	; 0x15
    2154:	e4 8a       	std	Z+20, r14	; 0x14
    2156:	d7 8a       	std	Z+23, r13	; 0x17
    2158:	c6 8a       	std	Z+22, r12	; 0x16
    215a:	b1 8e       	std	Z+25, r11	; 0x19
    215c:	a0 8e       	std	Z+24, r10	; 0x18
    215e:	93 8e       	std	Z+27, r9	; 0x1b
    2160:	82 8e       	std	Z+26, r8	; 0x1a
    2162:	88 89       	ldd	r24, Y+16	; 0x10
    2164:	84 8f       	std	Z+28, r24	; 0x1c
    2166:	89 89       	ldd	r24, Y+17	; 0x11
    2168:	85 8f       	std	Z+29, r24	; 0x1d
    216a:	8a 89       	ldd	r24, Y+18	; 0x12
    216c:	86 8f       	std	Z+30, r24	; 0x1e
    216e:	8b 89       	ldd	r24, Y+19	; 0x13
    2170:	87 8f       	std	Z+31, r24	; 0x1f
    2172:	8c 89       	ldd	r24, Y+20	; 0x14
    2174:	80 a3       	std	Z+32, r24	; 0x20
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	1f 91       	pop	r17
    217c:	0f 91       	pop	r16
    217e:	ff 90       	pop	r15
    2180:	ef 90       	pop	r14
    2182:	df 90       	pop	r13
    2184:	cf 90       	pop	r12
    2186:	bf 90       	pop	r11
    2188:	af 90       	pop	r10
    218a:	9f 90       	pop	r9
    218c:	8f 90       	pop	r8
    218e:	08 95       	ret

00002190 <_ZN14HardwareSerial5beginEm>:
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	ec 01       	movw	r28, r24
    219e:	6a 01       	movw	r12, r20
    21a0:	7b 01       	movw	r14, r22
    21a2:	41 15       	cp	r20, r1
    21a4:	81 ee       	ldi	r24, 0xE1	; 225
    21a6:	58 07       	cpc	r21, r24
    21a8:	61 05       	cpc	r22, r1
    21aa:	71 05       	cpc	r23, r1
    21ac:	01 f1       	breq	.+64     	; 0x21ee <_ZN14HardwareSerial5beginEm+0x5e>
    21ae:	ec 89       	ldd	r30, Y+20	; 0x14
    21b0:	fd 89       	ldd	r31, Y+21	; 0x15
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	08 a0       	ldd	r0, Y+32	; 0x20
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <_ZN14HardwareSerial5beginEm+0x2e>
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	0a 94       	dec	r0
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <_ZN14HardwareSerial5beginEm+0x2a>
    21c2:	80 83       	st	Z, r24
    21c4:	60 e0       	ldi	r22, 0x00	; 0
    21c6:	79 e0       	ldi	r23, 0x09	; 9
    21c8:	8d e3       	ldi	r24, 0x3D	; 61
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	a7 01       	movw	r20, r14
    21ce:	96 01       	movw	r18, r12
    21d0:	8b d7       	rcall	.+3862   	; 0x30e8 <__udivmodsi4>
    21d2:	da 01       	movw	r26, r20
    21d4:	c9 01       	movw	r24, r18
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	a1 09       	sbc	r26, r1
    21da:	b1 09       	sbc	r27, r1
    21dc:	b6 95       	lsr	r27
    21de:	a7 95       	ror	r26
    21e0:	97 95       	ror	r25
    21e2:	87 95       	ror	r24
    21e4:	9c 01       	movw	r18, r24
    21e6:	21 15       	cp	r18, r1
    21e8:	80 e1       	ldi	r24, 0x10	; 16
    21ea:	38 07       	cpc	r19, r24
    21ec:	a0 f0       	brcs	.+40     	; 0x2216 <__stack+0x17>
    21ee:	ec 89       	ldd	r30, Y+20	; 0x14
    21f0:	fd 89       	ldd	r31, Y+21	; 0x15
    21f2:	10 82       	st	Z, r1
    21f4:	60 e8       	ldi	r22, 0x80	; 128
    21f6:	74 e8       	ldi	r23, 0x84	; 132
    21f8:	8e e1       	ldi	r24, 0x1E	; 30
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	a7 01       	movw	r20, r14
    21fe:	96 01       	movw	r18, r12
    2200:	73 d7       	rcall	.+3814   	; 0x30e8 <__udivmodsi4>
    2202:	da 01       	movw	r26, r20
    2204:	c9 01       	movw	r24, r18
    2206:	01 97       	sbiw	r24, 0x01	; 1
    2208:	a1 09       	sbc	r26, r1
    220a:	b1 09       	sbc	r27, r1
    220c:	b6 95       	lsr	r27
    220e:	a7 95       	ror	r26
    2210:	97 95       	ror	r25
    2212:	87 95       	ror	r24
    2214:	9c 01       	movw	r18, r24
    2216:	e8 89       	ldd	r30, Y+16	; 0x10
    2218:	f9 89       	ldd	r31, Y+17	; 0x11
    221a:	30 83       	st	Z, r19
    221c:	ea 89       	ldd	r30, Y+18	; 0x12
    221e:	fb 89       	ldd	r31, Y+19	; 0x13
    2220:	20 83       	st	Z, r18
    2222:	19 a2       	std	Y+33, r1	; 0x21
    2224:	ee 89       	ldd	r30, Y+22	; 0x16
    2226:	ff 89       	ldd	r31, Y+23	; 0x17
    2228:	40 81       	ld	r20, Z
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	9c 01       	movw	r18, r24
    2230:	0c 8c       	ldd	r0, Y+28	; 0x1c
    2232:	02 c0       	rjmp	.+4      	; 0x2238 <__stack+0x39>
    2234:	22 0f       	add	r18, r18
    2236:	33 1f       	adc	r19, r19
    2238:	0a 94       	dec	r0
    223a:	e2 f7       	brpl	.-8      	; 0x2234 <__stack+0x35>
    223c:	24 2b       	or	r18, r20
    223e:	20 83       	st	Z, r18
    2240:	ee 89       	ldd	r30, Y+22	; 0x16
    2242:	ff 89       	ldd	r31, Y+23	; 0x17
    2244:	40 81       	ld	r20, Z
    2246:	9c 01       	movw	r18, r24
    2248:	0d 8c       	ldd	r0, Y+29	; 0x1d
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <__stack+0x51>
    224c:	22 0f       	add	r18, r18
    224e:	33 1f       	adc	r19, r19
    2250:	0a 94       	dec	r0
    2252:	e2 f7       	brpl	.-8      	; 0x224c <__stack+0x4d>
    2254:	24 2b       	or	r18, r20
    2256:	20 83       	st	Z, r18
    2258:	ee 89       	ldd	r30, Y+22	; 0x16
    225a:	ff 89       	ldd	r31, Y+23	; 0x17
    225c:	40 81       	ld	r20, Z
    225e:	9c 01       	movw	r18, r24
    2260:	0e 8c       	ldd	r0, Y+30	; 0x1e
    2262:	02 c0       	rjmp	.+4      	; 0x2268 <__stack+0x69>
    2264:	22 0f       	add	r18, r18
    2266:	33 1f       	adc	r19, r19
    2268:	0a 94       	dec	r0
    226a:	e2 f7       	brpl	.-8      	; 0x2264 <__stack+0x65>
    226c:	24 2b       	or	r18, r20
    226e:	20 83       	st	Z, r18
    2270:	ee 89       	ldd	r30, Y+22	; 0x16
    2272:	ff 89       	ldd	r31, Y+23	; 0x17
    2274:	20 81       	ld	r18, Z
    2276:	0f 8c       	ldd	r0, Y+31	; 0x1f
    2278:	02 c0       	rjmp	.+4      	; 0x227e <__stack+0x7f>
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	0a 94       	dec	r0
    2280:	e2 f7       	brpl	.-8      	; 0x227a <__stack+0x7b>
    2282:	80 95       	com	r24
    2284:	82 23       	and	r24, r18
    2286:	80 83       	st	Z, r24
    2288:	df 91       	pop	r29
    228a:	cf 91       	pop	r28
    228c:	ff 90       	pop	r15
    228e:	ef 90       	pop	r14
    2290:	df 90       	pop	r13
    2292:	cf 90       	pop	r12
    2294:	08 95       	ret

00002296 <_GLOBAL__sub_I_rx_buffer>:
    2296:	5f 92       	push	r5
    2298:	6f 92       	push	r6
    229a:	7f 92       	push	r7
    229c:	8f 92       	push	r8
    229e:	9f 92       	push	r9
    22a0:	af 92       	push	r10
    22a2:	bf 92       	push	r11
    22a4:	cf 92       	push	r12
    22a6:	df 92       	push	r13
    22a8:	ef 92       	push	r14
    22aa:	ff 92       	push	r15
    22ac:	0f 93       	push	r16
    22ae:	1f 93       	push	r17
    22b0:	cf 93       	push	r28
    22b2:	df 93       	push	r29
    22b4:	55 24       	eor	r5, r5
    22b6:	53 94       	inc	r5
    22b8:	5f 92       	push	r5
    22ba:	0f 2e       	mov	r0, r31
    22bc:	f5 e0       	ldi	r31, 0x05	; 5
    22be:	6f 2e       	mov	r6, r31
    22c0:	f0 2d       	mov	r31, r0
    22c2:	6f 92       	push	r6
    22c4:	0f 2e       	mov	r0, r31
    22c6:	f7 e0       	ldi	r31, 0x07	; 7
    22c8:	7f 2e       	mov	r7, r31
    22ca:	f0 2d       	mov	r31, r0
    22cc:	7f 92       	push	r7
    22ce:	d3 e0       	ldi	r29, 0x03	; 3
    22d0:	df 93       	push	r29
    22d2:	c4 e0       	ldi	r28, 0x04	; 4
    22d4:	cf 93       	push	r28
    22d6:	0f 2e       	mov	r0, r31
    22d8:	f6 ec       	ldi	r31, 0xC6	; 198
    22da:	8f 2e       	mov	r8, r31
    22dc:	91 2c       	mov	r9, r1
    22de:	f0 2d       	mov	r31, r0
    22e0:	0f 2e       	mov	r0, r31
    22e2:	f2 ec       	ldi	r31, 0xC2	; 194
    22e4:	af 2e       	mov	r10, r31
    22e6:	b1 2c       	mov	r11, r1
    22e8:	f0 2d       	mov	r31, r0
    22ea:	0f 2e       	mov	r0, r31
    22ec:	f1 ec       	ldi	r31, 0xC1	; 193
    22ee:	cf 2e       	mov	r12, r31
    22f0:	d1 2c       	mov	r13, r1
    22f2:	f0 2d       	mov	r31, r0
    22f4:	0f 2e       	mov	r0, r31
    22f6:	f0 ec       	ldi	r31, 0xC0	; 192
    22f8:	ef 2e       	mov	r14, r31
    22fa:	f1 2c       	mov	r15, r1
    22fc:	f0 2d       	mov	r31, r0
    22fe:	04 ec       	ldi	r16, 0xC4	; 196
    2300:	10 e0       	ldi	r17, 0x00	; 0
    2302:	25 ec       	ldi	r18, 0xC5	; 197
    2304:	30 e0       	ldi	r19, 0x00	; 0
    2306:	48 ef       	ldi	r20, 0xF8	; 248
    2308:	5b e0       	ldi	r21, 0x0B	; 11
    230a:	6c e3       	ldi	r22, 0x3C	; 60
    230c:	7c e0       	ldi	r23, 0x0C	; 12
    230e:	8e e3       	ldi	r24, 0x3E	; 62
    2310:	9a e0       	ldi	r25, 0x0A	; 10
    2312:	fa de       	rcall	.-524    	; 0x2108 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    2314:	5f 92       	push	r5
    2316:	6f 92       	push	r6
    2318:	7f 92       	push	r7
    231a:	df 93       	push	r29
    231c:	cf 93       	push	r28
    231e:	0f 2e       	mov	r0, r31
    2320:	fe ec       	ldi	r31, 0xCE	; 206
    2322:	8f 2e       	mov	r8, r31
    2324:	91 2c       	mov	r9, r1
    2326:	f0 2d       	mov	r31, r0
    2328:	0f 2e       	mov	r0, r31
    232a:	fa ec       	ldi	r31, 0xCA	; 202
    232c:	af 2e       	mov	r10, r31
    232e:	b1 2c       	mov	r11, r1
    2330:	f0 2d       	mov	r31, r0
    2332:	0f 2e       	mov	r0, r31
    2334:	f9 ec       	ldi	r31, 0xC9	; 201
    2336:	cf 2e       	mov	r12, r31
    2338:	d1 2c       	mov	r13, r1
    233a:	f0 2d       	mov	r31, r0
    233c:	0f 2e       	mov	r0, r31
    233e:	f8 ec       	ldi	r31, 0xC8	; 200
    2340:	ef 2e       	mov	r14, r31
    2342:	f1 2c       	mov	r15, r1
    2344:	f0 2d       	mov	r31, r0
    2346:	0c ec       	ldi	r16, 0xCC	; 204
    2348:	10 e0       	ldi	r17, 0x00	; 0
    234a:	2d ec       	ldi	r18, 0xCD	; 205
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e7       	ldi	r20, 0x70	; 112
    2350:	5b e0       	ldi	r21, 0x0B	; 11
    2352:	64 eb       	ldi	r22, 0xB4	; 180
    2354:	7b e0       	ldi	r23, 0x0B	; 11
    2356:	8c e1       	ldi	r24, 0x1C	; 28
    2358:	9a e0       	ldi	r25, 0x0A	; 10
    235a:	d6 de       	rcall	.-596    	; 0x2108 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    235c:	5f 92       	push	r5
    235e:	6f 92       	push	r6
    2360:	7f 92       	push	r7
    2362:	df 93       	push	r29
    2364:	cf 93       	push	r28
    2366:	0f 2e       	mov	r0, r31
    2368:	f6 ed       	ldi	r31, 0xD6	; 214
    236a:	8f 2e       	mov	r8, r31
    236c:	91 2c       	mov	r9, r1
    236e:	f0 2d       	mov	r31, r0
    2370:	0f 2e       	mov	r0, r31
    2372:	f2 ed       	ldi	r31, 0xD2	; 210
    2374:	af 2e       	mov	r10, r31
    2376:	b1 2c       	mov	r11, r1
    2378:	f0 2d       	mov	r31, r0
    237a:	0f 2e       	mov	r0, r31
    237c:	f1 ed       	ldi	r31, 0xD1	; 209
    237e:	cf 2e       	mov	r12, r31
    2380:	d1 2c       	mov	r13, r1
    2382:	f0 2d       	mov	r31, r0
    2384:	0f 2e       	mov	r0, r31
    2386:	f0 ed       	ldi	r31, 0xD0	; 208
    2388:	ef 2e       	mov	r14, r31
    238a:	f1 2c       	mov	r15, r1
    238c:	f0 2d       	mov	r31, r0
    238e:	04 ed       	ldi	r16, 0xD4	; 212
    2390:	10 e0       	ldi	r17, 0x00	; 0
    2392:	25 ed       	ldi	r18, 0xD5	; 213
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	48 ee       	ldi	r20, 0xE8	; 232
    2398:	5a e0       	ldi	r21, 0x0A	; 10
    239a:	6c e2       	ldi	r22, 0x2C	; 44
    239c:	7b e0       	ldi	r23, 0x0B	; 11
    239e:	8a ef       	ldi	r24, 0xFA	; 250
    23a0:	99 e0       	ldi	r25, 0x09	; 9
    23a2:	b2 de       	rcall	.-668    	; 0x2108 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    23a4:	5f 92       	push	r5
    23a6:	6f 92       	push	r6
    23a8:	7f 92       	push	r7
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	0f 2e       	mov	r0, r31
    23b0:	f6 e3       	ldi	r31, 0x36	; 54
    23b2:	8f 2e       	mov	r8, r31
    23b4:	99 24       	eor	r9, r9
    23b6:	93 94       	inc	r9
    23b8:	f0 2d       	mov	r31, r0
    23ba:	0f 2e       	mov	r0, r31
    23bc:	f2 e3       	ldi	r31, 0x32	; 50
    23be:	af 2e       	mov	r10, r31
    23c0:	bb 24       	eor	r11, r11
    23c2:	b3 94       	inc	r11
    23c4:	f0 2d       	mov	r31, r0
    23c6:	0f 2e       	mov	r0, r31
    23c8:	f1 e3       	ldi	r31, 0x31	; 49
    23ca:	cf 2e       	mov	r12, r31
    23cc:	dd 24       	eor	r13, r13
    23ce:	d3 94       	inc	r13
    23d0:	f0 2d       	mov	r31, r0
    23d2:	0f 2e       	mov	r0, r31
    23d4:	f0 e3       	ldi	r31, 0x30	; 48
    23d6:	ef 2e       	mov	r14, r31
    23d8:	ff 24       	eor	r15, r15
    23da:	f3 94       	inc	r15
    23dc:	f0 2d       	mov	r31, r0
    23de:	04 e3       	ldi	r16, 0x34	; 52
    23e0:	11 e0       	ldi	r17, 0x01	; 1
    23e2:	25 e3       	ldi	r18, 0x35	; 53
    23e4:	31 e0       	ldi	r19, 0x01	; 1
    23e6:	40 e6       	ldi	r20, 0x60	; 96
    23e8:	5a e0       	ldi	r21, 0x0A	; 10
    23ea:	64 ea       	ldi	r22, 0xA4	; 164
    23ec:	7a e0       	ldi	r23, 0x0A	; 10
    23ee:	88 ed       	ldi	r24, 0xD8	; 216
    23f0:	99 e0       	ldi	r25, 0x09	; 9
    23f2:	8a de       	rcall	.-748    	; 0x2108 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_S3_hhhhh>
    23f4:	8d b7       	in	r24, 0x3d	; 61
    23f6:	9e b7       	in	r25, 0x3e	; 62
    23f8:	44 96       	adiw	r24, 0x14	; 20
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	9e bf       	out	0x3e, r25	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	8d bf       	out	0x3d, r24	; 61
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	ef 90       	pop	r14
    2410:	df 90       	pop	r13
    2412:	cf 90       	pop	r12
    2414:	bf 90       	pop	r11
    2416:	af 90       	pop	r10
    2418:	9f 90       	pop	r9
    241a:	8f 90       	pop	r8
    241c:	7f 90       	pop	r7
    241e:	6f 90       	pop	r6
    2420:	5f 90       	pop	r5
    2422:	08 95       	ret

00002424 <_ZN5Print5writeEPKhj>:
    2424:	cf 92       	push	r12
    2426:	df 92       	push	r13
    2428:	ef 92       	push	r14
    242a:	ff 92       	push	r15
    242c:	0f 93       	push	r16
    242e:	1f 93       	push	r17
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29
    2434:	7c 01       	movw	r14, r24
    2436:	6b 01       	movw	r12, r22
    2438:	ea 01       	movw	r28, r20
    243a:	20 97       	sbiw	r28, 0x00	; 0
    243c:	91 f0       	breq	.+36     	; 0x2462 <_ZN5Print5writeEPKhj+0x3e>
    243e:	00 e0       	ldi	r16, 0x00	; 0
    2440:	10 e0       	ldi	r17, 0x00	; 0
    2442:	d6 01       	movw	r26, r12
    2444:	6d 91       	ld	r22, X+
    2446:	6d 01       	movw	r12, r26
    2448:	d7 01       	movw	r26, r14
    244a:	ed 91       	ld	r30, X+
    244c:	fc 91       	ld	r31, X
    244e:	01 90       	ld	r0, Z+
    2450:	f0 81       	ld	r31, Z
    2452:	e0 2d       	mov	r30, r0
    2454:	c7 01       	movw	r24, r14
    2456:	19 95       	eicall
    2458:	08 0f       	add	r16, r24
    245a:	19 1f       	adc	r17, r25
    245c:	21 97       	sbiw	r28, 0x01	; 1
    245e:	89 f7       	brne	.-30     	; 0x2442 <_ZN5Print5writeEPKhj+0x1e>
    2460:	02 c0       	rjmp	.+4      	; 0x2466 <_ZN5Print5writeEPKhj+0x42>
    2462:	00 e0       	ldi	r16, 0x00	; 0
    2464:	10 e0       	ldi	r17, 0x00	; 0
    2466:	80 2f       	mov	r24, r16
    2468:	91 2f       	mov	r25, r17
    246a:	df 91       	pop	r29
    246c:	cf 91       	pop	r28
    246e:	1f 91       	pop	r17
    2470:	0f 91       	pop	r16
    2472:	ff 90       	pop	r15
    2474:	ef 90       	pop	r14
    2476:	df 90       	pop	r13
    2478:	cf 90       	pop	r12
    247a:	08 95       	ret

0000247c <_ZN5Print5printEPKc>:
    247c:	61 15       	cp	r22, r1
    247e:	71 05       	cpc	r23, r1
    2480:	99 f0       	breq	.+38     	; 0x24a8 <_ZN5Print5printEPKc+0x2c>
    2482:	e6 2f       	mov	r30, r22
    2484:	f7 2f       	mov	r31, r23
    2486:	df 01       	movw	r26, r30
    2488:	0d 90       	ld	r0, X+
    248a:	00 20       	and	r0, r0
    248c:	e9 f7       	brne	.-6      	; 0x2488 <_ZN5Print5printEPKc+0xc>
    248e:	11 97       	sbiw	r26, 0x01	; 1
    2490:	ad 01       	movw	r20, r26
    2492:	4e 1b       	sub	r20, r30
    2494:	5f 0b       	sbc	r21, r31
    2496:	dc 01       	movw	r26, r24
    2498:	ed 91       	ld	r30, X+
    249a:	fc 91       	ld	r31, X
    249c:	02 80       	ldd	r0, Z+2	; 0x02
    249e:	f3 81       	ldd	r31, Z+3	; 0x03
    24a0:	e0 2d       	mov	r30, r0
    24a2:	19 95       	eicall
    24a4:	9c 01       	movw	r18, r24
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <_ZN5Print5printEPKc+0x30>
    24a8:	20 e0       	ldi	r18, 0x00	; 0
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	82 2f       	mov	r24, r18
    24ae:	93 2f       	mov	r25, r19
    24b0:	08 95       	ret

000024b2 <_ZN5Print5printEc>:
    24b2:	dc 01       	movw	r26, r24
    24b4:	ed 91       	ld	r30, X+
    24b6:	fc 91       	ld	r31, X
    24b8:	01 90       	ld	r0, Z+
    24ba:	f0 81       	ld	r31, Z
    24bc:	e0 2d       	mov	r30, r0
    24be:	19 95       	eicall
    24c0:	08 95       	ret

000024c2 <_ZN5Print7printlnEv>:
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	ec 01       	movw	r28, r24
    24cc:	6d e0       	ldi	r22, 0x0D	; 13
    24ce:	f1 df       	rcall	.-30     	; 0x24b2 <_ZN5Print5printEc>
    24d0:	8c 01       	movw	r16, r24
    24d2:	6a e0       	ldi	r22, 0x0A	; 10
    24d4:	ce 01       	movw	r24, r28
    24d6:	ed df       	rcall	.-38     	; 0x24b2 <_ZN5Print5printEc>
    24d8:	9c 01       	movw	r18, r24
    24da:	20 0f       	add	r18, r16
    24dc:	31 1f       	adc	r19, r17
    24de:	82 2f       	mov	r24, r18
    24e0:	93 2f       	mov	r25, r19
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	1f 91       	pop	r17
    24e8:	0f 91       	pop	r16
    24ea:	08 95       	ret

000024ec <_ZN5Print7printlnEPKc>:
    24ec:	0f 93       	push	r16
    24ee:	1f 93       	push	r17
    24f0:	cf 93       	push	r28
    24f2:	df 93       	push	r29
    24f4:	ec 01       	movw	r28, r24
    24f6:	c2 df       	rcall	.-124    	; 0x247c <_ZN5Print5printEPKc>
    24f8:	8c 01       	movw	r16, r24
    24fa:	ce 01       	movw	r24, r28
    24fc:	e2 df       	rcall	.-60     	; 0x24c2 <_ZN5Print7printlnEv>
    24fe:	9c 01       	movw	r18, r24
    2500:	20 0f       	add	r18, r16
    2502:	31 1f       	adc	r19, r17
    2504:	82 2f       	mov	r24, r18
    2506:	93 2f       	mov	r25, r19
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	1f 91       	pop	r17
    250e:	0f 91       	pop	r16
    2510:	08 95       	ret

00002512 <_ZN5Print11printNumberEmh>:
    2512:	4f 92       	push	r4
    2514:	5f 92       	push	r5
    2516:	6f 92       	push	r6
    2518:	7f 92       	push	r7
    251a:	9f 92       	push	r9
    251c:	af 92       	push	r10
    251e:	bf 92       	push	r11
    2520:	cf 92       	push	r12
    2522:	df 92       	push	r13
    2524:	ef 92       	push	r14
    2526:	ff 92       	push	r15
    2528:	0f 93       	push	r16
    252a:	1f 93       	push	r17
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	a1 97       	sbiw	r28, 0x21	; 33
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	5c 01       	movw	r10, r24
    2542:	6a 01       	movw	r12, r20
    2544:	7b 01       	movw	r14, r22
    2546:	92 2e       	mov	r9, r18
    2548:	19 a2       	std	Y+33, r1	; 0x21
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	82 17       	cp	r24, r18
    254e:	20 f0       	brcs	.+8      	; 0x2558 <_ZN5Print11printNumberEmh+0x46>
    2550:	0f 2e       	mov	r0, r31
    2552:	fa e0       	ldi	r31, 0x0A	; 10
    2554:	9f 2e       	mov	r9, r31
    2556:	f0 2d       	mov	r31, r0
    2558:	8e 01       	movw	r16, r28
    255a:	0f 5d       	subi	r16, 0xDF	; 223
    255c:	1f 4f       	sbci	r17, 0xFF	; 255
    255e:	49 2c       	mov	r4, r9
    2560:	51 2c       	mov	r5, r1
    2562:	61 2c       	mov	r6, r1
    2564:	71 2c       	mov	r7, r1
    2566:	c7 01       	movw	r24, r14
    2568:	b6 01       	movw	r22, r12
    256a:	a3 01       	movw	r20, r6
    256c:	92 01       	movw	r18, r4
    256e:	bc d5       	rcall	.+2936   	; 0x30e8 <__udivmodsi4>
    2570:	8c 2d       	mov	r24, r12
    2572:	92 9e       	mul	r9, r18
    2574:	80 19       	sub	r24, r0
    2576:	11 24       	eor	r1, r1
    2578:	01 50       	subi	r16, 0x01	; 1
    257a:	11 09       	sbc	r17, r1
    257c:	8a 30       	cpi	r24, 0x0A	; 10
    257e:	10 f4       	brcc	.+4      	; 0x2584 <_ZN5Print11printNumberEmh+0x72>
    2580:	80 5d       	subi	r24, 0xD0	; 208
    2582:	01 c0       	rjmp	.+2      	; 0x2586 <_ZN5Print11printNumberEmh+0x74>
    2584:	89 5c       	subi	r24, 0xC9	; 201
    2586:	d8 01       	movw	r26, r16
    2588:	8c 93       	st	X, r24
    258a:	c2 2e       	mov	r12, r18
    258c:	d3 2e       	mov	r13, r19
    258e:	e4 2e       	mov	r14, r20
    2590:	f5 2e       	mov	r15, r21
    2592:	c1 14       	cp	r12, r1
    2594:	d1 04       	cpc	r13, r1
    2596:	e1 04       	cpc	r14, r1
    2598:	f1 04       	cpc	r15, r1
    259a:	29 f7       	brne	.-54     	; 0x2566 <_ZN5Print11printNumberEmh+0x54>
    259c:	01 15       	cp	r16, r1
    259e:	11 05       	cpc	r17, r1
    25a0:	a9 f0       	breq	.+42     	; 0x25cc <_ZN5Print11printNumberEmh+0xba>
    25a2:	e0 2f       	mov	r30, r16
    25a4:	f1 2f       	mov	r31, r17
    25a6:	df 01       	movw	r26, r30
    25a8:	0d 90       	ld	r0, X+
    25aa:	00 20       	and	r0, r0
    25ac:	e9 f7       	brne	.-6      	; 0x25a8 <_ZN5Print11printNumberEmh+0x96>
    25ae:	11 97       	sbiw	r26, 0x01	; 1
    25b0:	ad 01       	movw	r20, r26
    25b2:	4e 1b       	sub	r20, r30
    25b4:	5f 0b       	sbc	r21, r31
    25b6:	d5 01       	movw	r26, r10
    25b8:	ed 91       	ld	r30, X+
    25ba:	fc 91       	ld	r31, X
    25bc:	02 80       	ldd	r0, Z+2	; 0x02
    25be:	f3 81       	ldd	r31, Z+3	; 0x03
    25c0:	e0 2d       	mov	r30, r0
    25c2:	b8 01       	movw	r22, r16
    25c4:	c5 01       	movw	r24, r10
    25c6:	19 95       	eicall
    25c8:	9c 01       	movw	r18, r24
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <_ZN5Print11printNumberEmh+0xbe>
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	82 2f       	mov	r24, r18
    25d2:	93 2f       	mov	r25, r19
    25d4:	a1 96       	adiw	r28, 0x21	; 33
    25d6:	0f b6       	in	r0, 0x3f	; 63
    25d8:	f8 94       	cli
    25da:	de bf       	out	0x3e, r29	; 62
    25dc:	0f be       	out	0x3f, r0	; 63
    25de:	cd bf       	out	0x3d, r28	; 61
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	1f 91       	pop	r17
    25e6:	0f 91       	pop	r16
    25e8:	ff 90       	pop	r15
    25ea:	ef 90       	pop	r14
    25ec:	df 90       	pop	r13
    25ee:	cf 90       	pop	r12
    25f0:	bf 90       	pop	r11
    25f2:	af 90       	pop	r10
    25f4:	9f 90       	pop	r9
    25f6:	7f 90       	pop	r7
    25f8:	6f 90       	pop	r6
    25fa:	5f 90       	pop	r5
    25fc:	4f 90       	pop	r4
    25fe:	08 95       	ret

00002600 <_ZN5Print5printEli>:
    2600:	cf 92       	push	r12
    2602:	df 92       	push	r13
    2604:	ef 92       	push	r14
    2606:	ff 92       	push	r15
    2608:	0f 93       	push	r16
    260a:	1f 93       	push	r17
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	ec 01       	movw	r28, r24
    2612:	6a 01       	movw	r12, r20
    2614:	7b 01       	movw	r14, r22
    2616:	21 15       	cp	r18, r1
    2618:	31 05       	cpc	r19, r1
    261a:	49 f4       	brne	.+18     	; 0x262e <_ZN5Print5printEli+0x2e>
    261c:	e8 81       	ld	r30, Y
    261e:	f9 81       	ldd	r31, Y+1	; 0x01
    2620:	01 90       	ld	r0, Z+
    2622:	f0 81       	ld	r31, Z
    2624:	e0 2d       	mov	r30, r0
    2626:	64 2f       	mov	r22, r20
    2628:	19 95       	eicall
    262a:	8c 01       	movw	r16, r24
    262c:	1b c0       	rjmp	.+54     	; 0x2664 <_ZN5Print5printEli+0x64>
    262e:	2a 30       	cpi	r18, 0x0A	; 10
    2630:	31 05       	cpc	r19, r1
    2632:	b1 f4       	brne	.+44     	; 0x2660 <_ZN5Print5printEli+0x60>
    2634:	77 23       	and	r23, r23
    2636:	84 f4       	brge	.+32     	; 0x2658 <_ZN5Print5printEli+0x58>
    2638:	6d e2       	ldi	r22, 0x2D	; 45
    263a:	3b df       	rcall	.-394    	; 0x24b2 <_ZN5Print5printEc>
    263c:	8c 01       	movw	r16, r24
    263e:	44 27       	eor	r20, r20
    2640:	55 27       	eor	r21, r21
    2642:	ba 01       	movw	r22, r20
    2644:	4c 19       	sub	r20, r12
    2646:	5d 09       	sbc	r21, r13
    2648:	6e 09       	sbc	r22, r14
    264a:	7f 09       	sbc	r23, r15
    264c:	2a e0       	ldi	r18, 0x0A	; 10
    264e:	ce 01       	movw	r24, r28
    2650:	60 df       	rcall	.-320    	; 0x2512 <_ZN5Print11printNumberEmh>
    2652:	08 0f       	add	r16, r24
    2654:	19 1f       	adc	r17, r25
    2656:	06 c0       	rjmp	.+12     	; 0x2664 <_ZN5Print5printEli+0x64>
    2658:	2a e0       	ldi	r18, 0x0A	; 10
    265a:	5b df       	rcall	.-330    	; 0x2512 <_ZN5Print11printNumberEmh>
    265c:	8c 01       	movw	r16, r24
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <_ZN5Print5printEli+0x64>
    2660:	58 df       	rcall	.-336    	; 0x2512 <_ZN5Print11printNumberEmh>
    2662:	8c 01       	movw	r16, r24
    2664:	80 2f       	mov	r24, r16
    2666:	91 2f       	mov	r25, r17
    2668:	df 91       	pop	r29
    266a:	cf 91       	pop	r28
    266c:	1f 91       	pop	r17
    266e:	0f 91       	pop	r16
    2670:	ff 90       	pop	r15
    2672:	ef 90       	pop	r14
    2674:	df 90       	pop	r13
    2676:	cf 90       	pop	r12
    2678:	08 95       	ret

0000267a <_ZN5Print7printlnEli>:
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	ec 01       	movw	r28, r24
    2684:	bd df       	rcall	.-134    	; 0x2600 <_ZN5Print5printEli>
    2686:	8c 01       	movw	r16, r24
    2688:	ce 01       	movw	r24, r28
    268a:	1b df       	rcall	.-458    	; 0x24c2 <_ZN5Print7printlnEv>
    268c:	9c 01       	movw	r18, r24
    268e:	20 0f       	add	r18, r16
    2690:	31 1f       	adc	r19, r17
    2692:	82 2f       	mov	r24, r18
    2694:	93 2f       	mov	r25, r19
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	1f 91       	pop	r17
    269c:	0f 91       	pop	r16
    269e:	08 95       	ret

000026a0 <_ZN5Print5printEii>:
    26a0:	9a 01       	movw	r18, r20
    26a2:	ab 01       	movw	r20, r22
    26a4:	66 27       	eor	r22, r22
    26a6:	57 fd       	sbrc	r21, 7
    26a8:	60 95       	com	r22
    26aa:	76 2f       	mov	r23, r22
    26ac:	a9 cf       	rjmp	.-174    	; 0x2600 <_ZN5Print5printEli>
    26ae:	08 95       	ret

000026b0 <_ZN5Print7printlnEii>:
    26b0:	0f 93       	push	r16
    26b2:	1f 93       	push	r17
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	ec 01       	movw	r28, r24
    26ba:	f2 df       	rcall	.-28     	; 0x26a0 <_ZN5Print5printEii>
    26bc:	8c 01       	movw	r16, r24
    26be:	ce 01       	movw	r24, r28
    26c0:	00 df       	rcall	.-512    	; 0x24c2 <_ZN5Print7printlnEv>
    26c2:	9c 01       	movw	r18, r24
    26c4:	20 0f       	add	r18, r16
    26c6:	31 1f       	adc	r19, r17
    26c8:	82 2f       	mov	r24, r18
    26ca:	93 2f       	mov	r25, r19
    26cc:	df 91       	pop	r29
    26ce:	cf 91       	pop	r28
    26d0:	1f 91       	pop	r17
    26d2:	0f 91       	pop	r16
    26d4:	08 95       	ret

000026d6 <__vector_23>:
    26d6:	1f 92       	push	r1
    26d8:	0f 92       	push	r0
    26da:	0f b6       	in	r0, 0x3f	; 63
    26dc:	0f 92       	push	r0
    26de:	11 24       	eor	r1, r1
    26e0:	2f 93       	push	r18
    26e2:	3f 93       	push	r19
    26e4:	8f 93       	push	r24
    26e6:	9f 93       	push	r25
    26e8:	af 93       	push	r26
    26ea:	bf 93       	push	r27
    26ec:	80 91 80 0c 	lds	r24, 0x0C80
    26f0:	90 91 81 0c 	lds	r25, 0x0C81
    26f4:	a0 91 82 0c 	lds	r26, 0x0C82
    26f8:	b0 91 83 0c 	lds	r27, 0x0C83
    26fc:	30 91 88 0c 	lds	r19, 0x0C88
    2700:	23 2f       	mov	r18, r19
    2702:	2d 5f       	subi	r18, 0xFD	; 253
    2704:	2d 37       	cpi	r18, 0x7D	; 125
    2706:	20 f4       	brcc	.+8      	; 0x2710 <__vector_23+0x3a>
    2708:	01 96       	adiw	r24, 0x01	; 1
    270a:	a1 1d       	adc	r26, r1
    270c:	b1 1d       	adc	r27, r1
    270e:	05 c0       	rjmp	.+10     	; 0x271a <__vector_23+0x44>
    2710:	23 2f       	mov	r18, r19
    2712:	2a 57       	subi	r18, 0x7A	; 122
    2714:	02 96       	adiw	r24, 0x02	; 2
    2716:	a1 1d       	adc	r26, r1
    2718:	b1 1d       	adc	r27, r1
    271a:	20 93 88 0c 	sts	0x0C88, r18
    271e:	80 93 80 0c 	sts	0x0C80, r24
    2722:	90 93 81 0c 	sts	0x0C81, r25
    2726:	a0 93 82 0c 	sts	0x0C82, r26
    272a:	b0 93 83 0c 	sts	0x0C83, r27
    272e:	80 91 84 0c 	lds	r24, 0x0C84
    2732:	90 91 85 0c 	lds	r25, 0x0C85
    2736:	a0 91 86 0c 	lds	r26, 0x0C86
    273a:	b0 91 87 0c 	lds	r27, 0x0C87
    273e:	01 96       	adiw	r24, 0x01	; 1
    2740:	a1 1d       	adc	r26, r1
    2742:	b1 1d       	adc	r27, r1
    2744:	80 93 84 0c 	sts	0x0C84, r24
    2748:	90 93 85 0c 	sts	0x0C85, r25
    274c:	a0 93 86 0c 	sts	0x0C86, r26
    2750:	b0 93 87 0c 	sts	0x0C87, r27
    2754:	bf 91       	pop	r27
    2756:	af 91       	pop	r26
    2758:	9f 91       	pop	r25
    275a:	8f 91       	pop	r24
    275c:	3f 91       	pop	r19
    275e:	2f 91       	pop	r18
    2760:	0f 90       	pop	r0
    2762:	0f be       	out	0x3f, r0	; 63
    2764:	0f 90       	pop	r0
    2766:	1f 90       	pop	r1
    2768:	18 95       	reti

0000276a <millis>:
    276a:	0f 93       	push	r16
    276c:	1f 93       	push	r17
    276e:	8f b7       	in	r24, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	00 91 80 0c 	lds	r16, 0x0C80
    2776:	10 91 81 0c 	lds	r17, 0x0C81
    277a:	20 91 82 0c 	lds	r18, 0x0C82
    277e:	30 91 83 0c 	lds	r19, 0x0C83
    2782:	8f bf       	out	0x3f, r24	; 63
    2784:	60 2f       	mov	r22, r16
    2786:	71 2f       	mov	r23, r17
    2788:	82 2f       	mov	r24, r18
    278a:	93 2f       	mov	r25, r19
    278c:	1f 91       	pop	r17
    278e:	0f 91       	pop	r16
    2790:	08 95       	ret

00002792 <micros>:
    2792:	0f 93       	push	r16
    2794:	1f 93       	push	r17
    2796:	9f b7       	in	r25, 0x3f	; 63
    2798:	f8 94       	cli
    279a:	00 91 84 0c 	lds	r16, 0x0C84
    279e:	10 91 85 0c 	lds	r17, 0x0C85
    27a2:	20 91 86 0c 	lds	r18, 0x0C86
    27a6:	30 91 87 0c 	lds	r19, 0x0C87
    27aa:	86 b5       	in	r24, 0x26	; 38
    27ac:	a8 9b       	sbis	0x15, 0	; 21
    27ae:	06 c0       	rjmp	.+12     	; 0x27bc <micros+0x2a>
    27b0:	8f 3f       	cpi	r24, 0xFF	; 255
    27b2:	21 f0       	breq	.+8      	; 0x27bc <micros+0x2a>
    27b4:	0f 5f       	subi	r16, 0xFF	; 255
    27b6:	1f 4f       	sbci	r17, 0xFF	; 255
    27b8:	2f 4f       	sbci	r18, 0xFF	; 255
    27ba:	3f 4f       	sbci	r19, 0xFF	; 255
    27bc:	9f bf       	out	0x3f, r25	; 63
    27be:	32 2f       	mov	r19, r18
    27c0:	21 2f       	mov	r18, r17
    27c2:	10 2f       	mov	r17, r16
    27c4:	00 27       	eor	r16, r16
    27c6:	08 0f       	add	r16, r24
    27c8:	11 1d       	adc	r17, r1
    27ca:	21 1d       	adc	r18, r1
    27cc:	31 1d       	adc	r19, r1
    27ce:	00 0f       	add	r16, r16
    27d0:	11 1f       	adc	r17, r17
    27d2:	22 1f       	adc	r18, r18
    27d4:	33 1f       	adc	r19, r19
    27d6:	00 0f       	add	r16, r16
    27d8:	11 1f       	adc	r17, r17
    27da:	22 1f       	adc	r18, r18
    27dc:	33 1f       	adc	r19, r19
    27de:	60 2f       	mov	r22, r16
    27e0:	71 2f       	mov	r23, r17
    27e2:	82 2f       	mov	r24, r18
    27e4:	93 2f       	mov	r25, r19
    27e6:	1f 91       	pop	r17
    27e8:	0f 91       	pop	r16
    27ea:	08 95       	ret

000027ec <delay>:
    27ec:	cf 92       	push	r12
    27ee:	df 92       	push	r13
    27f0:	ef 92       	push	r14
    27f2:	ff 92       	push	r15
    27f4:	cf 93       	push	r28
    27f6:	df 93       	push	r29
    27f8:	6b 01       	movw	r12, r22
    27fa:	7c 01       	movw	r14, r24
    27fc:	ca df       	rcall	.-108    	; 0x2792 <micros>
    27fe:	eb 01       	movw	r28, r22
    2800:	c1 14       	cp	r12, r1
    2802:	d1 04       	cpc	r13, r1
    2804:	e1 04       	cpc	r14, r1
    2806:	f1 04       	cpc	r15, r1
    2808:	91 f0       	breq	.+36     	; 0x282e <delay+0x42>
    280a:	c3 df       	rcall	.-122    	; 0x2792 <micros>
    280c:	6c 1b       	sub	r22, r28
    280e:	7d 0b       	sbc	r23, r29
    2810:	68 3e       	cpi	r22, 0xE8	; 232
    2812:	73 40       	sbci	r23, 0x03	; 3
    2814:	38 f0       	brcs	.+14     	; 0x2824 <delay+0x38>
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	c8 1a       	sub	r12, r24
    281a:	d1 08       	sbc	r13, r1
    281c:	e1 08       	sbc	r14, r1
    281e:	f1 08       	sbc	r15, r1
    2820:	c8 51       	subi	r28, 0x18	; 24
    2822:	dc 4f       	sbci	r29, 0xFC	; 252
    2824:	c1 14       	cp	r12, r1
    2826:	d1 04       	cpc	r13, r1
    2828:	e1 04       	cpc	r14, r1
    282a:	f1 04       	cpc	r15, r1
    282c:	71 f7       	brne	.-36     	; 0x280a <delay+0x1e>
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	ff 90       	pop	r15
    2834:	ef 90       	pop	r14
    2836:	df 90       	pop	r13
    2838:	cf 90       	pop	r12
    283a:	08 95       	ret

0000283c <delayMicroseconds>:
    283c:	01 97       	sbiw	r24, 0x01	; 1
    283e:	39 f0       	breq	.+14     	; 0x284e <delayMicroseconds+0x12>
    2840:	88 0f       	add	r24, r24
    2842:	99 1f       	adc	r25, r25
    2844:	88 0f       	add	r24, r24
    2846:	99 1f       	adc	r25, r25
    2848:	02 97       	sbiw	r24, 0x02	; 2
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <delayMicroseconds+0xe>
    284e:	08 95       	ret

00002850 <init>:
    2850:	78 94       	sei
    2852:	84 b5       	in	r24, 0x24	; 36
    2854:	82 60       	ori	r24, 0x02	; 2
    2856:	84 bd       	out	0x24, r24	; 36
    2858:	84 b5       	in	r24, 0x24	; 36
    285a:	81 60       	ori	r24, 0x01	; 1
    285c:	84 bd       	out	0x24, r24	; 36
    285e:	85 b5       	in	r24, 0x25	; 37
    2860:	82 60       	ori	r24, 0x02	; 2
    2862:	85 bd       	out	0x25, r24	; 37
    2864:	85 b5       	in	r24, 0x25	; 37
    2866:	81 60       	ori	r24, 0x01	; 1
    2868:	85 bd       	out	0x25, r24	; 37
    286a:	ee e6       	ldi	r30, 0x6E	; 110
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	81 60       	ori	r24, 0x01	; 1
    2872:	80 83       	st	Z, r24
    2874:	e1 e8       	ldi	r30, 0x81	; 129
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	10 82       	st	Z, r1
    287a:	80 81       	ld	r24, Z
    287c:	82 60       	ori	r24, 0x02	; 2
    287e:	80 83       	st	Z, r24
    2880:	80 81       	ld	r24, Z
    2882:	81 60       	ori	r24, 0x01	; 1
    2884:	80 83       	st	Z, r24
    2886:	e0 e8       	ldi	r30, 0x80	; 128
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	81 60       	ori	r24, 0x01	; 1
    288e:	80 83       	st	Z, r24
    2890:	e1 eb       	ldi	r30, 0xB1	; 177
    2892:	f0 e0       	ldi	r31, 0x00	; 0
    2894:	80 81       	ld	r24, Z
    2896:	84 60       	ori	r24, 0x04	; 4
    2898:	80 83       	st	Z, r24
    289a:	e0 eb       	ldi	r30, 0xB0	; 176
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	81 60       	ori	r24, 0x01	; 1
    28a2:	80 83       	st	Z, r24
    28a4:	e1 e9       	ldi	r30, 0x91	; 145
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	80 81       	ld	r24, Z
    28aa:	82 60       	ori	r24, 0x02	; 2
    28ac:	80 83       	st	Z, r24
    28ae:	80 81       	ld	r24, Z
    28b0:	81 60       	ori	r24, 0x01	; 1
    28b2:	80 83       	st	Z, r24
    28b4:	e0 e9       	ldi	r30, 0x90	; 144
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	81 60       	ori	r24, 0x01	; 1
    28bc:	80 83       	st	Z, r24
    28be:	e1 ea       	ldi	r30, 0xA1	; 161
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	82 60       	ori	r24, 0x02	; 2
    28c6:	80 83       	st	Z, r24
    28c8:	80 81       	ld	r24, Z
    28ca:	81 60       	ori	r24, 0x01	; 1
    28cc:	80 83       	st	Z, r24
    28ce:	e0 ea       	ldi	r30, 0xA0	; 160
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	81 60       	ori	r24, 0x01	; 1
    28d6:	80 83       	st	Z, r24
    28d8:	e1 e2       	ldi	r30, 0x21	; 33
    28da:	f1 e0       	ldi	r31, 0x01	; 1
    28dc:	80 81       	ld	r24, Z
    28de:	82 60       	ori	r24, 0x02	; 2
    28e0:	80 83       	st	Z, r24
    28e2:	80 81       	ld	r24, Z
    28e4:	81 60       	ori	r24, 0x01	; 1
    28e6:	80 83       	st	Z, r24
    28e8:	e0 e2       	ldi	r30, 0x20	; 32
    28ea:	f1 e0       	ldi	r31, 0x01	; 1
    28ec:	80 81       	ld	r24, Z
    28ee:	81 60       	ori	r24, 0x01	; 1
    28f0:	80 83       	st	Z, r24
    28f2:	ea e7       	ldi	r30, 0x7A	; 122
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	84 60       	ori	r24, 0x04	; 4
    28fa:	80 83       	st	Z, r24
    28fc:	80 81       	ld	r24, Z
    28fe:	82 60       	ori	r24, 0x02	; 2
    2900:	80 83       	st	Z, r24
    2902:	80 81       	ld	r24, Z
    2904:	81 60       	ori	r24, 0x01	; 1
    2906:	80 83       	st	Z, r24
    2908:	80 81       	ld	r24, Z
    290a:	80 68       	ori	r24, 0x80	; 128
    290c:	80 83       	st	Z, r24
    290e:	10 92 c1 00 	sts	0x00C1, r1
    2912:	08 95       	ret

00002914 <turnOffPWM>:
    2914:	89 30       	cpi	r24, 0x09	; 9
    2916:	09 f4       	brne	.+2      	; 0x291a <turnOffPWM+0x6>
    2918:	4c c0       	rjmp	.+152    	; 0x29b2 <turnOffPWM+0x9e>
    291a:	88 f4       	brcc	.+34     	; 0x293e <turnOffPWM+0x2a>
    291c:	84 30       	cpi	r24, 0x04	; 4
    291e:	49 f1       	breq	.+82     	; 0x2972 <turnOffPWM+0x5e>
    2920:	38 f4       	brcc	.+14     	; 0x2930 <turnOffPWM+0x1c>
    2922:	82 30       	cpi	r24, 0x02	; 2
    2924:	81 f1       	breq	.+96     	; 0x2986 <turnOffPWM+0x72>
    2926:	f8 f4       	brcc	.+62     	; 0x2966 <turnOffPWM+0x52>
    2928:	81 30       	cpi	r24, 0x01	; 1
    292a:	09 f0       	breq	.+2      	; 0x292e <turnOffPWM+0x1a>
    292c:	71 c0       	rjmp	.+226    	; 0x2a10 <turnOffPWM+0xfc>
    292e:	27 c0       	rjmp	.+78     	; 0x297e <turnOffPWM+0x6a>
    2930:	87 30       	cpi	r24, 0x07	; 7
    2932:	99 f1       	breq	.+102    	; 0x299a <turnOffPWM+0x86>
    2934:	c0 f5       	brcc	.+112    	; 0x29a6 <turnOffPWM+0x92>
    2936:	86 30       	cpi	r24, 0x06	; 6
    2938:	09 f0       	breq	.+2      	; 0x293c <turnOffPWM+0x28>
    293a:	6a c0       	rjmp	.+212    	; 0x2a10 <turnOffPWM+0xfc>
    293c:	28 c0       	rjmp	.+80     	; 0x298e <turnOffPWM+0x7a>
    293e:	8d 30       	cpi	r24, 0x0D	; 13
    2940:	09 f4       	brne	.+2      	; 0x2944 <turnOffPWM+0x30>
    2942:	4f c0       	rjmp	.+158    	; 0x29e2 <turnOffPWM+0xce>
    2944:	30 f4       	brcc	.+12     	; 0x2952 <turnOffPWM+0x3e>
    2946:	8b 30       	cpi	r24, 0x0B	; 11
    2948:	09 f4       	brne	.+2      	; 0x294c <turnOffPWM+0x38>
    294a:	3f c0       	rjmp	.+126    	; 0x29ca <turnOffPWM+0xb6>
    294c:	08 f0       	brcs	.+2      	; 0x2950 <turnOffPWM+0x3c>
    294e:	43 c0       	rjmp	.+134    	; 0x29d6 <turnOffPWM+0xc2>
    2950:	36 c0       	rjmp	.+108    	; 0x29be <turnOffPWM+0xaa>
    2952:	80 31       	cpi	r24, 0x10	; 16
    2954:	09 f4       	brne	.+2      	; 0x2958 <turnOffPWM+0x44>
    2956:	51 c0       	rjmp	.+162    	; 0x29fa <turnOffPWM+0xe6>
    2958:	81 31       	cpi	r24, 0x11	; 17
    295a:	09 f4       	brne	.+2      	; 0x295e <turnOffPWM+0x4a>
    295c:	54 c0       	rjmp	.+168    	; 0x2a06 <turnOffPWM+0xf2>
    295e:	8f 30       	cpi	r24, 0x0F	; 15
    2960:	09 f0       	breq	.+2      	; 0x2964 <turnOffPWM+0x50>
    2962:	56 c0       	rjmp	.+172    	; 0x2a10 <turnOffPWM+0xfc>
    2964:	44 c0       	rjmp	.+136    	; 0x29ee <turnOffPWM+0xda>
    2966:	e0 e8       	ldi	r30, 0x80	; 128
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	8f 77       	andi	r24, 0x7F	; 127
    296e:	80 83       	st	Z, r24
    2970:	08 95       	ret
    2972:	e0 e8       	ldi	r30, 0x80	; 128
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	8f 7d       	andi	r24, 0xDF	; 223
    297a:	80 83       	st	Z, r24
    297c:	08 95       	ret
    297e:	84 b5       	in	r24, 0x24	; 36
    2980:	8f 77       	andi	r24, 0x7F	; 127
    2982:	84 bd       	out	0x24, r24	; 36
    2984:	08 95       	ret
    2986:	84 b5       	in	r24, 0x24	; 36
    2988:	8f 7d       	andi	r24, 0xDF	; 223
    298a:	84 bd       	out	0x24, r24	; 36
    298c:	08 95       	ret
    298e:	e0 eb       	ldi	r30, 0xB0	; 176
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	8f 77       	andi	r24, 0x7F	; 127
    2996:	80 83       	st	Z, r24
    2998:	08 95       	ret
    299a:	e0 eb       	ldi	r30, 0xB0	; 176
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	8f 7d       	andi	r24, 0xDF	; 223
    29a2:	80 83       	st	Z, r24
    29a4:	08 95       	ret
    29a6:	e0 e9       	ldi	r30, 0x90	; 144
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	8f 77       	andi	r24, 0x7F	; 127
    29ae:	80 83       	st	Z, r24
    29b0:	08 95       	ret
    29b2:	e0 e9       	ldi	r30, 0x90	; 144
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	8f 7d       	andi	r24, 0xDF	; 223
    29ba:	80 83       	st	Z, r24
    29bc:	08 95       	ret
    29be:	e0 e9       	ldi	r30, 0x90	; 144
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	80 81       	ld	r24, Z
    29c4:	87 7f       	andi	r24, 0xF7	; 247
    29c6:	80 83       	st	Z, r24
    29c8:	08 95       	ret
    29ca:	e0 ea       	ldi	r30, 0xA0	; 160
    29cc:	f0 e0       	ldi	r31, 0x00	; 0
    29ce:	80 81       	ld	r24, Z
    29d0:	8f 77       	andi	r24, 0x7F	; 127
    29d2:	80 83       	st	Z, r24
    29d4:	08 95       	ret
    29d6:	e0 ea       	ldi	r30, 0xA0	; 160
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	8f 7d       	andi	r24, 0xDF	; 223
    29de:	80 83       	st	Z, r24
    29e0:	08 95       	ret
    29e2:	e0 ea       	ldi	r30, 0xA0	; 160
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	87 7f       	andi	r24, 0xF7	; 247
    29ea:	80 83       	st	Z, r24
    29ec:	08 95       	ret
    29ee:	e0 e2       	ldi	r30, 0x20	; 32
    29f0:	f1 e0       	ldi	r31, 0x01	; 1
    29f2:	80 81       	ld	r24, Z
    29f4:	8f 77       	andi	r24, 0x7F	; 127
    29f6:	80 83       	st	Z, r24
    29f8:	08 95       	ret
    29fa:	e0 e2       	ldi	r30, 0x20	; 32
    29fc:	f1 e0       	ldi	r31, 0x01	; 1
    29fe:	80 81       	ld	r24, Z
    2a00:	8f 7d       	andi	r24, 0xDF	; 223
    2a02:	80 83       	st	Z, r24
    2a04:	08 95       	ret
    2a06:	e0 e2       	ldi	r30, 0x20	; 32
    2a08:	f1 e0       	ldi	r31, 0x01	; 1
    2a0a:	80 81       	ld	r24, Z
    2a0c:	87 7f       	andi	r24, 0xF7	; 247
    2a0e:	80 83       	st	Z, r24
    2a10:	08 95       	ret

00002a12 <pinMode>:
    2a12:	cf 93       	push	r28
    2a14:	df 93       	push	r29
    2a16:	90 e0       	ldi	r25, 0x00	; 0
    2a18:	fc 01       	movw	r30, r24
    2a1a:	e4 54       	subi	r30, 0x44	; 68
    2a1c:	fd 4f       	sbci	r31, 0xFD	; 253
    2a1e:	44 91       	lpm	r20, Z
    2a20:	fc 01       	movw	r30, r24
    2a22:	ee 5f       	subi	r30, 0xFE	; 254
    2a24:	fc 4f       	sbci	r31, 0xFC	; 252
    2a26:	84 91       	lpm	r24, Z
    2a28:	88 23       	and	r24, r24
    2a2a:	91 f1       	breq	.+100    	; 0x2a90 <pinMode+0x7e>
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	88 0f       	add	r24, r24
    2a30:	99 1f       	adc	r25, r25
    2a32:	fc 01       	movw	r30, r24
    2a34:	e4 58       	subi	r30, 0x84	; 132
    2a36:	fc 4f       	sbci	r31, 0xFC	; 252
    2a38:	25 91       	lpm	r18, Z+
    2a3a:	34 91       	lpm	r19, Z
    2a3c:	a2 2f       	mov	r26, r18
    2a3e:	b3 2f       	mov	r27, r19
    2a40:	8e 59       	subi	r24, 0x9E	; 158
    2a42:	9c 4f       	sbci	r25, 0xFC	; 252
    2a44:	fc 01       	movw	r30, r24
    2a46:	85 91       	lpm	r24, Z+
    2a48:	94 91       	lpm	r25, Z
    2a4a:	c8 2f       	mov	r28, r24
    2a4c:	d9 2f       	mov	r29, r25
    2a4e:	61 11       	cpse	r22, r1
    2a50:	0b c0       	rjmp	.+22     	; 0x2a68 <pinMode+0x56>
    2a52:	8f b7       	in	r24, 0x3f	; 63
    2a54:	f8 94       	cli
    2a56:	9c 91       	ld	r25, X
    2a58:	40 95       	com	r20
    2a5a:	94 23       	and	r25, r20
    2a5c:	9c 93       	st	X, r25
    2a5e:	e8 81       	ld	r30, Y
    2a60:	4e 23       	and	r20, r30
    2a62:	48 83       	st	Y, r20
    2a64:	8f bf       	out	0x3f, r24	; 63
    2a66:	14 c0       	rjmp	.+40     	; 0x2a90 <pinMode+0x7e>
    2a68:	62 30       	cpi	r22, 0x02	; 2
    2a6a:	61 f4       	brne	.+24     	; 0x2a84 <pinMode+0x72>
    2a6c:	8f b7       	in	r24, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	2c 91       	ld	r18, X
    2a72:	94 2f       	mov	r25, r20
    2a74:	90 95       	com	r25
    2a76:	92 23       	and	r25, r18
    2a78:	9c 93       	st	X, r25
    2a7a:	e8 81       	ld	r30, Y
    2a7c:	4e 2b       	or	r20, r30
    2a7e:	48 83       	st	Y, r20
    2a80:	8f bf       	out	0x3f, r24	; 63
    2a82:	06 c0       	rjmp	.+12     	; 0x2a90 <pinMode+0x7e>
    2a84:	8f b7       	in	r24, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	ec 91       	ld	r30, X
    2a8a:	4e 2b       	or	r20, r30
    2a8c:	4c 93       	st	X, r20
    2a8e:	8f bf       	out	0x3f, r24	; 63
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	08 95       	ret

00002a96 <digitalWrite>:
    2a96:	1f 93       	push	r17
    2a98:	cf 93       	push	r28
    2a9a:	df 93       	push	r29
    2a9c:	c6 2f       	mov	r28, r22
    2a9e:	28 2f       	mov	r18, r24
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	f9 01       	movw	r30, r18
    2aa4:	ea 58       	subi	r30, 0x8A	; 138
    2aa6:	fd 4f       	sbci	r31, 0xFD	; 253
    2aa8:	84 91       	lpm	r24, Z
    2aaa:	f9 01       	movw	r30, r18
    2aac:	e4 54       	subi	r30, 0x44	; 68
    2aae:	fd 4f       	sbci	r31, 0xFD	; 253
    2ab0:	d4 91       	lpm	r29, Z
    2ab2:	f9 01       	movw	r30, r18
    2ab4:	ee 5f       	subi	r30, 0xFE	; 254
    2ab6:	fc 4f       	sbci	r31, 0xFC	; 252
    2ab8:	14 91       	lpm	r17, Z
    2aba:	11 23       	and	r17, r17
    2abc:	d1 f0       	breq	.+52     	; 0x2af2 <digitalWrite+0x5c>
    2abe:	81 11       	cpse	r24, r1
    2ac0:	29 df       	rcall	.-430    	; 0x2914 <turnOffPWM>
    2ac2:	21 2f       	mov	r18, r17
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	f9 01       	movw	r30, r18
    2ac8:	ee 0f       	add	r30, r30
    2aca:	ff 1f       	adc	r31, r31
    2acc:	ee 59       	subi	r30, 0x9E	; 158
    2ace:	fc 4f       	sbci	r31, 0xFC	; 252
    2ad0:	85 91       	lpm	r24, Z+
    2ad2:	94 91       	lpm	r25, Z
    2ad4:	a8 2f       	mov	r26, r24
    2ad6:	b9 2f       	mov	r27, r25
    2ad8:	8f b7       	in	r24, 0x3f	; 63
    2ada:	f8 94       	cli
    2adc:	c1 11       	cpse	r28, r1
    2ade:	05 c0       	rjmp	.+10     	; 0x2aea <digitalWrite+0x54>
    2ae0:	ec 91       	ld	r30, X
    2ae2:	d0 95       	com	r29
    2ae4:	de 23       	and	r29, r30
    2ae6:	dc 93       	st	X, r29
    2ae8:	03 c0       	rjmp	.+6      	; 0x2af0 <digitalWrite+0x5a>
    2aea:	ec 91       	ld	r30, X
    2aec:	de 2b       	or	r29, r30
    2aee:	dc 93       	st	X, r29
    2af0:	8f bf       	out	0x3f, r24	; 63
    2af2:	df 91       	pop	r29
    2af4:	cf 91       	pop	r28
    2af6:	1f 91       	pop	r17
    2af8:	08 95       	ret

00002afa <pulseIn>:
    2afa:	4f 92       	push	r4
    2afc:	5f 92       	push	r5
    2afe:	6f 92       	push	r6
    2b00:	7f 92       	push	r7
    2b02:	8f 92       	push	r8
    2b04:	9f 92       	push	r9
    2b06:	af 92       	push	r10
    2b08:	bf 92       	push	r11
    2b0a:	cf 92       	push	r12
    2b0c:	df 92       	push	r13
    2b0e:	ef 92       	push	r14
    2b10:	ff 92       	push	r15
    2b12:	0f 93       	push	r16
    2b14:	1f 93       	push	r17
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	e4 54       	subi	r30, 0x44	; 68
    2b20:	fd 4f       	sbci	r31, 0xFD	; 253
    2b22:	14 91       	lpm	r17, Z
    2b24:	fc 01       	movw	r30, r24
    2b26:	ee 5f       	subi	r30, 0xFE	; 254
    2b28:	fc 4f       	sbci	r31, 0xFC	; 252
    2b2a:	c4 91       	lpm	r28, Z
    2b2c:	61 11       	cpse	r22, r1
    2b2e:	02 c0       	rjmp	.+4      	; 0x2b34 <pulseIn+0x3a>
    2b30:	00 e0       	ldi	r16, 0x00	; 0
    2b32:	01 c0       	rjmp	.+2      	; 0x2b36 <pulseIn+0x3c>
    2b34:	01 2f       	mov	r16, r17
    2b36:	0f 2e       	mov	r0, r31
    2b38:	cc 24       	eor	r12, r12
    2b3a:	ca 94       	dec	r12
    2b3c:	dc 2c       	mov	r13, r12
    2b3e:	ec 2c       	mov	r14, r12
    2b40:	ff e0       	ldi	r31, 0x0F	; 15
    2b42:	ff 2e       	mov	r15, r31
    2b44:	f0 2d       	mov	r31, r0
    2b46:	c2 22       	and	r12, r18
    2b48:	d3 22       	and	r13, r19
    2b4a:	e4 22       	and	r14, r20
    2b4c:	f5 22       	and	r15, r21
    2b4e:	d0 e0       	ldi	r29, 0x00	; 0
    2b50:	cc 0f       	add	r28, r28
    2b52:	dd 1f       	adc	r29, r29
    2b54:	c8 5b       	subi	r28, 0xB8	; 184
    2b56:	dc 4f       	sbci	r29, 0xFC	; 252
    2b58:	41 2c       	mov	r4, r1
    2b5a:	51 2c       	mov	r5, r1
    2b5c:	32 01       	movw	r6, r4
    2b5e:	fe 01       	movw	r30, r28
    2b60:	65 91       	lpm	r22, Z+
    2b62:	74 91       	lpm	r23, Z
    2b64:	0d c0       	rjmp	.+26     	; 0x2b80 <pulseIn+0x86>
    2b66:	d3 01       	movw	r26, r6
    2b68:	c2 01       	movw	r24, r4
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	a1 1d       	adc	r26, r1
    2b6e:	b1 1d       	adc	r27, r1
    2b70:	4c 14       	cp	r4, r12
    2b72:	5d 04       	cpc	r5, r13
    2b74:	6e 04       	cpc	r6, r14
    2b76:	7f 04       	cpc	r7, r15
    2b78:	09 f4       	brne	.+2      	; 0x2b7c <pulseIn+0x82>
    2b7a:	80 c0       	rjmp	.+256    	; 0x2c7c <pulseIn+0x182>
    2b7c:	2c 01       	movw	r4, r24
    2b7e:	3d 01       	movw	r6, r26
    2b80:	e6 2f       	mov	r30, r22
    2b82:	f7 2f       	mov	r31, r23
    2b84:	80 81       	ld	r24, Z
    2b86:	81 23       	and	r24, r17
    2b88:	08 17       	cp	r16, r24
    2b8a:	69 f3       	breq	.-38     	; 0x2b66 <pulseIn+0x6c>
    2b8c:	11 c0       	rjmp	.+34     	; 0x2bb0 <pulseIn+0xb6>
    2b8e:	81 2c       	mov	r8, r1
    2b90:	91 2c       	mov	r9, r1
    2b92:	54 01       	movw	r10, r8
    2b94:	83 94       	inc	r8
    2b96:	84 0c       	add	r8, r4
    2b98:	95 1c       	adc	r9, r5
    2b9a:	a6 1c       	adc	r10, r6
    2b9c:	b7 1c       	adc	r11, r7
    2b9e:	4c 14       	cp	r4, r12
    2ba0:	5d 04       	cpc	r5, r13
    2ba2:	6e 04       	cpc	r6, r14
    2ba4:	7f 04       	cpc	r7, r15
    2ba6:	09 f4       	brne	.+2      	; 0x2baa <pulseIn+0xb0>
    2ba8:	6d c0       	rjmp	.+218    	; 0x2c84 <pulseIn+0x18a>
    2baa:	24 01       	movw	r4, r8
    2bac:	35 01       	movw	r6, r10
    2bae:	03 c0       	rjmp	.+6      	; 0x2bb6 <pulseIn+0xbc>
    2bb0:	fe 01       	movw	r30, r28
    2bb2:	85 91       	lpm	r24, Z+
    2bb4:	94 91       	lpm	r25, Z
    2bb6:	e8 2f       	mov	r30, r24
    2bb8:	f9 2f       	mov	r31, r25
    2bba:	60 81       	ld	r22, Z
    2bbc:	61 23       	and	r22, r17
    2bbe:	06 13       	cpse	r16, r22
    2bc0:	e6 cf       	rjmp	.-52     	; 0x2b8e <pulseIn+0x94>
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	85 91       	lpm	r24, Z+
    2bc6:	94 91       	lpm	r25, Z
    2bc8:	e8 2f       	mov	r30, r24
    2bca:	f9 2f       	mov	r31, r25
    2bcc:	80 81       	ld	r24, Z
    2bce:	81 23       	and	r24, r17
    2bd0:	08 13       	cpse	r16, r24
    2bd2:	25 c0       	rjmp	.+74     	; 0x2c1e <pulseIn+0x124>
    2bd4:	4c 14       	cp	r4, r12
    2bd6:	5d 04       	cpc	r5, r13
    2bd8:	6e 04       	cpc	r6, r14
    2bda:	7f 04       	cpc	r7, r15
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <pulseIn+0xe6>
    2bde:	56 c0       	rjmp	.+172    	; 0x2c8c <pulseIn+0x192>
    2be0:	81 2c       	mov	r8, r1
    2be2:	91 2c       	mov	r9, r1
    2be4:	54 01       	movw	r10, r8
    2be6:	fe 01       	movw	r30, r28
    2be8:	85 91       	lpm	r24, Z+
    2bea:	94 91       	lpm	r25, Z
    2bec:	0c c0       	rjmp	.+24     	; 0x2c06 <pulseIn+0x10c>
    2bee:	b3 01       	movw	r22, r6
    2bf0:	a2 01       	movw	r20, r4
    2bf2:	48 0d       	add	r20, r8
    2bf4:	59 1d       	adc	r21, r9
    2bf6:	6a 1d       	adc	r22, r10
    2bf8:	7b 1d       	adc	r23, r11
    2bfa:	c4 16       	cp	r12, r20
    2bfc:	d5 06       	cpc	r13, r21
    2bfe:	e6 06       	cpc	r14, r22
    2c00:	f7 06       	cpc	r15, r23
    2c02:	09 f4       	brne	.+2      	; 0x2c06 <pulseIn+0x10c>
    2c04:	47 c0       	rjmp	.+142    	; 0x2c94 <pulseIn+0x19a>
    2c06:	2f ef       	ldi	r18, 0xFF	; 255
    2c08:	82 1a       	sub	r8, r18
    2c0a:	92 0a       	sbc	r9, r18
    2c0c:	a2 0a       	sbc	r10, r18
    2c0e:	b2 0a       	sbc	r11, r18
    2c10:	e8 2f       	mov	r30, r24
    2c12:	f9 2f       	mov	r31, r25
    2c14:	60 81       	ld	r22, Z
    2c16:	61 23       	and	r22, r17
    2c18:	06 17       	cp	r16, r22
    2c1a:	49 f3       	breq	.-46     	; 0x2bee <pulseIn+0xf4>
    2c1c:	03 c0       	rjmp	.+6      	; 0x2c24 <pulseIn+0x12a>
    2c1e:	81 2c       	mov	r8, r1
    2c20:	91 2c       	mov	r9, r1
    2c22:	54 01       	movw	r10, r8
    2c24:	d5 01       	movw	r26, r10
    2c26:	c4 01       	movw	r24, r8
    2c28:	88 0f       	add	r24, r24
    2c2a:	99 1f       	adc	r25, r25
    2c2c:	aa 1f       	adc	r26, r26
    2c2e:	bb 1f       	adc	r27, r27
    2c30:	88 0f       	add	r24, r24
    2c32:	99 1f       	adc	r25, r25
    2c34:	aa 1f       	adc	r26, r26
    2c36:	bb 1f       	adc	r27, r27
    2c38:	6c 01       	movw	r12, r24
    2c3a:	7d 01       	movw	r14, r26
    2c3c:	cc 0c       	add	r12, r12
    2c3e:	dd 1c       	adc	r13, r13
    2c40:	ee 1c       	adc	r14, r14
    2c42:	ff 1c       	adc	r15, r15
    2c44:	cc 0c       	add	r12, r12
    2c46:	dd 1c       	adc	r13, r13
    2c48:	ee 1c       	adc	r14, r14
    2c4a:	ff 1c       	adc	r15, r15
    2c4c:	8c 0d       	add	r24, r12
    2c4e:	9d 1d       	adc	r25, r13
    2c50:	ae 1d       	adc	r26, r14
    2c52:	bf 1d       	adc	r27, r15
    2c54:	88 0e       	add	r8, r24
    2c56:	99 1e       	adc	r9, r25
    2c58:	aa 1e       	adc	r10, r26
    2c5a:	bb 1e       	adc	r11, r27
    2c5c:	80 e1       	ldi	r24, 0x10	; 16
    2c5e:	88 0e       	add	r8, r24
    2c60:	91 1c       	adc	r9, r1
    2c62:	a1 1c       	adc	r10, r1
    2c64:	b1 1c       	adc	r11, r1
    2c66:	75 01       	movw	r14, r10
    2c68:	64 01       	movw	r12, r8
    2c6a:	68 94       	set
    2c6c:	13 f8       	bld	r1, 3
    2c6e:	f6 94       	lsr	r15
    2c70:	e7 94       	ror	r14
    2c72:	d7 94       	ror	r13
    2c74:	c7 94       	ror	r12
    2c76:	16 94       	lsr	r1
    2c78:	d1 f7       	brne	.-12     	; 0x2c6e <pulseIn+0x174>
    2c7a:	0f c0       	rjmp	.+30     	; 0x2c9a <pulseIn+0x1a0>
    2c7c:	c1 2c       	mov	r12, r1
    2c7e:	d1 2c       	mov	r13, r1
    2c80:	76 01       	movw	r14, r12
    2c82:	0b c0       	rjmp	.+22     	; 0x2c9a <pulseIn+0x1a0>
    2c84:	c1 2c       	mov	r12, r1
    2c86:	d1 2c       	mov	r13, r1
    2c88:	76 01       	movw	r14, r12
    2c8a:	07 c0       	rjmp	.+14     	; 0x2c9a <pulseIn+0x1a0>
    2c8c:	c1 2c       	mov	r12, r1
    2c8e:	d1 2c       	mov	r13, r1
    2c90:	76 01       	movw	r14, r12
    2c92:	03 c0       	rjmp	.+6      	; 0x2c9a <pulseIn+0x1a0>
    2c94:	c1 2c       	mov	r12, r1
    2c96:	d1 2c       	mov	r13, r1
    2c98:	76 01       	movw	r14, r12
    2c9a:	6c 2d       	mov	r22, r12
    2c9c:	7d 2d       	mov	r23, r13
    2c9e:	8e 2d       	mov	r24, r14
    2ca0:	9f 2d       	mov	r25, r15
    2ca2:	df 91       	pop	r29
    2ca4:	cf 91       	pop	r28
    2ca6:	1f 91       	pop	r17
    2ca8:	0f 91       	pop	r16
    2caa:	ff 90       	pop	r15
    2cac:	ef 90       	pop	r14
    2cae:	df 90       	pop	r13
    2cb0:	cf 90       	pop	r12
    2cb2:	bf 90       	pop	r11
    2cb4:	af 90       	pop	r10
    2cb6:	9f 90       	pop	r9
    2cb8:	8f 90       	pop	r8
    2cba:	7f 90       	pop	r7
    2cbc:	6f 90       	pop	r6
    2cbe:	5f 90       	pop	r5
    2cc0:	4f 90       	pop	r4
    2cc2:	08 95       	ret

00002cc4 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2cc4:	10 92 f6 0c 	sts	0x0CF6, r1
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	80 93 f4 0c 	sts	0x0CF4, r24
    2cce:	10 92 f3 0c 	sts	0x0CF3, r1
    2cd2:	61 e0       	ldi	r22, 0x01	; 1
    2cd4:	84 e1       	ldi	r24, 0x14	; 20
    2cd6:	df de       	rcall	.-578    	; 0x2a96 <digitalWrite>
    2cd8:	61 e0       	ldi	r22, 0x01	; 1
    2cda:	85 e1       	ldi	r24, 0x15	; 21
    2cdc:	dc de       	rcall	.-584    	; 0x2a96 <digitalWrite>
    2cde:	e9 eb       	ldi	r30, 0xB9	; 185
    2ce0:	f0 e0       	ldi	r31, 0x00	; 0
    2ce2:	80 81       	ld	r24, Z
    2ce4:	8e 7f       	andi	r24, 0xFE	; 254
    2ce6:	80 83       	st	Z, r24
    2ce8:	80 81       	ld	r24, Z
    2cea:	8d 7f       	andi	r24, 0xFD	; 253
    2cec:	80 83       	st	Z, r24
    2cee:	88 e4       	ldi	r24, 0x48	; 72
    2cf0:	80 93 b8 00 	sts	0x00B8, r24
    2cf4:	85 e4       	ldi	r24, 0x45	; 69
    2cf6:	80 93 bc 00 	sts	0x00BC, r24
    2cfa:	08 95       	ret

00002cfc <twi_readFrom>:
    2cfc:	41 32       	cpi	r20, 0x21	; 33
    2cfe:	08 f0       	brcs	.+2      	; 0x2d02 <twi_readFrom+0x6>
    2d00:	45 c0       	rjmp	.+138    	; 0x2d8c <twi_readFrom+0x90>
    2d02:	90 91 f6 0c 	lds	r25, 0x0CF6
    2d06:	91 11       	cpse	r25, r1
    2d08:	fc cf       	rjmp	.-8      	; 0x2d02 <twi_readFrom+0x6>
    2d0a:	91 e0       	ldi	r25, 0x01	; 1
    2d0c:	90 93 f6 0c 	sts	0x0CF6, r25
    2d10:	20 93 f4 0c 	sts	0x0CF4, r18
    2d14:	2f ef       	ldi	r18, 0xFF	; 255
    2d16:	20 93 89 0c 	sts	0x0C89, r18
    2d1a:	10 92 ce 0c 	sts	0x0CCE, r1
    2d1e:	24 0f       	add	r18, r20
    2d20:	20 93 cd 0c 	sts	0x0CCD, r18
    2d24:	90 93 f5 0c 	sts	0x0CF5, r25
    2d28:	90 91 f5 0c 	lds	r25, 0x0CF5
    2d2c:	88 0f       	add	r24, r24
    2d2e:	89 2b       	or	r24, r25
    2d30:	80 93 f5 0c 	sts	0x0CF5, r24
    2d34:	80 91 f3 0c 	lds	r24, 0x0CF3
    2d38:	81 30       	cpi	r24, 0x01	; 1
    2d3a:	51 f4       	brne	.+20     	; 0x2d50 <twi_readFrom+0x54>
    2d3c:	10 92 f3 0c 	sts	0x0CF3, r1
    2d40:	80 91 f5 0c 	lds	r24, 0x0CF5
    2d44:	80 93 bb 00 	sts	0x00BB, r24
    2d48:	85 ec       	ldi	r24, 0xC5	; 197
    2d4a:	80 93 bc 00 	sts	0x00BC, r24
    2d4e:	03 c0       	rjmp	.+6      	; 0x2d56 <twi_readFrom+0x5a>
    2d50:	85 ee       	ldi	r24, 0xE5	; 229
    2d52:	80 93 bc 00 	sts	0x00BC, r24
    2d56:	80 91 f6 0c 	lds	r24, 0x0CF6
    2d5a:	81 30       	cpi	r24, 0x01	; 1
    2d5c:	e1 f3       	breq	.-8      	; 0x2d56 <twi_readFrom+0x5a>
    2d5e:	80 91 ce 0c 	lds	r24, 0x0CCE
    2d62:	84 17       	cp	r24, r20
    2d64:	10 f4       	brcc	.+4      	; 0x2d6a <twi_readFrom+0x6e>
    2d66:	40 91 ce 0c 	lds	r20, 0x0CCE
    2d6a:	44 23       	and	r20, r20
    2d6c:	89 f0       	breq	.+34     	; 0x2d90 <twi_readFrom+0x94>
    2d6e:	ef ec       	ldi	r30, 0xCF	; 207
    2d70:	fc e0       	ldi	r31, 0x0C	; 12
    2d72:	a6 2f       	mov	r26, r22
    2d74:	b7 2f       	mov	r27, r23
    2d76:	2f ef       	ldi	r18, 0xFF	; 255
    2d78:	24 0f       	add	r18, r20
    2d7a:	30 e0       	ldi	r19, 0x00	; 0
    2d7c:	20 53       	subi	r18, 0x30	; 48
    2d7e:	33 4f       	sbci	r19, 0xF3	; 243
    2d80:	91 91       	ld	r25, Z+
    2d82:	9d 93       	st	X+, r25
    2d84:	e2 17       	cp	r30, r18
    2d86:	f3 07       	cpc	r31, r19
    2d88:	d9 f7       	brne	.-10     	; 0x2d80 <twi_readFrom+0x84>
    2d8a:	04 c0       	rjmp	.+8      	; 0x2d94 <twi_readFrom+0x98>
    2d8c:	80 e0       	ldi	r24, 0x00	; 0
    2d8e:	08 95       	ret
    2d90:	84 2f       	mov	r24, r20
    2d92:	08 95       	ret
    2d94:	84 2f       	mov	r24, r20
    2d96:	08 95       	ret

00002d98 <twi_writeTo>:
    2d98:	0f 93       	push	r16
    2d9a:	41 32       	cpi	r20, 0x21	; 33
    2d9c:	08 f0       	brcs	.+2      	; 0x2da0 <twi_writeTo+0x8>
    2d9e:	50 c0       	rjmp	.+160    	; 0x2e40 <twi_writeTo+0xa8>
    2da0:	90 91 f6 0c 	lds	r25, 0x0CF6
    2da4:	91 11       	cpse	r25, r1
    2da6:	fc cf       	rjmp	.-8      	; 0x2da0 <twi_writeTo+0x8>
    2da8:	92 e0       	ldi	r25, 0x02	; 2
    2daa:	90 93 f6 0c 	sts	0x0CF6, r25
    2dae:	00 93 f4 0c 	sts	0x0CF4, r16
    2db2:	9f ef       	ldi	r25, 0xFF	; 255
    2db4:	90 93 89 0c 	sts	0x0C89, r25
    2db8:	10 92 ce 0c 	sts	0x0CCE, r1
    2dbc:	40 93 cd 0c 	sts	0x0CCD, r20
    2dc0:	44 23       	and	r20, r20
    2dc2:	69 f0       	breq	.+26     	; 0x2dde <twi_writeTo+0x46>
    2dc4:	fb 01       	movw	r30, r22
    2dc6:	af ec       	ldi	r26, 0xCF	; 207
    2dc8:	bc e0       	ldi	r27, 0x0C	; 12
    2dca:	6f 5f       	subi	r22, 0xFF	; 255
    2dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dce:	41 50       	subi	r20, 0x01	; 1
    2dd0:	64 0f       	add	r22, r20
    2dd2:	71 1d       	adc	r23, r1
    2dd4:	91 91       	ld	r25, Z+
    2dd6:	9d 93       	st	X+, r25
    2dd8:	e6 17       	cp	r30, r22
    2dda:	f7 07       	cpc	r31, r23
    2ddc:	d9 f7       	brne	.-10     	; 0x2dd4 <twi_writeTo+0x3c>
    2dde:	10 92 f5 0c 	sts	0x0CF5, r1
    2de2:	90 91 f5 0c 	lds	r25, 0x0CF5
    2de6:	88 0f       	add	r24, r24
    2de8:	89 2b       	or	r24, r25
    2dea:	80 93 f5 0c 	sts	0x0CF5, r24
    2dee:	80 91 f3 0c 	lds	r24, 0x0CF3
    2df2:	81 30       	cpi	r24, 0x01	; 1
    2df4:	51 f4       	brne	.+20     	; 0x2e0a <twi_writeTo+0x72>
    2df6:	10 92 f3 0c 	sts	0x0CF3, r1
    2dfa:	80 91 f5 0c 	lds	r24, 0x0CF5
    2dfe:	80 93 bb 00 	sts	0x00BB, r24
    2e02:	85 ec       	ldi	r24, 0xC5	; 197
    2e04:	80 93 bc 00 	sts	0x00BC, r24
    2e08:	03 c0       	rjmp	.+6      	; 0x2e10 <twi_writeTo+0x78>
    2e0a:	85 ee       	ldi	r24, 0xE5	; 229
    2e0c:	80 93 bc 00 	sts	0x00BC, r24
    2e10:	22 23       	and	r18, r18
    2e12:	41 f0       	breq	.+16     	; 0x2e24 <twi_writeTo+0x8c>
    2e14:	80 91 f6 0c 	lds	r24, 0x0CF6
    2e18:	82 30       	cpi	r24, 0x02	; 2
    2e1a:	21 f4       	brne	.+8      	; 0x2e24 <twi_writeTo+0x8c>
    2e1c:	80 91 f6 0c 	lds	r24, 0x0CF6
    2e20:	82 30       	cpi	r24, 0x02	; 2
    2e22:	e1 f3       	breq	.-8      	; 0x2e1c <twi_writeTo+0x84>
    2e24:	80 91 89 0c 	lds	r24, 0x0C89
    2e28:	8f 3f       	cpi	r24, 0xFF	; 255
    2e2a:	61 f0       	breq	.+24     	; 0x2e44 <twi_writeTo+0xac>
    2e2c:	80 91 89 0c 	lds	r24, 0x0C89
    2e30:	80 32       	cpi	r24, 0x20	; 32
    2e32:	51 f0       	breq	.+20     	; 0x2e48 <twi_writeTo+0xb0>
    2e34:	80 91 89 0c 	lds	r24, 0x0C89
    2e38:	80 33       	cpi	r24, 0x30	; 48
    2e3a:	41 f4       	brne	.+16     	; 0x2e4c <twi_writeTo+0xb4>
    2e3c:	83 e0       	ldi	r24, 0x03	; 3
    2e3e:	07 c0       	rjmp	.+14     	; 0x2e4e <twi_writeTo+0xb6>
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	05 c0       	rjmp	.+10     	; 0x2e4e <twi_writeTo+0xb6>
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	03 c0       	rjmp	.+6      	; 0x2e4e <twi_writeTo+0xb6>
    2e48:	82 e0       	ldi	r24, 0x02	; 2
    2e4a:	01 c0       	rjmp	.+2      	; 0x2e4e <twi_writeTo+0xb6>
    2e4c:	84 e0       	ldi	r24, 0x04	; 4
    2e4e:	0f 91       	pop	r16
    2e50:	08 95       	ret

00002e52 <twi_transmit>:
    2e52:	61 32       	cpi	r22, 0x21	; 33
    2e54:	a8 f4       	brcc	.+42     	; 0x2e80 <twi_transmit+0x2e>
    2e56:	20 91 f6 0c 	lds	r18, 0x0CF6
    2e5a:	24 30       	cpi	r18, 0x04	; 4
    2e5c:	99 f4       	brne	.+38     	; 0x2e84 <twi_transmit+0x32>
    2e5e:	60 93 ab 0c 	sts	0x0CAB, r22
    2e62:	66 23       	and	r22, r22
    2e64:	89 f0       	breq	.+34     	; 0x2e88 <twi_transmit+0x36>
    2e66:	fc 01       	movw	r30, r24
    2e68:	ad ea       	ldi	r26, 0xAD	; 173
    2e6a:	bc e0       	ldi	r27, 0x0C	; 12
    2e6c:	01 96       	adiw	r24, 0x01	; 1
    2e6e:	61 50       	subi	r22, 0x01	; 1
    2e70:	86 0f       	add	r24, r22
    2e72:	91 1d       	adc	r25, r1
    2e74:	21 91       	ld	r18, Z+
    2e76:	2d 93       	st	X+, r18
    2e78:	e8 17       	cp	r30, r24
    2e7a:	f9 07       	cpc	r31, r25
    2e7c:	d9 f7       	brne	.-10     	; 0x2e74 <twi_transmit+0x22>
    2e7e:	06 c0       	rjmp	.+12     	; 0x2e8c <twi_transmit+0x3a>
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	08 95       	ret
    2e84:	82 e0       	ldi	r24, 0x02	; 2
    2e86:	08 95       	ret
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	08 95       	ret
    2e8c:	80 e0       	ldi	r24, 0x00	; 0
    2e8e:	08 95       	ret

00002e90 <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2e90:	85 ed       	ldi	r24, 0xD5	; 213
    2e92:	80 93 bc 00 	sts	0x00BC, r24

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2e96:	ec eb       	ldi	r30, 0xBC	; 188
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	80 81       	ld	r24, Z
    2e9c:	84 fd       	sbrc	r24, 4
    2e9e:	fd cf       	rjmp	.-6      	; 0x2e9a <twi_stop+0xa>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2ea0:	10 92 f6 0c 	sts	0x0CF6, r1
    2ea4:	08 95       	ret

00002ea6 <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2ea6:	85 ec       	ldi	r24, 0xC5	; 197
    2ea8:	80 93 bc 00 	sts	0x00BC, r24

  // update twi state
  twi_state = TWI_READY;
    2eac:	10 92 f6 0c 	sts	0x0CF6, r1
    2eb0:	08 95       	ret

00002eb2 <__vector_39>:
}

SIGNAL(TWI_vect)
{
    2eb2:	1f 92       	push	r1
    2eb4:	0f 92       	push	r0
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	0f 92       	push	r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	0b b6       	in	r0, 0x3b	; 59
    2ebe:	0f 92       	push	r0
    2ec0:	2f 93       	push	r18
    2ec2:	3f 93       	push	r19
    2ec4:	4f 93       	push	r20
    2ec6:	5f 93       	push	r21
    2ec8:	6f 93       	push	r22
    2eca:	7f 93       	push	r23
    2ecc:	8f 93       	push	r24
    2ece:	9f 93       	push	r25
    2ed0:	af 93       	push	r26
    2ed2:	bf 93       	push	r27
    2ed4:	ef 93       	push	r30
    2ed6:	ff 93       	push	r31
  switch(TW_STATUS){
    2ed8:	80 91 b9 00 	lds	r24, 0x00B9
    2edc:	88 7f       	andi	r24, 0xF8	; 248
    2ede:	90 e0       	ldi	r25, 0x00	; 0
    2ee0:	89 3c       	cpi	r24, 0xC9	; 201
    2ee2:	91 05       	cpc	r25, r1
    2ee4:	08 f0       	brcs	.+2      	; 0x2ee8 <__vector_39+0x36>
    2ee6:	ed c0       	rjmp	.+474    	; 0x30c2 <__vector_39+0x210>
    2ee8:	fc 01       	movw	r30, r24
    2eea:	ee 58       	subi	r30, 0x8E	; 142
    2eec:	ff 4f       	sbci	r31, 0xFF	; 255
    2eee:	3a c1       	rjmp	.+628    	; 0x3164 <__tablejump2__>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2ef0:	80 91 f5 0c 	lds	r24, 0x0CF5
    2ef4:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2ef8:	85 ec       	ldi	r24, 0xC5	; 197
    2efa:	80 93 bc 00 	sts	0x00BC, r24
    2efe:	e1 c0       	rjmp	.+450    	; 0x30c2 <__vector_39+0x210>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2f00:	90 91 ce 0c 	lds	r25, 0x0CCE
    2f04:	80 91 cd 0c 	lds	r24, 0x0CCD
    2f08:	98 17       	cp	r25, r24
    2f0a:	80 f4       	brcc	.+32     	; 0x2f2c <__vector_39+0x7a>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2f0c:	e0 91 ce 0c 	lds	r30, 0x0CCE
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	8e 0f       	add	r24, r30
    2f14:	80 93 ce 0c 	sts	0x0CCE, r24
    2f18:	f0 e0       	ldi	r31, 0x00	; 0
    2f1a:	e1 53       	subi	r30, 0x31	; 49
    2f1c:	f3 4f       	sbci	r31, 0xF3	; 243
    2f1e:	80 81       	ld	r24, Z
    2f20:	80 93 bb 00 	sts	0x00BB, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2f24:	85 ec       	ldi	r24, 0xC5	; 197
    2f26:	80 93 bc 00 	sts	0x00BC, r24
    2f2a:	cb c0       	rjmp	.+406    	; 0x30c2 <__vector_39+0x210>
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
        twi_reply(1);
      }else{
	if (twi_sendStop)
    2f2c:	80 91 f4 0c 	lds	r24, 0x0CF4
    2f30:	88 23       	and	r24, r24
    2f32:	11 f0       	breq	.+4      	; 0x2f38 <__vector_39+0x86>
          twi_stop();
    2f34:	ad df       	rcall	.-166    	; 0x2e90 <twi_stop>
    2f36:	c5 c0       	rjmp	.+394    	; 0x30c2 <__vector_39+0x210>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2f38:	81 e0       	ldi	r24, 0x01	; 1
    2f3a:	80 93 f3 0c 	sts	0x0CF3, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2f3e:	84 ea       	ldi	r24, 0xA4	; 164
    2f40:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    2f44:	10 92 f6 0c 	sts	0x0CF6, r1
    2f48:	bc c0       	rjmp	.+376    	; 0x30c2 <__vector_39+0x210>
	}
      }
      break;
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
    2f4a:	80 e2       	ldi	r24, 0x20	; 32
    2f4c:	80 93 89 0c 	sts	0x0C89, r24
      twi_stop();
    2f50:	9f df       	rcall	.-194    	; 0x2e90 <twi_stop>
      break;
    2f52:	b7 c0       	rjmp	.+366    	; 0x30c2 <__vector_39+0x210>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2f54:	80 e3       	ldi	r24, 0x30	; 48
    2f56:	80 93 89 0c 	sts	0x0C89, r24
      twi_stop();
    2f5a:	9a df       	rcall	.-204    	; 0x2e90 <twi_stop>
      break;
    2f5c:	b2 c0       	rjmp	.+356    	; 0x30c2 <__vector_39+0x210>
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2f5e:	88 e3       	ldi	r24, 0x38	; 56
    2f60:	80 93 89 0c 	sts	0x0C89, r24
      twi_releaseBus();
    2f64:	a0 df       	rcall	.-192    	; 0x2ea6 <twi_releaseBus>
      break;
    2f66:	ad c0       	rjmp	.+346    	; 0x30c2 <__vector_39+0x210>

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2f68:	e0 91 ce 0c 	lds	r30, 0x0CCE
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	8e 0f       	add	r24, r30
    2f70:	80 93 ce 0c 	sts	0x0CCE, r24
    2f74:	80 91 bb 00 	lds	r24, 0x00BB
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	e1 53       	subi	r30, 0x31	; 49
    2f7c:	f3 4f       	sbci	r31, 0xF3	; 243
    2f7e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2f80:	90 91 ce 0c 	lds	r25, 0x0CCE
    2f84:	80 91 cd 0c 	lds	r24, 0x0CCD
    2f88:	98 17       	cp	r25, r24
    2f8a:	20 f4       	brcc	.+8      	; 0x2f94 <__vector_39+0xe2>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2f8c:	85 ec       	ldi	r24, 0xC5	; 197
    2f8e:	80 93 bc 00 	sts	0x00BC, r24
    2f92:	97 c0       	rjmp	.+302    	; 0x30c2 <__vector_39+0x210>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2f94:	85 e8       	ldi	r24, 0x85	; 133
    2f96:	80 93 bc 00 	sts	0x00BC, r24
    2f9a:	93 c0       	rjmp	.+294    	; 0x30c2 <__vector_39+0x210>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2f9c:	e0 91 ce 0c 	lds	r30, 0x0CCE
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	8e 0f       	add	r24, r30
    2fa4:	80 93 ce 0c 	sts	0x0CCE, r24
    2fa8:	80 91 bb 00 	lds	r24, 0x00BB
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	e1 53       	subi	r30, 0x31	; 49
    2fb0:	f3 4f       	sbci	r31, 0xF3	; 243
    2fb2:	80 83       	st	Z, r24
	if (twi_sendStop)
    2fb4:	80 91 f4 0c 	lds	r24, 0x0CF4
    2fb8:	88 23       	and	r24, r24
    2fba:	11 f0       	breq	.+4      	; 0x2fc0 <__vector_39+0x10e>
          twi_stop();
    2fbc:	69 df       	rcall	.-302    	; 0x2e90 <twi_stop>
    2fbe:	81 c0       	rjmp	.+258    	; 0x30c2 <__vector_39+0x210>
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    2fc0:	81 e0       	ldi	r24, 0x01	; 1
    2fc2:	80 93 f3 0c 	sts	0x0CF3, r24
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2fc6:	84 ea       	ldi	r24, 0xA4	; 164
    2fc8:	80 93 bc 00 	sts	0x00BC, r24
	  twi_state = TWI_READY;
    2fcc:	10 92 f6 0c 	sts	0x0CF6, r1
    2fd0:	78 c0       	rjmp	.+240    	; 0x30c2 <__vector_39+0x210>
	}    
	break;
    case TW_MR_SLA_NACK: // address sent, nack received
      twi_stop();
    2fd2:	5e df       	rcall	.-324    	; 0x2e90 <twi_stop>
      break;
    2fd4:	76 c0       	rjmp	.+236    	; 0x30c2 <__vector_39+0x210>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2fd6:	83 e0       	ldi	r24, 0x03	; 3
    2fd8:	80 93 f6 0c 	sts	0x0CF6, r24
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2fdc:	10 92 8a 0c 	sts	0x0C8A, r1
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2fe0:	85 ec       	ldi	r24, 0xC5	; 197
    2fe2:	80 93 bc 00 	sts	0x00BC, r24
    2fe6:	6d c0       	rjmp	.+218    	; 0x30c2 <__vector_39+0x210>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2fe8:	80 91 8a 0c 	lds	r24, 0x0C8A
    2fec:	80 32       	cpi	r24, 0x20	; 32
    2fee:	80 f4       	brcc	.+32     	; 0x3010 <__vector_39+0x15e>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2ff0:	e0 91 8a 0c 	lds	r30, 0x0C8A
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	8e 0f       	add	r24, r30
    2ff8:	80 93 8a 0c 	sts	0x0C8A, r24
    2ffc:	80 91 bb 00 	lds	r24, 0x00BB
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	e5 57       	subi	r30, 0x75	; 117
    3004:	f3 4f       	sbci	r31, 0xF3	; 243
    3006:	80 83       	st	Z, r24
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3008:	85 ec       	ldi	r24, 0xC5	; 197
    300a:	80 93 bc 00 	sts	0x00BC, r24
    300e:	59 c0       	rjmp	.+178    	; 0x30c2 <__vector_39+0x210>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3010:	85 e8       	ldi	r24, 0x85	; 133
    3012:	80 93 bc 00 	sts	0x00BC, r24
    3016:	55 c0       	rjmp	.+170    	; 0x30c2 <__vector_39+0x210>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3018:	80 91 8a 0c 	lds	r24, 0x0C8A
    301c:	80 32       	cpi	r24, 0x20	; 32
    301e:	30 f4       	brcc	.+12     	; 0x302c <__vector_39+0x17a>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3020:	e0 91 8a 0c 	lds	r30, 0x0C8A
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	e5 57       	subi	r30, 0x75	; 117
    3028:	f3 4f       	sbci	r31, 0xF3	; 243
    302a:	10 82       	st	Z, r1
      }
      // sends ack and stops interface for clock stretching
      twi_stop();
    302c:	31 df       	rcall	.-414    	; 0x2e90 <twi_stop>
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    302e:	60 91 8a 0c 	lds	r22, 0x0C8A
    3032:	70 e0       	ldi	r23, 0x00	; 0
    3034:	e0 91 ef 0c 	lds	r30, 0x0CEF
    3038:	f0 91 f0 0c 	lds	r31, 0x0CF0
    303c:	8b e8       	ldi	r24, 0x8B	; 139
    303e:	9c e0       	ldi	r25, 0x0C	; 12
    3040:	19 95       	eicall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    3042:	10 92 8a 0c 	sts	0x0C8A, r1
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3046:	2f df       	rcall	.-418    	; 0x2ea6 <twi_releaseBus>
      break;
    3048:	3c c0       	rjmp	.+120    	; 0x30c2 <__vector_39+0x210>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    304a:	85 e8       	ldi	r24, 0x85	; 133
    304c:	80 93 bc 00 	sts	0x00BC, r24
    3050:	38 c0       	rjmp	.+112    	; 0x30c2 <__vector_39+0x210>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    3052:	84 e0       	ldi	r24, 0x04	; 4
    3054:	80 93 f6 0c 	sts	0x0CF6, r24
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    3058:	10 92 ac 0c 	sts	0x0CAC, r1
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    305c:	10 92 ab 0c 	sts	0x0CAB, r1
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    3060:	e0 91 f1 0c 	lds	r30, 0x0CF1
    3064:	f0 91 f2 0c 	lds	r31, 0x0CF2
    3068:	19 95       	eicall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    306a:	80 91 ab 0c 	lds	r24, 0x0CAB
    306e:	81 11       	cpse	r24, r1
    3070:	05 c0       	rjmp	.+10     	; 0x307c <__vector_39+0x1ca>
        twi_txBufferLength = 1;
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	80 93 ab 0c 	sts	0x0CAB, r24
        twi_txBuffer[0] = 0x00;
    3078:	10 92 ad 0c 	sts	0x0CAD, r1
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    307c:	e0 91 ac 0c 	lds	r30, 0x0CAC
    3080:	81 e0       	ldi	r24, 0x01	; 1
    3082:	8e 0f       	add	r24, r30
    3084:	80 93 ac 0c 	sts	0x0CAC, r24
    3088:	f0 e0       	ldi	r31, 0x00	; 0
    308a:	e3 55       	subi	r30, 0x53	; 83
    308c:	f3 4f       	sbci	r31, 0xF3	; 243
    308e:	80 81       	ld	r24, Z
    3090:	80 93 bb 00 	sts	0x00BB, r24
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3094:	90 91 ac 0c 	lds	r25, 0x0CAC
    3098:	80 91 ab 0c 	lds	r24, 0x0CAB
    309c:	98 17       	cp	r25, r24
    309e:	20 f4       	brcc	.+8      	; 0x30a8 <__vector_39+0x1f6>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    30a0:	85 ec       	ldi	r24, 0xC5	; 197
    30a2:	80 93 bc 00 	sts	0x00BC, r24
    30a6:	0d c0       	rjmp	.+26     	; 0x30c2 <__vector_39+0x210>
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    30a8:	85 e8       	ldi	r24, 0x85	; 133
    30aa:	80 93 bc 00 	sts	0x00BC, r24
    30ae:	09 c0       	rjmp	.+18     	; 0x30c2 <__vector_39+0x210>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    30b0:	85 ec       	ldi	r24, 0xC5	; 197
    30b2:	80 93 bc 00 	sts	0x00BC, r24
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    30b6:	10 92 f6 0c 	sts	0x0CF6, r1
      break;
    30ba:	03 c0       	rjmp	.+6      	; 0x30c2 <__vector_39+0x210>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    30bc:	10 92 89 0c 	sts	0x0C89, r1
      twi_stop();
    30c0:	e7 de       	rcall	.-562    	; 0x2e90 <twi_stop>
      break;
  }
}
    30c2:	ff 91       	pop	r31
    30c4:	ef 91       	pop	r30
    30c6:	bf 91       	pop	r27
    30c8:	af 91       	pop	r26
    30ca:	9f 91       	pop	r25
    30cc:	8f 91       	pop	r24
    30ce:	7f 91       	pop	r23
    30d0:	6f 91       	pop	r22
    30d2:	5f 91       	pop	r21
    30d4:	4f 91       	pop	r20
    30d6:	3f 91       	pop	r19
    30d8:	2f 91       	pop	r18
    30da:	0f 90       	pop	r0
    30dc:	0b be       	out	0x3b, r0	; 59
    30de:	0f 90       	pop	r0
    30e0:	0f be       	out	0x3f, r0	; 63
    30e2:	0f 90       	pop	r0
    30e4:	1f 90       	pop	r1
    30e6:	18 95       	reti

000030e8 <__udivmodsi4>:
    30e8:	a1 e2       	ldi	r26, 0x21	; 33
    30ea:	1a 2e       	mov	r1, r26
    30ec:	aa 1b       	sub	r26, r26
    30ee:	bb 1b       	sub	r27, r27
    30f0:	fd 01       	movw	r30, r26
    30f2:	0d c0       	rjmp	.+26     	; 0x310e <__udivmodsi4_ep>

000030f4 <__udivmodsi4_loop>:
    30f4:	aa 1f       	adc	r26, r26
    30f6:	bb 1f       	adc	r27, r27
    30f8:	ee 1f       	adc	r30, r30
    30fa:	ff 1f       	adc	r31, r31
    30fc:	a2 17       	cp	r26, r18
    30fe:	b3 07       	cpc	r27, r19
    3100:	e4 07       	cpc	r30, r20
    3102:	f5 07       	cpc	r31, r21
    3104:	20 f0       	brcs	.+8      	; 0x310e <__udivmodsi4_ep>
    3106:	a2 1b       	sub	r26, r18
    3108:	b3 0b       	sbc	r27, r19
    310a:	e4 0b       	sbc	r30, r20
    310c:	f5 0b       	sbc	r31, r21

0000310e <__udivmodsi4_ep>:
    310e:	66 1f       	adc	r22, r22
    3110:	77 1f       	adc	r23, r23
    3112:	88 1f       	adc	r24, r24
    3114:	99 1f       	adc	r25, r25
    3116:	1a 94       	dec	r1
    3118:	69 f7       	brne	.-38     	; 0x30f4 <__udivmodsi4_loop>
    311a:	60 95       	com	r22
    311c:	70 95       	com	r23
    311e:	80 95       	com	r24
    3120:	90 95       	com	r25
    3122:	9b 01       	movw	r18, r22
    3124:	ac 01       	movw	r20, r24
    3126:	bd 01       	movw	r22, r26
    3128:	cf 01       	movw	r24, r30
    312a:	08 95       	ret

0000312c <__divmodsi4>:
    312c:	05 2e       	mov	r0, r21
    312e:	97 fb       	bst	r25, 7
    3130:	16 f4       	brtc	.+4      	; 0x3136 <__divmodsi4+0xa>
    3132:	00 94       	com	r0
    3134:	0f d0       	rcall	.+30     	; 0x3154 <__negsi2>
    3136:	57 fd       	sbrc	r21, 7
    3138:	05 d0       	rcall	.+10     	; 0x3144 <__divmodsi4_neg2>
    313a:	d6 df       	rcall	.-84     	; 0x30e8 <__udivmodsi4>
    313c:	07 fc       	sbrc	r0, 7
    313e:	02 d0       	rcall	.+4      	; 0x3144 <__divmodsi4_neg2>
    3140:	46 f4       	brtc	.+16     	; 0x3152 <__divmodsi4_exit>
    3142:	08 c0       	rjmp	.+16     	; 0x3154 <__negsi2>

00003144 <__divmodsi4_neg2>:
    3144:	50 95       	com	r21
    3146:	40 95       	com	r20
    3148:	30 95       	com	r19
    314a:	21 95       	neg	r18
    314c:	3f 4f       	sbci	r19, 0xFF	; 255
    314e:	4f 4f       	sbci	r20, 0xFF	; 255
    3150:	5f 4f       	sbci	r21, 0xFF	; 255

00003152 <__divmodsi4_exit>:
    3152:	08 95       	ret

00003154 <__negsi2>:
    3154:	90 95       	com	r25
    3156:	80 95       	com	r24
    3158:	70 95       	com	r23
    315a:	61 95       	neg	r22
    315c:	7f 4f       	sbci	r23, 0xFF	; 255
    315e:	8f 4f       	sbci	r24, 0xFF	; 255
    3160:	9f 4f       	sbci	r25, 0xFF	; 255
    3162:	08 95       	ret

00003164 <__tablejump2__>:
    3164:	ee 0f       	add	r30, r30
    3166:	ff 1f       	adc	r31, r31

00003168 <__tablejump__>:
    3168:	05 90       	lpm	r0, Z+
    316a:	f4 91       	lpm	r31, Z
    316c:	e0 2d       	mov	r30, r0
    316e:	19 94       	eijmp

00003170 <__tablejump_elpm__>:
    3170:	07 90       	elpm	r0, Z+
    3172:	f6 91       	elpm	r31, Z
    3174:	e0 2d       	mov	r30, r0
    3176:	19 94       	eijmp

00003178 <_exit>:
    3178:	f8 94       	cli

0000317a <__stop_program>:
    317a:	ff cf       	rjmp	.-2      	; 0x317a <__stop_program>
